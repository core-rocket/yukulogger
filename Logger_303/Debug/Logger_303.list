
Logger_303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005048  08005048  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005048  08005048  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005048  08005048  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  080050c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080050c0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136c3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024b8  00000000  00000000  00033763  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b88  00000000  00000000  00035c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  000367a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003274  00000000  00000000  00037238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b646  00000000  00000000  0003a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000826d4  00000000  00000000  00045af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c81c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f4  00000000  00000000  000c8244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bd0 	.word	0x08004bd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004bd0 	.word	0x08004bd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f90d 	bl	80004b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 f808 	bl	80002ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f003 fa0e 	bl	80036bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x54>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_InitTick+0x58>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f917 	bl	80004fe <HAL_SYSTICK_Config>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00e      	b.n	80002f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d80a      	bhi.n	80002f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	2200      	movs	r2, #0
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 f8ed 	bl	80004c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_InitTick+0x5c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e000      	b.n	80002f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000008 	.word	0x20000008
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	2000009c 	.word	0x2000009c

08000334 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return uwTick;  
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <HAL_GetTick+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	2000009c 	.word	0x2000009c

0800034c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f003 0307 	and.w	r3, r3, #7
 800035a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <NVIC_SetPriorityGrouping+0x44>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000362:	68ba      	ldr	r2, [r7, #8]
 8000364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000368:	4013      	ands	r3, r2
 800036a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800037e:	4a04      	ldr	r2, [pc, #16]	; (8000390 <NVIC_SetPriorityGrouping+0x44>)
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	60d3      	str	r3, [r2, #12]
}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <NVIC_GetPriorityGrouping+0x18>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	0a1b      	lsrs	r3, r3, #8
 800039e:	f003 0307 	and.w	r3, r3, #7
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	6039      	str	r1, [r7, #0]
 80003ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	da0b      	bge.n	80003dc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	490c      	ldr	r1, [pc, #48]	; (80003fc <NVIC_SetPriority+0x4c>)
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	f003 030f 	and.w	r3, r3, #15
 80003d0:	3b04      	subs	r3, #4
 80003d2:	0112      	lsls	r2, r2, #4
 80003d4:	b2d2      	uxtb	r2, r2
 80003d6:	440b      	add	r3, r1
 80003d8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003da:	e009      	b.n	80003f0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <NVIC_SetPriority+0x50>)
 80003e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e6:	0112      	lsls	r2, r2, #4
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	440b      	add	r3, r1
 80003ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	e000ed00 	.word	0xe000ed00
 8000400:	e000e100 	.word	0xe000e100

08000404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000404:	b480      	push	{r7}
 8000406:	b089      	sub	sp, #36	; 0x24
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f003 0307 	and.w	r3, r3, #7
 8000416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000418:	69fb      	ldr	r3, [r7, #28]
 800041a:	f1c3 0307 	rsb	r3, r3, #7
 800041e:	2b04      	cmp	r3, #4
 8000420:	bf28      	it	cs
 8000422:	2304      	movcs	r3, #4
 8000424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	3304      	adds	r3, #4
 800042a:	2b06      	cmp	r3, #6
 800042c:	d902      	bls.n	8000434 <NVIC_EncodePriority+0x30>
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	3b03      	subs	r3, #3
 8000432:	e000      	b.n	8000436 <NVIC_EncodePriority+0x32>
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	f04f 32ff 	mov.w	r2, #4294967295
 800043c:	69bb      	ldr	r3, [r7, #24]
 800043e:	fa02 f303 	lsl.w	r3, r2, r3
 8000442:	43da      	mvns	r2, r3
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	401a      	ands	r2, r3
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800044c:	f04f 31ff 	mov.w	r1, #4294967295
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	fa01 f303 	lsl.w	r3, r1, r3
 8000456:	43d9      	mvns	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800045c:	4313      	orrs	r3, r2
         );
}
 800045e:	4618      	mov	r0, r3
 8000460:	3724      	adds	r7, #36	; 0x24
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
	...

0800046c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3b01      	subs	r3, #1
 8000478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800047c:	d301      	bcc.n	8000482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800047e:	2301      	movs	r3, #1
 8000480:	e00f      	b.n	80004a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <SysTick_Config+0x40>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3b01      	subs	r3, #1
 8000488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800048a:	210f      	movs	r1, #15
 800048c:	f04f 30ff 	mov.w	r0, #4294967295
 8000490:	f7ff ff8e 	bl	80003b0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <SysTick_Config+0x40>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <SysTick_Config+0x40>)
 800049c:	2207      	movs	r2, #7
 800049e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	e000e010 	.word	0xe000e010

080004b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff ff47 	bl	800034c <NVIC_SetPriorityGrouping>
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b086      	sub	sp, #24
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	4603      	mov	r3, r0
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
 80004d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004d8:	f7ff ff5c 	bl	8000394 <NVIC_GetPriorityGrouping>
 80004dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	68b9      	ldr	r1, [r7, #8]
 80004e2:	6978      	ldr	r0, [r7, #20]
 80004e4:	f7ff ff8e 	bl	8000404 <NVIC_EncodePriority>
 80004e8:	4602      	mov	r2, r0
 80004ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff5d 	bl	80003b0 <NVIC_SetPriority>
}
 80004f6:	bf00      	nop
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffb0 	bl	800046c <SysTick_Config>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800052e:	e14e      	b.n	80007ce <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	2101      	movs	r1, #1
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	fa01 f303 	lsl.w	r3, r1, r3
 800053c:	4013      	ands	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	2b00      	cmp	r3, #0
 8000544:	f000 8140 	beq.w	80007c8 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d003      	beq.n	8000558 <HAL_GPIO_Init+0x40>
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	2b12      	cmp	r3, #18
 8000556:	d123      	bne.n	80005a0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	08da      	lsrs	r2, r3, #3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3208      	adds	r2, #8
 8000560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000564:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	f003 0307 	and.w	r3, r3, #7
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	220f      	movs	r2, #15
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	43db      	mvns	r3, r3
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	691a      	ldr	r2, [r3, #16]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	4313      	orrs	r3, r2
 8000590:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	08da      	lsrs	r2, r3, #3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3208      	adds	r2, #8
 800059a:	6939      	ldr	r1, [r7, #16]
 800059c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2203      	movs	r2, #3
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	4013      	ands	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	f003 0203 	and.w	r2, r3, #3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00b      	beq.n	80005f4 <HAL_GPIO_Init+0xdc>
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d007      	beq.n	80005f4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e8:	2b11      	cmp	r3, #17
 80005ea:	d003      	beq.n	80005f4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	2b12      	cmp	r3, #18
 80005f2:	d130      	bne.n	8000656 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	2203      	movs	r2, #3
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	43db      	mvns	r3, r3
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	4013      	ands	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	4313      	orrs	r3, r2
 800061c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800062a:	2201      	movs	r2, #1
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	4013      	ands	r3, r2
 8000638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	091b      	lsrs	r3, r3, #4
 8000640:	f003 0201 	and.w	r2, r3, #1
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4313      	orrs	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	2203      	movs	r2, #3
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	43db      	mvns	r3, r3
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	4013      	ands	r3, r2
 800066c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	4313      	orrs	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	2b00      	cmp	r3, #0
 8000690:	f000 809a 	beq.w	80007c8 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000694:	4b55      	ldr	r3, [pc, #340]	; (80007ec <HAL_GPIO_Init+0x2d4>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a54      	ldr	r2, [pc, #336]	; (80007ec <HAL_GPIO_Init+0x2d4>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b52      	ldr	r3, [pc, #328]	; (80007ec <HAL_GPIO_Init+0x2d4>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006ac:	4a50      	ldr	r2, [pc, #320]	; (80007f0 <HAL_GPIO_Init+0x2d8>)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	089b      	lsrs	r3, r3, #2
 80006b2:	3302      	adds	r3, #2
 80006b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	f003 0303 	and.w	r3, r3, #3
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	220f      	movs	r2, #15
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	4013      	ands	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006d6:	d013      	beq.n	8000700 <HAL_GPIO_Init+0x1e8>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a46      	ldr	r2, [pc, #280]	; (80007f4 <HAL_GPIO_Init+0x2dc>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d00d      	beq.n	80006fc <HAL_GPIO_Init+0x1e4>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a45      	ldr	r2, [pc, #276]	; (80007f8 <HAL_GPIO_Init+0x2e0>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d007      	beq.n	80006f8 <HAL_GPIO_Init+0x1e0>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a44      	ldr	r2, [pc, #272]	; (80007fc <HAL_GPIO_Init+0x2e4>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d101      	bne.n	80006f4 <HAL_GPIO_Init+0x1dc>
 80006f0:	2303      	movs	r3, #3
 80006f2:	e006      	b.n	8000702 <HAL_GPIO_Init+0x1ea>
 80006f4:	2305      	movs	r3, #5
 80006f6:	e004      	b.n	8000702 <HAL_GPIO_Init+0x1ea>
 80006f8:	2302      	movs	r3, #2
 80006fa:	e002      	b.n	8000702 <HAL_GPIO_Init+0x1ea>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <HAL_GPIO_Init+0x1ea>
 8000700:	2300      	movs	r3, #0
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	f002 0203 	and.w	r2, r2, #3
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	4093      	lsls	r3, r2
 800070c:	693a      	ldr	r2, [r7, #16]
 800070e:	4313      	orrs	r3, r2
 8000710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000712:	4937      	ldr	r1, [pc, #220]	; (80007f0 <HAL_GPIO_Init+0x2d8>)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	089b      	lsrs	r3, r3, #2
 8000718:	3302      	adds	r3, #2
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000720:	4b37      	ldr	r3, [pc, #220]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	43db      	mvns	r3, r3
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	4013      	ands	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4313      	orrs	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000744:	4a2e      	ldr	r2, [pc, #184]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	43db      	mvns	r3, r3
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	4013      	ands	r3, r2
 8000758:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4313      	orrs	r3, r2
 800076c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800076e:	4a24      	ldr	r2, [pc, #144]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	43db      	mvns	r3, r3
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4313      	orrs	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000798:	4a19      	ldr	r2, [pc, #100]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	43db      	mvns	r3, r3
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	4013      	ands	r3, r2
 80007ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d003      	beq.n	80007c2 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4313      	orrs	r3, r2
 80007c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_GPIO_Init+0x2e8>)
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	fa22 f303 	lsr.w	r3, r2, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f47f aea9 	bne.w	8000530 <HAL_GPIO_Init+0x18>
  }
}
 80007de:	bf00      	nop
 80007e0:	371c      	adds	r7, #28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010000 	.word	0x40010000
 80007f4:	48000400 	.word	0x48000400
 80007f8:	48000800 	.word	0x48000800
 80007fc:	48000c00 	.word	0x48000c00
 8000800:	40010400 	.word	0x40010400

08000804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]
 8000810:	4613      	mov	r3, r2
 8000812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000814:	787b      	ldrb	r3, [r7, #1]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d003      	beq.n	8000822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800081a:	887a      	ldrh	r2, [r7, #2]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000820:	e002      	b.n	8000828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000822:	887a      	ldrh	r2, [r7, #2]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d101      	bne.n	8000846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e081      	b.n	800094a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d106      	bne.n	8000860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f002 ff52 	bl	8003704 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2224      	movs	r2, #36	; 0x24
 8000864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f022 0201 	bic.w	r2, r2, #1
 8000876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685a      	ldr	r2, [r3, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000884:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000894:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d107      	bne.n	80008ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	689a      	ldr	r2, [r3, #8]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	e006      	b.n	80008bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80008ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d104      	bne.n	80008ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	691a      	ldr	r2, [r3, #16]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	ea42 0103 	orr.w	r1, r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	021a      	lsls	r2, r3, #8
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	430a      	orrs	r2, r1
 800090a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69d9      	ldr	r1, [r3, #28]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a1a      	ldr	r2, [r3, #32]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 0201 	orr.w	r2, r2, #1
 800092a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2220      	movs	r2, #32
 8000936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b20      	cmp	r3, #32
 8000966:	d138      	bne.n	80009da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800096e:	2b01      	cmp	r3, #1
 8000970:	d101      	bne.n	8000976 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000972:	2302      	movs	r3, #2
 8000974:	e032      	b.n	80009dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2224      	movs	r2, #36	; 0x24
 8000982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0201 	bic.w	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	6819      	ldr	r1, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f042 0201 	orr.w	r2, r2, #1
 80009c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2220      	movs	r2, #32
 80009ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80009da:	2302      	movs	r3, #2
  }
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b20      	cmp	r3, #32
 8000a00:	d139      	bne.n	8000a76 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d101      	bne.n	8000a10 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e033      	b.n	8000a78 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2224      	movs	r2, #36	; 0x24
 8000a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 0201 	bic.w	r2, r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f042 0201 	orr.w	r2, r2, #1
 8000a60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2220      	movs	r2, #32
 8000a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8000a76:	2302      	movs	r3, #2
  }
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f000 beda 	b.w	8001852 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 816e 	beq.w	8000d8a <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000aae:	4bb5      	ldr	r3, [pc, #724]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 030c 	and.w	r3, r3, #12
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d00c      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aba:	4bb2      	ldr	r3, [pc, #712]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 030c 	and.w	r3, r3, #12
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d15a      	bne.n	8000b7c <HAL_RCC_OscConfig+0xf8>
 8000ac6:	4baf      	ldr	r3, [pc, #700]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ad2:	d153      	bne.n	8000b7c <HAL_RCC_OscConfig+0xf8>
 8000ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ad8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000adc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000ae0:	fa93 f3a3 	rbit	r3, r3
 8000ae4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ae8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aec:	fab3 f383 	clz	r3, r3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d102      	bne.n	8000b06 <HAL_RCC_OscConfig+0x82>
 8000b00:	4ba0      	ldr	r3, [pc, #640]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	e015      	b.n	8000b32 <HAL_RCC_OscConfig+0xae>
 8000b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000b12:	fa93 f3a3 	rbit	r3, r3
 8000b16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b1e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b22:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000b26:	fa93 f3a3 	rbit	r3, r3
 8000b2a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b2e:	4b95      	ldr	r3, [pc, #596]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b36:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000b3a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000b3e:	fa92 f2a2 	rbit	r2, r2
 8000b42:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000b46:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b252      	sxtb	r2, r2
 8000b50:	f042 0220 	orr.w	r2, r2, #32
 8000b54:	b252      	sxtb	r2, r2
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	f002 021f 	and.w	r2, r2, #31
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 810f 	beq.w	8000d88 <HAL_RCC_OscConfig+0x304>
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f040 8109 	bne.w	8000d88 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f000 be6b 	b.w	8001852 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b86:	d106      	bne.n	8000b96 <HAL_RCC_OscConfig+0x112>
 8000b88:	4b7e      	ldr	r3, [pc, #504]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a7d      	ldr	r2, [pc, #500]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	e030      	b.n	8000bf8 <HAL_RCC_OscConfig+0x174>
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10c      	bne.n	8000bba <HAL_RCC_OscConfig+0x136>
 8000ba0:	4b78      	ldr	r3, [pc, #480]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a77      	ldr	r2, [pc, #476]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b75      	ldr	r3, [pc, #468]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a74      	ldr	r2, [pc, #464]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e01e      	b.n	8000bf8 <HAL_RCC_OscConfig+0x174>
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bc4:	d10c      	bne.n	8000be0 <HAL_RCC_OscConfig+0x15c>
 8000bc6:	4b6f      	ldr	r3, [pc, #444]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a6e      	ldr	r2, [pc, #440]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a6b      	ldr	r2, [pc, #428]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e00b      	b.n	8000bf8 <HAL_RCC_OscConfig+0x174>
 8000be0:	4b68      	ldr	r3, [pc, #416]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a67      	ldr	r2, [pc, #412]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b65      	ldr	r3, [pc, #404]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a64      	ldr	r2, [pc, #400]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bf8:	4b62      	ldr	r3, [pc, #392]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	f023 020f 	bic.w	r2, r3, #15
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	495f      	ldr	r1, [pc, #380]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d05a      	beq.n	8000ccc <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c16:	f7ff fb8d 	bl	8000334 <HAL_GetTick>
 8000c1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1e:	e00a      	b.n	8000c36 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c20:	f7ff fb88 	bl	8000334 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b64      	cmp	r3, #100	; 0x64
 8000c2e:	d902      	bls.n	8000c36 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	f000 be0e 	b.w	8001852 <HAL_RCC_OscConfig+0xdce>
 8000c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c3a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000c4a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4e:	fab3 f383 	clz	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	095b      	lsrs	r3, r3, #5
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d102      	bne.n	8000c68 <HAL_RCC_OscConfig+0x1e4>
 8000c62:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	e015      	b.n	8000c94 <HAL_RCC_OscConfig+0x210>
 8000c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c6c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c70:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000c74:	fa93 f3a3 	rbit	r3, r3
 8000c78:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000c84:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000c88:	fa93 f3a3 	rbit	r3, r3
 8000c8c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c90:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c98:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000c9c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ca0:	fa92 f2a2 	rbit	r2, r2
 8000ca4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000ca8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b252      	sxtb	r2, r2
 8000cb2:	f042 0220 	orr.w	r2, r2, #32
 8000cb6:	b252      	sxtb	r2, r2
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	f002 021f 	and.w	r2, r2, #31
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0aa      	beq.n	8000c20 <HAL_RCC_OscConfig+0x19c>
 8000cca:	e05e      	b.n	8000d8a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fb32 	bl	8000334 <HAL_GetTick>
 8000cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd4:	e00a      	b.n	8000cec <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd6:	f7ff fb2d 	bl	8000334 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b64      	cmp	r3, #100	; 0x64
 8000ce4:	d902      	bls.n	8000cec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f000 bdb3 	b.w	8001852 <HAL_RCC_OscConfig+0xdce>
 8000cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000cf8:	fa93 f3a3 	rbit	r3, r3
 8000cfc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000d00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d04:	fab3 f383 	clz	r3, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d102      	bne.n	8000d1e <HAL_RCC_OscConfig+0x29a>
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	e015      	b.n	8000d4a <HAL_RCC_OscConfig+0x2c6>
 8000d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000d2a:	fa93 f3a3 	rbit	r3, r3
 8000d2e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000d3e:	fa93 f3a3 	rbit	r3, r3
 8000d42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_RCC_OscConfig+0x300>)
 8000d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d4e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000d52:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000d56:	fa92 f2a2 	rbit	r2, r2
 8000d5a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000d5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	b252      	sxtb	r2, r2
 8000d68:	f042 0220 	orr.w	r2, r2, #32
 8000d6c:	b252      	sxtb	r2, r2
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	f002 021f 	and.w	r2, r2, #31
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1aa      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x252>
 8000d80:	e003      	b.n	8000d8a <HAL_RCC_OscConfig+0x306>
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 8170 	beq.w	800107a <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d9a:	4bd0      	ldr	r3, [pc, #832]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000da6:	4bcd      	ldr	r3, [pc, #820]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d16d      	bne.n	8000e8e <HAL_RCC_OscConfig+0x40a>
 8000db2:	4bca      	ldr	r3, [pc, #808]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d167      	bne.n	8000e8e <HAL_RCC_OscConfig+0x40a>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000dc8:	fa93 f3a3 	rbit	r3, r3
 8000dcc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000dd0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd4:	fab3 f383 	clz	r3, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d102      	bne.n	8000dee <HAL_RCC_OscConfig+0x36a>
 8000de8:	4bbc      	ldr	r3, [pc, #752]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	e013      	b.n	8000e16 <HAL_RCC_OscConfig+0x392>
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000e00:	2302      	movs	r3, #2
 8000e02:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e06:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e12:	4bb2      	ldr	r3, [pc, #712]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	2202      	movs	r2, #2
 8000e18:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000e1c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000e20:	fa92 f2a2 	rbit	r2, r2
 8000e24:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000e28:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e2c:	fab2 f282 	clz	r2, r2
 8000e30:	b252      	sxtb	r2, r2
 8000e32:	f042 0220 	orr.w	r2, r2, #32
 8000e36:	b252      	sxtb	r2, r2
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	f002 021f 	and.w	r2, r2, #31
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fa01 f202 	lsl.w	r2, r1, r2
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <HAL_RCC_OscConfig+0x3d6>
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d002      	beq.n	8000e5a <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	f000 bcfc 	b.w	8001852 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5a:	4ba0      	ldr	r3, [pc, #640]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6959      	ldr	r1, [r3, #20]
 8000e68:	23f8      	movs	r3, #248	; 0xf8
 8000e6a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000e7a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000e7e:	fab3 f383 	clz	r3, r3
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	4995      	ldr	r1, [pc, #596]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8c:	e0f5      	b.n	800107a <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 8085 	beq.w	8000fa4 <HAL_RCC_OscConfig+0x520>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000eac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb0:	fab3 f383 	clz	r3, r3
 8000eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fa36 	bl	8000334 <HAL_GetTick>
 8000ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ece:	f7ff fa31 	bl	8000334 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d902      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	f000 bcb7 	b.w	8001852 <HAL_RCC_OscConfig+0xdce>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000eee:	fa93 f3a3 	rbit	r3, r3
 8000ef2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000ef6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efa:	fab3 f383 	clz	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	095b      	lsrs	r3, r3, #5
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d102      	bne.n	8000f14 <HAL_RCC_OscConfig+0x490>
 8000f0e:	4b73      	ldr	r3, [pc, #460]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	e013      	b.n	8000f3c <HAL_RCC_OscConfig+0x4b8>
 8000f14:	2302      	movs	r3, #2
 8000f16:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f1e:	fa93 f3a3 	rbit	r3, r3
 8000f22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f2c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f38:	4b68      	ldr	r3, [pc, #416]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000f42:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000f46:	fa92 f2a2 	rbit	r2, r2
 8000f4a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000f4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f52:	fab2 f282 	clz	r2, r2
 8000f56:	b252      	sxtb	r2, r2
 8000f58:	f042 0220 	orr.w	r2, r2, #32
 8000f5c:	b252      	sxtb	r2, r2
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	f002 021f 	and.w	r2, r2, #31
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0ae      	beq.n	8000ece <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f70:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6959      	ldr	r1, [r3, #20]
 8000f7e:	23f8      	movs	r3, #248	; 0xf8
 8000f80:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000f90:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000f94:	fab3 f383 	clz	r3, r3
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	494f      	ldr	r1, [pc, #316]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
 8000fa2:	e06a      	b.n	800107a <HAL_RCC_OscConfig+0x5f6>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000fb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fba:	fab3 f383 	clz	r3, r3
 8000fbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	2300      	movs	r3, #0
 8000fcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff f9b1 	bl	8000334 <HAL_GetTick>
 8000fd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd6:	e00a      	b.n	8000fee <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd8:	f7ff f9ac 	bl	8000334 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d902      	bls.n	8000fee <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	f000 bc32 	b.w	8001852 <HAL_RCC_OscConfig+0xdce>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001000:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d102      	bne.n	800101e <HAL_RCC_OscConfig+0x59a>
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	e013      	b.n	8001046 <HAL_RCC_OscConfig+0x5c2>
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001028:	fa93 f3a3 	rbit	r3, r3
 800102c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001036:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_RCC_OscConfig+0x658>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	2202      	movs	r2, #2
 8001048:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800104c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001050:	fa92 f2a2 	rbit	r2, r2
 8001054:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001058:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800105c:	fab2 f282 	clz	r2, r2
 8001060:	b252      	sxtb	r2, r2
 8001062:	f042 0220 	orr.w	r2, r2, #32
 8001066:	b252      	sxtb	r2, r2
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	f002 021f 	and.w	r2, r2, #31
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ae      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80d8 	beq.w	800123a <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d067      	beq.n	8001164 <HAL_RCC_OscConfig+0x6e0>
 8001094:	2301      	movs	r3, #1
 8001096:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800109e:	fa93 f3a3 	rbit	r3, r3
 80010a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80010a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_RCC_OscConfig+0x65c>)
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	461a      	mov	r2, r3
 80010b8:	2301      	movs	r3, #1
 80010ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010bc:	f7ff f93a 	bl	8000334 <HAL_GetTick>
 80010c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c4:	e00e      	b.n	80010e4 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c6:	f7ff f935 	bl	8000334 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d906      	bls.n	80010e4 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e3bb      	b.n	8001852 <HAL_RCC_OscConfig+0xdce>
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	10908120 	.word	0x10908120
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80010fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001100:	fa93 f2a3 	rbit	r2, r3
 8001104:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800110e:	2202      	movs	r2, #2
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	fa93 f2a3 	rbit	r2, r3
 800111c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001120:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	4ba5      	ldr	r3, [pc, #660]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 8001124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001126:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800112a:	2102      	movs	r1, #2
 800112c:	6019      	str	r1, [r3, #0]
 800112e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	fa93 f1a3 	rbit	r1, r3
 8001138:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800113c:	6019      	str	r1, [r3, #0]
  return(result);
 800113e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	fab3 f383 	clz	r3, r3
 8001148:	b25b      	sxtb	r3, r3
 800114a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800114e:	b25b      	sxtb	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0b1      	beq.n	80010c6 <HAL_RCC_OscConfig+0x642>
 8001162:	e06a      	b.n	800123a <HAL_RCC_OscConfig+0x7b6>
 8001164:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	fa93 f2a3 	rbit	r2, r3
 8001176:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800117a:	601a      	str	r2, [r3, #0]
  return(result);
 800117c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001180:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	461a      	mov	r2, r3
 8001188:	4b8c      	ldr	r3, [pc, #560]	; (80013bc <HAL_RCC_OscConfig+0x938>)
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	461a      	mov	r2, r3
 8001190:	2300      	movs	r3, #0
 8001192:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff f8ce 	bl	8000334 <HAL_GetTick>
 8001198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	e009      	b.n	80011b2 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff f8c9 	bl	8000334 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e34f      	b.n	8001852 <HAL_RCC_OscConfig+0xdce>
 80011b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011b6:	2202      	movs	r2, #2
 80011b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	fa93 f2a3 	rbit	r2, r3
 80011c4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ce:	2202      	movs	r2, #2
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	fa93 f2a3 	rbit	r2, r3
 80011dc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e6:	2202      	movs	r2, #2
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	fa93 f2a3 	rbit	r2, r3
 80011f4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fa:	4b6f      	ldr	r3, [pc, #444]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 80011fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001202:	2102      	movs	r1, #2
 8001204:	6019      	str	r1, [r3, #0]
 8001206:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	fa93 f1a3 	rbit	r1, r3
 8001210:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001214:	6019      	str	r1, [r3, #0]
  return(result);
 8001216:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	fab3 f383 	clz	r3, r3
 8001220:	b25b      	sxtb	r3, r3
 8001222:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001226:	b25b      	sxtb	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1b1      	bne.n	800119e <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8159 	beq.w	80014fc <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001250:	4b59      	ldr	r3, [pc, #356]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d112      	bne.n	8001282 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	4b56      	ldr	r3, [pc, #344]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	4a55      	ldr	r2, [pc, #340]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	61d3      	str	r3, [r2, #28]
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800127c:	2301      	movs	r3, #1
 800127e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <HAL_RCC_OscConfig+0x93c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d11a      	bne.n	80012c4 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128e:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <HAL_RCC_OscConfig+0x93c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a4b      	ldr	r2, [pc, #300]	; (80013c0 <HAL_RCC_OscConfig+0x93c>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129a:	f7ff f84b 	bl	8000334 <HAL_GetTick>
 800129e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	e009      	b.n	80012b8 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a4:	f7ff f846 	bl	8000334 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e2cc      	b.n	8001852 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <HAL_RCC_OscConfig+0x93c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0ef      	beq.n	80012a4 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d106      	bne.n	80012dc <HAL_RCC_OscConfig+0x858>
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a39      	ldr	r2, [pc, #228]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6213      	str	r3, [r2, #32]
 80012da:	e02f      	b.n	800133c <HAL_RCC_OscConfig+0x8b8>
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x87c>
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6213      	str	r3, [r2, #32]
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 80012f8:	f023 0304 	bic.w	r3, r3, #4
 80012fc:	6213      	str	r3, [r2, #32]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0x8b8>
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b05      	cmp	r3, #5
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x8a0>
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6213      	str	r3, [r2, #32]
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6213      	str	r3, [r2, #32]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0x8b8>
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6213      	str	r3, [r2, #32]
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 8001336:	f023 0304 	bic.w	r3, r3, #4
 800133a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d06b      	beq.n	800141e <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7fe fff5 	bl	8000334 <HAL_GetTick>
 800134a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001350:	f7fe fff0 	bl	8000334 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001360:	4293      	cmp	r3, r2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e274      	b.n	8001852 <HAL_RCC_OscConfig+0xdce>
 8001368:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800136c:	2202      	movs	r2, #2
 800136e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	fa93 f2a3 	rbit	r2, r3
 800137a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001384:	2202      	movs	r2, #2
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fa93 f2a3 	rbit	r2, r3
 8001392:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001396:	601a      	str	r2, [r3, #0]
  return(result);
 8001398:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800139c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	095b      	lsrs	r3, r3, #5
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d108      	bne.n	80013c4 <HAL_RCC_OscConfig+0x940>
 80013b2:	4b01      	ldr	r3, [pc, #4]	; (80013b8 <HAL_RCC_OscConfig+0x934>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	e013      	b.n	80013e0 <HAL_RCC_OscConfig+0x95c>
 80013b8:	40021000 	.word	0x40021000
 80013bc:	10908120 	.word	0x10908120
 80013c0:	40007000 	.word	0x40007000
 80013c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013c8:	2202      	movs	r2, #2
 80013ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fa93 f2a3 	rbit	r2, r3
 80013d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	4bbb      	ldr	r3, [pc, #748]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80013e4:	2102      	movs	r1, #2
 80013e6:	6011      	str	r1, [r2, #0]
 80013e8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	fa92 f1a2 	rbit	r1, r2
 80013f2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013f6:	6011      	str	r1, [r2, #0]
  return(result);
 80013f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	fab2 f282 	clz	r2, r2
 8001402:	b252      	sxtb	r2, r2
 8001404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001408:	b252      	sxtb	r2, r2
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	f002 021f 	and.w	r2, r2, #31
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f202 	lsl.w	r2, r1, r2
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d099      	beq.n	8001350 <HAL_RCC_OscConfig+0x8cc>
 800141c:	e064      	b.n	80014e8 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7fe ff89 	bl	8000334 <HAL_GetTick>
 8001422:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001426:	e00b      	b.n	8001440 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001428:	f7fe ff84 	bl	8000334 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e208      	b.n	8001852 <HAL_RCC_OscConfig+0xdce>
 8001440:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001444:	2202      	movs	r2, #2
 8001446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	fa93 f2a3 	rbit	r2, r3
 8001452:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800145c:	2202      	movs	r2, #2
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	fa93 f2a3 	rbit	r2, r3
 800146a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800146e:	601a      	str	r2, [r3, #0]
  return(result);
 8001470:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001474:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	fab3 f383 	clz	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	095b      	lsrs	r3, r3, #5
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d102      	bne.n	8001490 <HAL_RCC_OscConfig+0xa0c>
 800148a:	4b90      	ldr	r3, [pc, #576]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	e00d      	b.n	80014ac <HAL_RCC_OscConfig+0xa28>
 8001490:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001494:	2202      	movs	r2, #2
 8001496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fa93 f2a3 	rbit	r2, r3
 80014a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014b0:	2102      	movs	r1, #2
 80014b2:	6011      	str	r1, [r2, #0]
 80014b4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	fa92 f1a2 	rbit	r1, r2
 80014be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014c2:	6011      	str	r1, [r2, #0]
  return(result);
 80014c4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	fab2 f282 	clz	r2, r2
 80014ce:	b252      	sxtb	r2, r2
 80014d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014d4:	b252      	sxtb	r2, r2
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	f002 021f 	and.w	r2, r2, #31
 80014dc:	2101      	movs	r1, #1
 80014de:	fa01 f202 	lsl.w	r2, r1, r2
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d19f      	bne.n	8001428 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d105      	bne.n	80014fc <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f0:	4b76      	ldr	r3, [pc, #472]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	4a75      	ldr	r2, [pc, #468]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 80014f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 81a4 	beq.w	8001850 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001508:	4b70      	ldr	r3, [pc, #448]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b08      	cmp	r3, #8
 8001512:	f000 819b 	beq.w	800184c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b02      	cmp	r3, #2
 800151e:	f040 8113 	bne.w	8001748 <HAL_RCC_OscConfig+0xcc4>
 8001522:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001526:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800152a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fa93 f2a3 	rbit	r2, r3
 8001536:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800153a:	601a      	str	r2, [r3, #0]
  return(result);
 800153c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001540:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	fab3 f383 	clz	r3, r3
 8001546:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800154a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	461a      	mov	r2, r3
 8001552:	2300      	movs	r3, #0
 8001554:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7fe feed 	bl	8000334 <HAL_GetTick>
 800155a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155e:	e009      	b.n	8001574 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001560:	f7fe fee8 	bl	8000334 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e16e      	b.n	8001852 <HAL_RCC_OscConfig+0xdce>
 8001574:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800157c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800158c:	601a      	str	r2, [r3, #0]
  return(result);
 800158e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001592:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d102      	bne.n	80015ae <HAL_RCC_OscConfig+0xb2a>
 80015a8:	4b48      	ldr	r3, [pc, #288]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e01b      	b.n	80015e6 <HAL_RCC_OscConfig+0xb62>
 80015ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fa93 f2a3 	rbit	r2, r3
 80015c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	fa93 f2a3 	rbit	r2, r3
 80015dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80015ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015ee:	6011      	str	r1, [r2, #0]
 80015f0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	fa92 f1a2 	rbit	r1, r2
 80015fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015fe:	6011      	str	r1, [r2, #0]
  return(result);
 8001600:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	fab2 f282 	clz	r2, r2
 800160a:	b252      	sxtb	r2, r2
 800160c:	f042 0220 	orr.w	r2, r2, #32
 8001610:	b252      	sxtb	r2, r2
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f002 021f 	and.w	r2, r2, #31
 8001618:	2101      	movs	r1, #1
 800161a:	fa01 f202 	lsl.w	r2, r1, r2
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d19d      	bne.n	8001560 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	430b      	orrs	r3, r1
 800163a:	4924      	ldr	r1, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
 8001640:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fa93 f2a3 	rbit	r2, r3
 8001654:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001658:	601a      	str	r2, [r3, #0]
  return(result);
 800165a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800165e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001660:	fab3 f383 	clz	r3, r3
 8001664:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001668:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	461a      	mov	r2, r3
 8001670:	2301      	movs	r3, #1
 8001672:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7fe fe5e 	bl	8000334 <HAL_GetTick>
 8001678:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167c:	e009      	b.n	8001692 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7fe fe59 	bl	8000334 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e0df      	b.n	8001852 <HAL_RCC_OscConfig+0xdce>
 8001692:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800169a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016aa:	601a      	str	r2, [r3, #0]
  return(result);
 80016ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d104      	bne.n	80016d0 <HAL_RCC_OscConfig+0xc4c>
 80016c6:	4b01      	ldr	r3, [pc, #4]	; (80016cc <HAL_RCC_OscConfig+0xc48>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0xc84>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fa93 f2a3 	rbit	r2, r3
 80016e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <HAL_RCC_OscConfig+0xdd8>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800170c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001710:	6011      	str	r1, [r2, #0]
 8001712:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	fa92 f1a2 	rbit	r1, r2
 800171c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001720:	6011      	str	r1, [r2, #0]
  return(result);
 8001722:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	fab2 f282 	clz	r2, r2
 800172c:	b252      	sxtb	r2, r2
 800172e:	f042 0220 	orr.w	r2, r2, #32
 8001732:	b252      	sxtb	r2, r2
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	f002 021f 	and.w	r2, r2, #31
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d09b      	beq.n	800167e <HAL_RCC_OscConfig+0xbfa>
 8001746:	e083      	b.n	8001850 <HAL_RCC_OscConfig+0xdcc>
 8001748:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800174c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001760:	601a      	str	r2, [r3, #0]
  return(result);
 8001762:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001766:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001770:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	461a      	mov	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7fe fdda 	bl	8000334 <HAL_GetTick>
 8001780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001784:	e009      	b.n	800179a <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001786:	f7fe fdd5 	bl	8000334 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e05b      	b.n	8001852 <HAL_RCC_OscConfig+0xdce>
 800179a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	fa93 f2a3 	rbit	r2, r3
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	601a      	str	r2, [r3, #0]
  return(result);
 80017b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d102      	bne.n	80017d4 <HAL_RCC_OscConfig+0xd50>
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_RCC_OscConfig+0xdd8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	e01b      	b.n	800180c <HAL_RCC_OscConfig+0xd88>
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fa93 f2a3 	rbit	r2, r3
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_RCC_OscConfig+0xdd8>)
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	f107 0214 	add.w	r2, r7, #20
 8001810:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001814:	6011      	str	r1, [r2, #0]
 8001816:	f107 0214 	add.w	r2, r7, #20
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	fa92 f1a2 	rbit	r1, r2
 8001820:	f107 0210 	add.w	r2, r7, #16
 8001824:	6011      	str	r1, [r2, #0]
  return(result);
 8001826:	f107 0210 	add.w	r2, r7, #16
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	fab2 f282 	clz	r2, r2
 8001830:	b252      	sxtb	r2, r2
 8001832:	f042 0220 	orr.w	r2, r2, #32
 8001836:	b252      	sxtb	r2, r2
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f002 021f 	and.w	r2, r2, #31
 800183e:	2101      	movs	r1, #1
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d19d      	bne.n	8001786 <HAL_RCC_OscConfig+0xd02>
 800184a:	e001      	b.n	8001850 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b09e      	sub	sp, #120	; 0x78
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e164      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	498d      	ldr	r1, [pc, #564]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e14c      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b84      	ldr	r3, [pc, #528]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4981      	ldr	r1, [pc, #516]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80df 	beq.w	8001a92 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d13d      	bne.n	8001958 <HAL_RCC_ClockConfig+0xf8>
 80018dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80018ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_ClockConfig+0xa6>
 8001900:	4b71      	ldr	r3, [pc, #452]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e00f      	b.n	8001926 <HAL_RCC_ClockConfig+0xc6>
 8001906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	667b      	str	r3, [r7, #100]	; 0x64
 8001914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001918:	663b      	str	r3, [r7, #96]	; 0x60
 800191a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001922:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800192a:	65ba      	str	r2, [r7, #88]	; 0x58
 800192c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800192e:	fa92 f2a2 	rbit	r2, r2
 8001932:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001936:	fab2 f282 	clz	r2, r2
 800193a:	b252      	sxtb	r2, r2
 800193c:	f042 0220 	orr.w	r2, r2, #32
 8001940:	b252      	sxtb	r2, r2
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f002 021f 	and.w	r2, r2, #31
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f202 	lsl.w	r2, r1, r2
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d17d      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0f4      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d13d      	bne.n	80019dc <HAL_RCC_ClockConfig+0x17c>
 8001960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001964:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800196e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <HAL_RCC_ClockConfig+0x12a>
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e00f      	b.n	80019aa <HAL_RCC_ClockConfig+0x14a>
 800198a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
 8001998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
 800199e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a6:	4b48      	ldr	r3, [pc, #288]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80019b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019b2:	fa92 f2a2 	rbit	r2, r2
 80019b6:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80019b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ba:	fab2 f282 	clz	r2, r2
 80019be:	b252      	sxtb	r2, r2
 80019c0:	f042 0220 	orr.w	r2, r2, #32
 80019c4:	b252      	sxtb	r2, r2
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d13b      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b2      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2e2>
 80019dc:	2302      	movs	r3, #2
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80019e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	095b      	lsrs	r3, r3, #5
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x1a4>
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	e00d      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1c0>
 8001a04:	2302      	movs	r3, #2
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2202      	movs	r2, #2
 8001a22:	61ba      	str	r2, [r7, #24]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	fa92 f2a2 	rbit	r2, r2
 8001a2a:	617a      	str	r2, [r7, #20]
  return(result);
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	fab2 f282 	clz	r2, r2
 8001a32:	b252      	sxtb	r2, r2
 8001a34:	f042 0220 	orr.w	r2, r2, #32
 8001a38:	b252      	sxtb	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f002 021f 	and.w	r2, r2, #31
 8001a40:	2101      	movs	r1, #1
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e078      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f023 0203 	bic.w	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	491a      	ldr	r1, [pc, #104]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a62:	f7fe fc67 	bl	8000334 <HAL_GetTick>
 8001a66:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6a:	f7fe fc63 	bl	8000334 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e060      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 020c 	and.w	r2, r3, #12
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d1eb      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d215      	bcs.n	8001acc <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 0207 	bic.w	r2, r3, #7
 8001aa8:	4906      	ldr	r1, [pc, #24]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d006      	beq.n	8001acc <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e03f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2e2>
 8001ac2:	bf00      	nop
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <HAL_RCC_ClockConfig+0x2ec>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4919      	ldr	r1, [pc, #100]	; (8001b4c <HAL_RCC_ClockConfig+0x2ec>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_RCC_ClockConfig+0x2ec>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4911      	ldr	r1, [pc, #68]	; (8001b4c <HAL_RCC_ClockConfig+0x2ec>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b0a:	f000 f825 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b0e:	4601      	mov	r1, r0
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_RCC_ClockConfig+0x2ec>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b18:	23f0      	movs	r3, #240	; 0xf0
 8001b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_RCC_ClockConfig+0x2f0>)
 8001b30:	5cd3      	ldrb	r3, [r2, r3]
 8001b32:	fa21 f303 	lsr.w	r3, r1, r3
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_RCC_ClockConfig+0x2f4>)
 8001b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7fe fbb6 	bl	80002ac <HAL_InitTick>
  
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3778      	adds	r7, #120	; 0x78
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08004fc4 	.word	0x08004fc4
 8001b54:	20000008 	.word	0x20000008

08001b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b08b      	sub	sp, #44	; 0x2c
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x30>
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x36>
 8001b86:	e03c      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b8a:	623b      	str	r3, [r7, #32]
      break;
 8001b8c:	e03c      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b94:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001b98:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	607b      	str	r3, [r7, #4]
  return(result);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f003 020f 	and.w	r2, r3, #15
 8001bba:	230f      	movs	r3, #15
 8001bbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001be0:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	e004      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	623b      	str	r3, [r7, #32]
      break;
 8001c00:	e002      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c04:	623b      	str	r3, [r7, #32]
      break;
 8001c06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c08:	6a3b      	ldr	r3, [r7, #32]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	372c      	adds	r7, #44	; 0x2c
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	007a1200 	.word	0x007a1200
 8001c20:	08004fa4 	.word	0x08004fa4
 8001c24:	08004fb4 	.word	0x08004fb4
 8001c28:	003d0900 	.word	0x003d0900

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001c4a:	f7ff ffef 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4e:	4601      	mov	r1, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c58:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c5c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	603b      	str	r3, [r7, #0]
  return(result);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08004fd4 	.word	0x08004fd4

08001c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001c8e:	f7ff ffcd 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c92:	4601      	mov	r1, r0
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001c9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ca0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	603b      	str	r3, [r7, #0]
  return(result);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08004fd4 	.word	0x08004fd4

08001ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b092      	sub	sp, #72	; 0x48
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80cf 	beq.w	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf0:	4b86      	ldr	r3, [pc, #536]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10e      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	4b83      	ldr	r3, [pc, #524]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	4a82      	ldr	r2, [pc, #520]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d06:	61d3      	str	r3, [r2, #28]
 8001d08:	4b80      	ldr	r3, [pc, #512]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	4b7d      	ldr	r3, [pc, #500]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d26:	4b7a      	ldr	r3, [pc, #488]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a79      	ldr	r2, [pc, #484]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d32:	f7fe faff 	bl	8000334 <HAL_GetTick>
 8001d36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	e008      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7fe fafb 	bl	8000334 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d901      	bls.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e0da      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d58:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d07c      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d075      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d76:	4b65      	ldr	r3, [pc, #404]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2301      	movs	r3, #1
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dc4:	4a51      	ldr	r2, [pc, #324]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d046      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe faae 	bl	8000334 <HAL_GetTick>
 8001dd8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7fe faaa 	bl	8000334 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e087      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001df2:	2302      	movs	r3, #2
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	2302      	movs	r3, #2
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e0a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d102      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8001e20:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	e007      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001e26:	2302      	movs	r3, #2
 8001e28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	2202      	movs	r2, #2
 8001e38:	613a      	str	r2, [r7, #16]
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	60fa      	str	r2, [r7, #12]
  return(result);
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b252      	sxtb	r2, r2
 8001e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e4e:	b252      	sxtb	r2, r2
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0bc      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4927      	ldr	r1, [pc, #156]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f023 0203 	bic.w	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	491a      	ldr	r1, [pc, #104]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f023 0210 	bic.w	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	4913      	ldr	r1, [pc, #76]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	490b      	ldr	r1, [pc, #44]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	4904      	ldr	r1, [pc, #16]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3748      	adds	r7, #72	; 0x48
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40007000 	.word	0x40007000
 8001f14:	10908100 	.word	0x10908100

08001f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e07c      	b.n	8002024 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d106      	bne.n	8001f4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f001 fc21 	bl	800378c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f60:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f6a:	d902      	bls.n	8001f72 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e002      	b.n	8001f78 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001f80:	d007      	beq.n	8001f92 <HAL_SPI_Init+0x7a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f8a:	d002      	beq.n	8001f92 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10b      	bne.n	8001fb2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fa2:	d903      	bls.n	8001fac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8001faa:	e002      	b.n	8001fb2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	ea42 0103 	orr.w	r1, r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	f003 0204 	and.w	r2, r3, #4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	ea42 0103 	orr.w	r1, r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_SPI_Transmit+0x26>
 800204e:	2302      	movs	r3, #2
 8002050:	e13e      	b.n	80022d0 <HAL_SPI_Transmit+0x2a4>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800205a:	f7fe f96b 	bl	8000334 <HAL_GetTick>
 800205e:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d002      	beq.n	8002072 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800206c:	2302      	movs	r3, #2
 800206e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002070:	e125      	b.n	80022be <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_SPI_Transmit+0x52>
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002082:	e11c      	b.n	80022be <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2203      	movs	r2, #3
 8002088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ce:	d107      	bne.n	80020e0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d007      	beq.n	80020fe <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002106:	d947      	bls.n	8002198 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <HAL_SPI_Transmit+0xee>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d138      	bne.n	800218c <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	3302      	adds	r3, #2
 8002128:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002138:	e028      	b.n	800218c <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b02      	cmp	r3, #2
 8002146:	d10f      	bne.n	8002168 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	881a      	ldrh	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3302      	adds	r3, #2
 8002156:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002166:	e011      	b.n	800218c <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_SPI_Transmit+0x15a>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d00a      	beq.n	800218c <HAL_SPI_Transmit+0x160>
 8002176:	f7fe f8dd 	bl	8000334 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d802      	bhi.n	800218c <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	77fb      	strb	r3, [r7, #31]
          goto error;
 800218a:	e098      	b.n	80022be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1d1      	bne.n	800213a <HAL_SPI_Transmit+0x10e>
 8002196:	e070      	b.n	800227a <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <HAL_SPI_Transmit+0x17e>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d162      	bne.n	8002270 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d90f      	bls.n	80021d4 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	881a      	ldrh	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3302      	adds	r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b02      	subs	r3, #2
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021d2:	e04d      	b.n	8002270 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	60ba      	str	r2, [r7, #8]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	320c      	adds	r2, #12
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80021f2:	e03d      	b.n	8002270 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d124      	bne.n	800224c <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d90f      	bls.n	800222c <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	881a      	ldrh	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3302      	adds	r3, #2
 800221a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b02      	subs	r3, #2
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	87da      	strh	r2, [r3, #62]	; 0x3e
 800222a:	e021      	b.n	8002270 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	60ba      	str	r2, [r7, #8]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	320c      	adds	r2, #12
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	87da      	strh	r2, [r3, #62]	; 0x3e
 800224a:	e011      	b.n	8002270 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_SPI_Transmit+0x23e>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d00a      	beq.n	8002270 <HAL_SPI_Transmit+0x244>
 800225a:	f7fe f86b 	bl	8000334 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d802      	bhi.n	8002270 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800226e:	e026      	b.n	80022be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1bc      	bne.n	80021f4 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fb02 	bl	8002888 <SPI_EndRxTxTransaction>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	77fb      	strb	r3, [r7, #31]
 80022ba:	e000      	b.n	80022be <HAL_SPI_Transmit+0x292>
  }

error:
 80022bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80022ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80022f2:	2301      	movs	r3, #1
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_SPI_TransmitReceive+0x32>
 8002306:	2302      	movs	r3, #2
 8002308:	e1e2      	b.n	80026d0 <HAL_SPI_TransmitReceive+0x3f8>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002312:	f7fe f80f 	bl	8000334 <HAL_GetTick>
 8002316:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800231e:	b2db      	uxtb	r3, r3
 8002320:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d00e      	beq.n	800234c <HAL_SPI_TransmitReceive+0x74>
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002334:	d106      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x6c>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d003      	beq.n	800234c <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002344:	2302      	movs	r3, #2
 8002346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800234a:	e1b7      	b.n	80026bc <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_SPI_TransmitReceive+0x86>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_SPI_TransmitReceive+0x86>
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002364:	e1aa      	b.n	80026bc <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b04      	cmp	r3, #4
 8002370:	d003      	beq.n	800237a <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2205      	movs	r2, #5
 8002376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	887a      	ldrh	r2, [r7, #2]
 800238a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023bc:	d805      	bhi.n	80023ca <HAL_SPI_TransmitReceive+0xf2>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d908      	bls.n	80023dc <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	e007      	b.n	80023ec <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023ea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f6:	2b40      	cmp	r3, #64	; 0x40
 80023f8:	d007      	beq.n	800240a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002412:	d975      	bls.n	8002500 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <HAL_SPI_TransmitReceive+0x14e>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d160      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3302      	adds	r3, #2
 8002434:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002444:	e050      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01c      	beq.n	8002486 <HAL_SPI_TransmitReceive+0x1ae>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d017      	beq.n	8002486 <HAL_SPI_TransmitReceive+0x1ae>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d110      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	881a      	ldrh	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3302      	adds	r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01a      	beq.n	80024c8 <HAL_SPI_TransmitReceive+0x1f0>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d113      	bne.n	80024c8 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3302      	adds	r3, #2
 80024b0:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024c4:	2301      	movs	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d00b      	beq.n	80024e8 <HAL_SPI_TransmitReceive+0x210>
 80024d0:	f7fd ff30 	bl	8000334 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024dc:	429a      	cmp	r2, r3
 80024de:	d803      	bhi.n	80024e8 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80024e6:	e0e9      	b.n	80026bc <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1a9      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x16e>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1a3      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x16e>
 80024fe:	e0c9      	b.n	8002694 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x23c>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 80b3 	bne.w	800267a <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d90f      	bls.n	800253e <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3302      	adds	r3, #2
 800252c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b02      	subs	r3, #2
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800253c:	e09d      	b.n	800267a <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	60ba      	str	r2, [r7, #8]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	320c      	adds	r2, #12
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800255c:	e08d      	b.n	800267a <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	2b00      	cmp	r3, #0
 8002562:	d031      	beq.n	80025c8 <HAL_SPI_TransmitReceive+0x2f0>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d02c      	beq.n	80025c8 <HAL_SPI_TransmitReceive+0x2f0>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b02      	cmp	r3, #2
 800257a:	d125      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d90f      	bls.n	80025a6 <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	881a      	ldrh	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3302      	adds	r3, #2
 8002594:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b02      	subs	r3, #2
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025a4:	e00e      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	60ba      	str	r2, [r7, #8]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	320c      	adds	r2, #12
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d042      	beq.n	800265a <HAL_SPI_TransmitReceive+0x382>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d13b      	bne.n	800265a <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d920      	bls.n	8002630 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3302      	adds	r3, #2
 80025fe:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b02      	subs	r3, #2
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d81b      	bhi.n	8002656 <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	e012      	b.n	8002656 <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f103 020c 	add.w	r2, r3, #12
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	6079      	str	r1, [r7, #4]
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002656:	2301      	movs	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d00b      	beq.n	800267a <HAL_SPI_TransmitReceive+0x3a2>
 8002662:	f7fd fe67 	bl	8000334 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800266e:	429a      	cmp	r2, r3
 8002670:	d803      	bhi.n	800267a <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002678:	e020      	b.n	80026bc <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f af6c 	bne.w	800255e <HAL_SPI_TransmitReceive+0x286>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	f47f af65 	bne.w	800255e <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f8f5 	bl	8002888 <SPI_EndRxTxTransaction>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026b8:	e000      	b.n	80026bc <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 80026ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80026cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026e6:	e04c      	b.n	8002782 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ee:	d048      	beq.n	8002782 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80026f6:	f7fd fe1d 	bl	8000334 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d83d      	bhi.n	8002782 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800271e:	d111      	bne.n	8002744 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002728:	d004      	beq.n	8002734 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002732:	d107      	bne.n	8002744 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274c:	d10f      	bne.n	800276e <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800276c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e00e      	b.n	80027a0 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4013      	ands	r3, r2
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	d101      	bne.n	8002796 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002792:	2201      	movs	r2, #1
 8002794:	e000      	b.n	8002798 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002796:	2200      	movs	r2, #0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d1a4      	bne.n	80026e8 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80027b6:	e05a      	b.n	800286e <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027be:	d109      	bne.n	80027d4 <SPI_WaitFifoStateUntilTimeout+0x2c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d048      	beq.n	800286e <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
 80027e2:	f7fd fda7 	bl	8000334 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d83d      	bhi.n	800286e <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800280a:	d111      	bne.n	8002830 <SPI_WaitFifoStateUntilTimeout+0x88>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002814:	d004      	beq.n	8002820 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281e:	d107      	bne.n	8002830 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800282e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002838:	d10f      	bne.n	800285a <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e008      	b.n	8002880 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	d19c      	bne.n	80027b8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2200      	movs	r2, #0
 800289c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff ff81 	bl	80027a8 <SPI_WaitFifoStateUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e027      	b.n	800290c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff ff06 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d6:	f043 0220 	orr.w	r2, r3, #32
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e014      	b.n	800290c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff ff5a 	bl	80027a8 <SPI_WaitFifoStateUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e000      	b.n	800290c <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e043      	b.n	80029ae <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 ff68 	bl	8003810 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f8b9 	bl	8002ad0 <UART_SetConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e022      	b.n	80029ae <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fa13 	bl	8002d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002984:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002994:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa9a 	bl	8002ee0 <UART_CheckIdleState>
 80029ac:	4603      	mov	r3, r0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b088      	sub	sp, #32
 80029ba:	af02      	add	r7, sp, #8
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d177      	bne.n	8002ac6 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_UART_Transmit+0x2c>
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e070      	b.n	8002ac8 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_UART_Transmit+0x3e>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e069      	b.n	8002ac8 <HAL_UART_Transmit+0x112>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2221      	movs	r2, #33	; 0x21
 8002a06:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a0a:	f7fd fc93 	bl	8000334 <HAL_GetTick>
 8002a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	88fa      	ldrh	r2, [r7, #6]
 8002a14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002a20:	e034      	b.n	8002a8c <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2180      	movs	r1, #128	; 0x80
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fa97 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e03c      	b.n	8002ac8 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a56:	d111      	bne.n	8002a7c <HAL_UART_Transmit+0xc6>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	881a      	ldrh	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a70:	b292      	uxth	r2, r2
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3302      	adds	r3, #2
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	e007      	b.n	8002a8c <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	60ba      	str	r2, [r7, #8]
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1c4      	bne.n	8002a22 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2140      	movs	r1, #64	; 0x40
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa65 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e00a      	b.n	8002ac8 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002adc:	2310      	movs	r3, #16
 8002ade:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b9f      	ldr	r3, [pc, #636]	; (8002d88 <UART_SetConfig+0x2b8>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	68f9      	ldr	r1, [r7, #12]
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a8e      	ldr	r2, [pc, #568]	; (8002d8c <UART_SetConfig+0x2bc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d121      	bne.n	8002b9c <UART_SetConfig+0xcc>
 8002b58:	4b8d      	ldr	r3, [pc, #564]	; (8002d90 <UART_SetConfig+0x2c0>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d817      	bhi.n	8002b94 <UART_SetConfig+0xc4>
 8002b64:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <UART_SetConfig+0x9c>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b89 	.word	0x08002b89
 8002b74:	08002b8f 	.word	0x08002b8f
 8002b78:	08002b83 	.word	0x08002b83
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]
 8002b80:	e01e      	b.n	8002bc0 <UART_SetConfig+0xf0>
 8002b82:	2302      	movs	r3, #2
 8002b84:	75fb      	strb	r3, [r7, #23]
 8002b86:	e01b      	b.n	8002bc0 <UART_SetConfig+0xf0>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	75fb      	strb	r3, [r7, #23]
 8002b8c:	e018      	b.n	8002bc0 <UART_SetConfig+0xf0>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	75fb      	strb	r3, [r7, #23]
 8002b92:	e015      	b.n	8002bc0 <UART_SetConfig+0xf0>
 8002b94:	2310      	movs	r3, #16
 8002b96:	75fb      	strb	r3, [r7, #23]
 8002b98:	bf00      	nop
 8002b9a:	e011      	b.n	8002bc0 <UART_SetConfig+0xf0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7c      	ldr	r2, [pc, #496]	; (8002d94 <UART_SetConfig+0x2c4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d102      	bne.n	8002bac <UART_SetConfig+0xdc>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]
 8002baa:	e009      	b.n	8002bc0 <UART_SetConfig+0xf0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a79      	ldr	r2, [pc, #484]	; (8002d98 <UART_SetConfig+0x2c8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d102      	bne.n	8002bbc <UART_SetConfig+0xec>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
 8002bba:	e001      	b.n	8002bc0 <UART_SetConfig+0xf0>
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc8:	d16f      	bne.n	8002caa <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d857      	bhi.n	8002c80 <UART_SetConfig+0x1b0>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <UART_SetConfig+0x108>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002bfd 	.word	0x08002bfd
 8002bdc:	08002c19 	.word	0x08002c19
 8002be0:	08002c35 	.word	0x08002c35
 8002be4:	08002c81 	.word	0x08002c81
 8002be8:	08002c4f 	.word	0x08002c4f
 8002bec:	08002c81 	.word	0x08002c81
 8002bf0:	08002c81 	.word	0x08002c81
 8002bf4:	08002c81 	.word	0x08002c81
 8002bf8:	08002c6b 	.word	0x08002c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bfc:	f7ff f822 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8002c00:	4603      	mov	r3, r0
 8002c02:	005a      	lsls	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	441a      	add	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	82bb      	strh	r3, [r7, #20]
        break;
 8002c16:	e036      	b.n	8002c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c18:	f7ff f836 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	005a      	lsls	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	441a      	add	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	82bb      	strh	r3, [r7, #20]
        break;
 8002c32:	e028      	b.n	8002c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002c3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6852      	ldr	r2, [r2, #4]
 8002c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c4a:	82bb      	strh	r3, [r7, #20]
        break;
 8002c4c:	e01b      	b.n	8002c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c4e:	f7fe ff83 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002c52:	4603      	mov	r3, r0
 8002c54:	005a      	lsls	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	441a      	add	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	82bb      	strh	r3, [r7, #20]
        break;
 8002c68:	e00d      	b.n	8002c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	82bb      	strh	r3, [r7, #20]
        break;
 8002c7e:	e002      	b.n	8002c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	74fb      	strb	r3, [r7, #19]
        break;
 8002c84:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002c86:	8abb      	ldrh	r3, [r7, #20]
 8002c88:	f023 030f 	bic.w	r3, r3, #15
 8002c8c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c8e:	8abb      	ldrh	r3, [r7, #20]
 8002c90:	105b      	asrs	r3, r3, #1
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	897b      	ldrh	r3, [r7, #10]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	897a      	ldrh	r2, [r7, #10]
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	e069      	b.n	8002d7e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d863      	bhi.n	8002d78 <UART_SetConfig+0x2a8>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <UART_SetConfig+0x1e8>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	08002cfd 	.word	0x08002cfd
 8002cc0:	08002d1d 	.word	0x08002d1d
 8002cc4:	08002d79 	.word	0x08002d79
 8002cc8:	08002d3d 	.word	0x08002d3d
 8002ccc:	08002d79 	.word	0x08002d79
 8002cd0:	08002d79 	.word	0x08002d79
 8002cd4:	08002d79 	.word	0x08002d79
 8002cd8:	08002d5d 	.word	0x08002d5d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002cdc:	f7fe ffb2 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60da      	str	r2, [r3, #12]
        break;
 8002cfa:	e040      	b.n	8002d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002cfc:	f7fe ffc4 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60da      	str	r2, [r3, #12]
        break;
 8002d1a:	e030      	b.n	8002d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002d26:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6852      	ldr	r2, [r2, #4]
 8002d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        break;
 8002d3a:	e020      	b.n	8002d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d3c:	f7fe ff0c 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	085b      	lsrs	r3, r3, #1
 8002d48:	441a      	add	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60da      	str	r2, [r3, #12]
        break;
 8002d5a:	e010      	b.n	8002d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60da      	str	r2, [r3, #12]
        break;
 8002d76:	e002      	b.n	8002d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d7c:	bf00      	nop
    }
  }

  return ret;
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]

}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	efff69f3 	.word	0xefff69f3
 8002d8c:	40013800 	.word	0x40013800
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40004400 	.word	0x40004400
 8002d98:	40004800 	.word	0x40004800

08002d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01a      	beq.n	8002eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9a:	d10a      	bne.n	8002eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ef2:	f7fd fa1f 	bl	8000334 <HAL_GetTick>
 8002ef6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d10e      	bne.n	8002f24 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f82c 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e022      	b.n	8002f6a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d10e      	bne.n	8002f50 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f816 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e00c      	b.n	8002f6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f82:	e02c      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d028      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f92:	f7fd f9cf 	bl	8000334 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d21d      	bcs.n	8002fde <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e00f      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d0c3      	beq.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <UART_Printf>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_Printf(const char* fmt, ...) {
 8003008:	b40f      	push	{r0, r1, r2, r3}
 800300a:	b580      	push	{r7, lr}
 800300c:	b0c2      	sub	sp, #264	; 0x108
 800300e:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8003010:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	f107 0008 	add.w	r0, r7, #8
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003028:	f001 f9de 	bl	80043e8 <vsniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 800302c:	f107 0308 	add.w	r3, r7, #8
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd f8cd 	bl	80001d0 <strlen>
 8003036:	4603      	mov	r3, r0
 8003038:	b29a      	uxth	r2, r3
 800303a:	f107 0108 	add.w	r1, r7, #8
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <UART_Printf+0x50>)
 8003044:	f7ff fcb7 	bl	80029b6 <HAL_UART_Transmit>
    va_end(args);
}
 8003048:	bf00      	nop
 800304a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800304e:	46bd      	mov	sp, r7
 8003050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003054:	b004      	add	sp, #16
 8003056:	4770      	bx	lr
 8003058:	20000150 	.word	0x20000150

0800305c <init>:

void init() {
 800305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003060:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8003064:	af08      	add	r7, sp, #32
    int code;
    UART_Printf("Ready!\r\n");
 8003066:	48c5      	ldr	r0, [pc, #788]	; (800337c <init+0x320>)
 8003068:	f7ff ffce 	bl	8003008 <UART_Printf>

    code = SDCARD_Init();
 800306c:	f000 fda4 	bl	8003bb8 <SDCARD_Init>
 8003070:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 8003074:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003078:	2b00      	cmp	r3, #0
 800307a:	da05      	bge.n	8003088 <init+0x2c>
        UART_Printf("SDCARD_Init() failed: code = %d\r\n", code);
 800307c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8003080:	48bf      	ldr	r0, [pc, #764]	; (8003380 <init+0x324>)
 8003082:	f7ff ffc1 	bl	8003008 <UART_Printf>
        return;
 8003086:	e173      	b.n	8003370 <init+0x314>
    }

    UART_Printf("SDCARD_Init() done!\r\n");
 8003088:	48be      	ldr	r0, [pc, #760]	; (8003384 <init+0x328>)
 800308a:	f7ff ffbd 	bl	8003008 <UART_Printf>

    uint32_t blocksNum;
    code = SDCARD_GetBlocksNumber(&blocksNum);
 800308e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fe7c 	bl	8003d90 <SDCARD_GetBlocksNumber>
 8003098:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 800309c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	da05      	bge.n	80030b0 <init+0x54>
        UART_Printf("SDCARD_GetBlocksNumber() failed: code = %d\r\n", code);
 80030a4:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80030a8:	48b7      	ldr	r0, [pc, #732]	; (8003388 <init+0x32c>)
 80030aa:	f7ff ffad 	bl	8003008 <UART_Printf>
        return;
 80030ae:	e15f      	b.n	8003370 <init+0x314>
    }

    UART_Printf("SDCARD_GetBlocksNumber() done! blocksNum = %u (or %u Mb)\r\n",
 80030b0:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 80030b4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80030b8:	4ab4      	ldr	r2, [pc, #720]	; (800338c <init+0x330>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	09db      	lsrs	r3, r3, #7
 80030c0:	461a      	mov	r2, r3
 80030c2:	48b3      	ldr	r0, [pc, #716]	; (8003390 <init+0x334>)
 80030c4:	f7ff ffa0 	bl	8003008 <UART_Printf>
        blocksNum, blocksNum/2000 /* same as * 512 / 1000 / 1000 */);

    uint32_t startBlockAddr = 0x00ABCD;
 80030c8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80030cc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    uint32_t blockAddr = startBlockAddr;
 80030d0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80030d4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t block[512];

    snprintf((char*)block, sizeof(block), "0x%08X", (int)blockAddr);
 80030d8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80030dc:	f107 0008 	add.w	r0, r7, #8
 80030e0:	4aac      	ldr	r2, [pc, #688]	; (8003394 <init+0x338>)
 80030e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030e6:	f001 f91f 	bl	8004328 <sniprintf>

    code = SDCARD_WriteSingleBlock(blockAddr, block);
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	4619      	mov	r1, r3
 80030f0:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80030f4:	f000 ff22 	bl	8003f3c <SDCARD_WriteSingleBlock>
 80030f8:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 80030fc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003100:	2b00      	cmp	r3, #0
 8003102:	da05      	bge.n	8003110 <init+0xb4>
        UART_Printf("SDCARD_WriteSingleBlock() failed: code = %d\r\n", code);
 8003104:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8003108:	48a3      	ldr	r0, [pc, #652]	; (8003398 <init+0x33c>)
 800310a:	f7ff ff7d 	bl	8003008 <UART_Printf>
        return;
 800310e:	e12f      	b.n	8003370 <init+0x314>
    }
    UART_Printf("SDCARD_WriteSingleBlock(0x%08X, ...) done!\r\n", blockAddr);
 8003110:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8003114:	48a1      	ldr	r0, [pc, #644]	; (800339c <init+0x340>)
 8003116:	f7ff ff77 	bl	8003008 <UART_Printf>

    memset(block, 0, sizeof(block));
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f001 f8f7 	bl	8004318 <memset>

    code = SDCARD_ReadSingleBlock(blockAddr, block);
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	4619      	mov	r1, r3
 8003130:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8003134:	f000 fe9c 	bl	8003e70 <SDCARD_ReadSingleBlock>
 8003138:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 800313c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003140:	2b00      	cmp	r3, #0
 8003142:	da05      	bge.n	8003150 <init+0xf4>
        UART_Printf("SDCARD_ReadSingleBlock() failed: code = %d\r\n", code);
 8003144:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8003148:	4895      	ldr	r0, [pc, #596]	; (80033a0 <init+0x344>)
 800314a:	f7ff ff5d 	bl	8003008 <UART_Printf>
        return;
 800314e:	e10f      	b.n	8003370 <init+0x314>
    }

    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003150:	f107 0308 	add.w	r3, r7, #8
 8003154:	781b      	ldrb	r3, [r3, #0]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8003156:	469c      	mov	ip, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003158:	f107 0308 	add.w	r3, r7, #8
 800315c:	785b      	ldrb	r3, [r3, #1]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800315e:	469e      	mov	lr, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003160:	f107 0308 	add.w	r3, r7, #8
 8003164:	789b      	ldrb	r3, [r3, #2]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8003166:	461a      	mov	r2, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	78db      	ldrb	r3, [r3, #3]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800316e:	4619      	mov	r1, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003170:	f107 0308 	add.w	r3, r7, #8
 8003174:	791b      	ldrb	r3, [r3, #4]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8003176:	4618      	mov	r0, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003178:	f107 0308 	add.w	r3, r7, #8
 800317c:	795b      	ldrb	r3, [r3, #5]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800317e:	461c      	mov	r4, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003180:	f107 0308 	add.w	r3, r7, #8
 8003184:	799b      	ldrb	r3, [r3, #6]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8003186:	461d      	mov	r5, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003188:	f107 0308 	add.w	r3, r7, #8
 800318c:	79db      	ldrb	r3, [r3, #7]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800318e:	461e      	mov	r6, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003190:	f107 0308 	add.w	r3, r7, #8
 8003194:	7a1b      	ldrb	r3, [r3, #8]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8003196:	607b      	str	r3, [r7, #4]
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	7a5b      	ldrb	r3, [r3, #9]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800319e:	9307      	str	r3, [sp, #28]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	9306      	str	r3, [sp, #24]
 80031a4:	9605      	str	r6, [sp, #20]
 80031a6:	9504      	str	r5, [sp, #16]
 80031a8:	9403      	str	r4, [sp, #12]
 80031aa:	9002      	str	r0, [sp, #8]
 80031ac:	9101      	str	r1, [sp, #4]
 80031ae:	9200      	str	r2, [sp, #0]
 80031b0:	4673      	mov	r3, lr
 80031b2:	4662      	mov	r2, ip
 80031b4:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80031b8:	487a      	ldr	r0, [pc, #488]	; (80033a4 <init+0x348>)
 80031ba:	f7ff ff25 	bl	8003008 <UART_Printf>

    blockAddr = startBlockAddr + 1;
 80031be:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80031c2:	3301      	adds	r3, #1
 80031c4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    code = SDCARD_WriteBegin(blockAddr);
 80031c8:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80031cc:	f000 ffce 	bl	800416c <SDCARD_WriteBegin>
 80031d0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 80031d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80031d8:	2b00      	cmp	r3, #0
 80031da:	da05      	bge.n	80031e8 <init+0x18c>
        UART_Printf("SDCARD_WriteBegin() failed: code = %d\r\n", code);
 80031dc:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80031e0:	4871      	ldr	r0, [pc, #452]	; (80033a8 <init+0x34c>)
 80031e2:	f7ff ff11 	bl	8003008 <UART_Printf>
        return;
 80031e6:	e0c3      	b.n	8003370 <init+0x314>
    }
    UART_Printf("SDCARD_WriteBegin(0x%08X, ...) done!\r\n", blockAddr);
 80031e8:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80031ec:	486f      	ldr	r0, [pc, #444]	; (80033ac <init+0x350>)
 80031ee:	f7ff ff0b 	bl	8003008 <UART_Printf>

    for(int i = 0; i < 3; i++) {
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80031f8:	e028      	b.n	800324c <init+0x1f0>
        snprintf((char*)block, sizeof(block), "0x%08X", (int)blockAddr);
 80031fa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80031fe:	f107 0008 	add.w	r0, r7, #8
 8003202:	4a64      	ldr	r2, [pc, #400]	; (8003394 <init+0x338>)
 8003204:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003208:	f001 f88e 	bl	8004328 <sniprintf>

        code = SDCARD_WriteData(block);
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	4618      	mov	r0, r3
 8003212:	f000 ffe9 	bl	80041e8 <SDCARD_WriteData>
 8003216:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        if(code < 0) {
 800321a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800321e:	2b00      	cmp	r3, #0
 8003220:	da05      	bge.n	800322e <init+0x1d2>
            UART_Printf("SDCARD_WriteData() failed: code = %d\r\n", code);
 8003222:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8003226:	4862      	ldr	r0, [pc, #392]	; (80033b0 <init+0x354>)
 8003228:	f7ff feee 	bl	8003008 <UART_Printf>
            return;
 800322c:	e0a0      	b.n	8003370 <init+0x314>
        }

        UART_Printf("SDCARD_WriteData() done! blockAddr = %08X\r\n", blockAddr);
 800322e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8003232:	4860      	ldr	r0, [pc, #384]	; (80033b4 <init+0x358>)
 8003234:	f7ff fee8 	bl	8003008 <UART_Printf>
        blockAddr++;
 8003238:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800323c:	3301      	adds	r3, #1
 800323e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    for(int i = 0; i < 3; i++) {
 8003242:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003246:	3301      	adds	r3, #1
 8003248:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800324c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003250:	2b02      	cmp	r3, #2
 8003252:	ddd2      	ble.n	80031fa <init+0x19e>
    }

    code = SDCARD_WriteEnd();
 8003254:	f001 f810 	bl	8004278 <SDCARD_WriteEnd>
 8003258:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 800325c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003260:	2b00      	cmp	r3, #0
 8003262:	da05      	bge.n	8003270 <init+0x214>
        UART_Printf("SDCARD_WriteEnd() failed: code = %d\r\n", code);
 8003264:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8003268:	4853      	ldr	r0, [pc, #332]	; (80033b8 <init+0x35c>)
 800326a:	f7ff fecd 	bl	8003008 <UART_Printf>
        return;
 800326e:	e07f      	b.n	8003370 <init+0x314>
    }
    UART_Printf("SDCARD_WriteEnd() done!\r\n");
 8003270:	4852      	ldr	r0, [pc, #328]	; (80033bc <init+0x360>)
 8003272:	f7ff fec9 	bl	8003008 <UART_Printf>

    blockAddr = startBlockAddr + 1;
 8003276:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800327a:	3301      	adds	r3, #1
 800327c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    code = SDCARD_ReadBegin(blockAddr);
 8003280:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8003284:	f000 fed2 	bl	800402c <SDCARD_ReadBegin>
 8003288:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 800328c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003290:	2b00      	cmp	r3, #0
 8003292:	da05      	bge.n	80032a0 <init+0x244>
        UART_Printf("SDCARD_ReadBegin() failed: code = %d\r\n", code);
 8003294:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8003298:	4849      	ldr	r0, [pc, #292]	; (80033c0 <init+0x364>)
 800329a:	f7ff feb5 	bl	8003008 <UART_Printf>
        return;
 800329e:	e067      	b.n	8003370 <init+0x314>
    }
    UART_Printf("SDCARD_ReadBegin(0x%08X, ...) done!\r\n", blockAddr);
 80032a0:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80032a4:	4847      	ldr	r0, [pc, #284]	; (80033c4 <init+0x368>)
 80032a6:	f7ff feaf 	bl	8003008 <UART_Printf>

    for(int i = 0; i < 3; i++) {
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80032b0:	e049      	b.n	8003346 <init+0x2ea>
        code = SDCARD_ReadData(block);
 80032b2:	f107 0308 	add.w	r3, r7, #8
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fef6 	bl	80040a8 <SDCARD_ReadData>
 80032bc:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        if(code < 0) {
 80032c0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da05      	bge.n	80032d4 <init+0x278>
            UART_Printf("SDCARD_ReadData() failed: code = %d\r\n", code);
 80032c8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80032cc:	483e      	ldr	r0, [pc, #248]	; (80033c8 <init+0x36c>)
 80032ce:	f7ff fe9b 	bl	8003008 <UART_Printf>
            return;
 80032d2:	e04d      	b.n	8003370 <init+0x314>
        }

        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80032d4:	f107 0308 	add.w	r3, r7, #8
 80032d8:	781b      	ldrb	r3, [r3, #0]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80032da:	469c      	mov	ip, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	785b      	ldrb	r3, [r3, #1]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80032e2:	469e      	mov	lr, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80032e4:	f107 0308 	add.w	r3, r7, #8
 80032e8:	789b      	ldrb	r3, [r3, #2]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80032ea:	4698      	mov	r8, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	78db      	ldrb	r3, [r3, #3]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80032f2:	461a      	mov	r2, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80032f4:	f107 0308 	add.w	r3, r7, #8
 80032f8:	791b      	ldrb	r3, [r3, #4]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80032fa:	4619      	mov	r1, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80032fc:	f107 0308 	add.w	r3, r7, #8
 8003300:	795b      	ldrb	r3, [r3, #5]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8003302:	4618      	mov	r0, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003304:	f107 0308 	add.w	r3, r7, #8
 8003308:	799b      	ldrb	r3, [r3, #6]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800330a:	461c      	mov	r4, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800330c:	f107 0308 	add.w	r3, r7, #8
 8003310:	79db      	ldrb	r3, [r3, #7]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8003312:	461d      	mov	r5, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8003314:	f107 0308 	add.w	r3, r7, #8
 8003318:	7a1b      	ldrb	r3, [r3, #8]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800331a:	461e      	mov	r6, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800331c:	f107 0308 	add.w	r3, r7, #8
 8003320:	7a5b      	ldrb	r3, [r3, #9]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8003322:	9306      	str	r3, [sp, #24]
 8003324:	9605      	str	r6, [sp, #20]
 8003326:	9504      	str	r5, [sp, #16]
 8003328:	9403      	str	r4, [sp, #12]
 800332a:	9002      	str	r0, [sp, #8]
 800332c:	9101      	str	r1, [sp, #4]
 800332e:	9200      	str	r2, [sp, #0]
 8003330:	4643      	mov	r3, r8
 8003332:	4672      	mov	r2, lr
 8003334:	4661      	mov	r1, ip
 8003336:	4825      	ldr	r0, [pc, #148]	; (80033cc <init+0x370>)
 8003338:	f7ff fe66 	bl	8003008 <UART_Printf>
    for(int i = 0; i < 3; i++) {
 800333c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003340:	3301      	adds	r3, #1
 8003342:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8003346:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800334a:	2b02      	cmp	r3, #2
 800334c:	ddb1      	ble.n	80032b2 <init+0x256>
    }

    code = SDCARD_ReadEnd();
 800334e:	f000 fedf 	bl	8004110 <SDCARD_ReadEnd>
 8003352:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 8003356:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800335a:	2b00      	cmp	r3, #0
 800335c:	da05      	bge.n	800336a <init+0x30e>
        UART_Printf("SDCARD_ReadEnd() failed: code = %d\r\n", code);
 800335e:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8003362:	481b      	ldr	r0, [pc, #108]	; (80033d0 <init+0x374>)
 8003364:	f7ff fe50 	bl	8003008 <UART_Printf>
        return;
 8003368:	e002      	b.n	8003370 <init+0x314>
    }
    UART_Printf("SDCARD_ReadEnd() done!\r\n");
 800336a:	481a      	ldr	r0, [pc, #104]	; (80033d4 <init+0x378>)
 800336c:	f7ff fe4c 	bl	8003008 <UART_Printf>
}
 8003370:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800337a:	bf00      	nop
 800337c:	08004be8 	.word	0x08004be8
 8003380:	08004bf4 	.word	0x08004bf4
 8003384:	08004c18 	.word	0x08004c18
 8003388:	08004c30 	.word	0x08004c30
 800338c:	10624dd3 	.word	0x10624dd3
 8003390:	08004c60 	.word	0x08004c60
 8003394:	08004c9c 	.word	0x08004c9c
 8003398:	08004ca4 	.word	0x08004ca4
 800339c:	08004cd4 	.word	0x08004cd4
 80033a0:	08004d04 	.word	0x08004d04
 80033a4:	08004d34 	.word	0x08004d34
 80033a8:	08004d84 	.word	0x08004d84
 80033ac:	08004dac 	.word	0x08004dac
 80033b0:	08004dd4 	.word	0x08004dd4
 80033b4:	08004dfc 	.word	0x08004dfc
 80033b8:	08004e28 	.word	0x08004e28
 80033bc:	08004e50 	.word	0x08004e50
 80033c0:	08004e6c 	.word	0x08004e6c
 80033c4:	08004e94 	.word	0x08004e94
 80033c8:	08004ebc 	.word	0x08004ebc
 80033cc:	08004ee4 	.word	0x08004ee4
 80033d0:	08004f20 	.word	0x08004f20
 80033d4:	08004f48 	.word	0x08004f48

080033d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SD_MPU6050_Result result ;
	uint8_t mpu_ok[15] = {"MPU WORK FINE\n"};
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <main+0x4c>)
 80033e0:	f107 0418 	add.w	r4, r7, #24
 80033e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033e6:	c407      	stmia	r4!, {r0, r1, r2}
 80033e8:	8023      	strh	r3, [r4, #0]
 80033ea:	3402      	adds	r4, #2
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	7023      	strb	r3, [r4, #0]
	uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <main+0x50>)
 80033f2:	1d3c      	adds	r4, r7, #4
 80033f4:	461d      	mov	r5, r3
 80033f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033fa:	682b      	ldr	r3, [r5, #0]
 80033fc:	7023      	strb	r3, [r4, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033fe:	f7fc ff3f 	bl	8000280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003402:	f000 f815 	bl	8003430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003406:	f000 f913 	bl	8003630 <MX_GPIO_Init>
  MX_I2C1_Init();
 800340a:	f000 f863 	bl	80034d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800340e:	f000 f8a1 	bl	8003554 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003412:	f000 f8dd 	bl	80035d0 <MX_USART2_UART_Init>
  }else{
	  uint8_t msgFL[] = "Mount failed...\r\n";
	  HAL_UART_Transmit(&huart2, msgFL, sizeof(msgFL), 1000);
  }
  */
  UART_Printf("Init status started. \r\n");
 8003416:	4805      	ldr	r0, [pc, #20]	; (800342c <main+0x54>)
 8003418:	f7ff fdf6 	bl	8003008 <UART_Printf>
  init();
 800341c:	f7ff fe1e 	bl	800305c <init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003420:	e7fe      	b.n	8003420 <main+0x48>
 8003422:	bf00      	nop
 8003424:	08004f7c 	.word	0x08004f7c
 8003428:	08004f8c 	.word	0x08004f8c
 800342c:	08004f64 	.word	0x08004f64

08003430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b096      	sub	sp, #88	; 0x58
 8003434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800343a:	2228      	movs	r2, #40	; 0x28
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f000 ff6a 	bl	8004318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003444:	f107 031c 	add.w	r3, r7, #28
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003464:	2302      	movs	r3, #2
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003468:	2301      	movs	r3, #1
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800346c:	2310      	movs	r3, #16
 800346e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003470:	2300      	movs	r3, #0
 8003472:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fb03 	bl	8000a84 <HAL_RCC_OscConfig>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003484:	f000 f912 	bl	80036ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003488:	230f      	movs	r3, #15
 800348a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800348c:	2300      	movs	r3, #0
 800348e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003494:	2300      	movs	r3, #0
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe f9dc 	bl	8001860 <HAL_RCC_ClockConfig>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80034ae:	f000 f8fd 	bl	80036ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80034b2:	2320      	movs	r3, #32
 80034b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fc05 	bl	8001ccc <HAL_RCCEx_PeriphCLKConfig>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80034c8:	f000 f8f0 	bl	80036ac <Error_Handler>
  }
}
 80034cc:	bf00      	nop
 80034ce:	3758      	adds	r7, #88	; 0x58
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <MX_I2C1_Init+0x74>)
 80034da:	4a1c      	ldr	r2, [pc, #112]	; (800354c <MX_I2C1_Init+0x78>)
 80034dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <MX_I2C1_Init+0x74>)
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <MX_I2C1_Init+0x7c>)
 80034e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <MX_I2C1_Init+0x74>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <MX_I2C1_Init+0x74>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034f0:	4b15      	ldr	r3, [pc, #84]	; (8003548 <MX_I2C1_Init+0x74>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <MX_I2C1_Init+0x74>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <MX_I2C1_Init+0x74>)
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <MX_I2C1_Init+0x74>)
 8003504:	2200      	movs	r2, #0
 8003506:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <MX_I2C1_Init+0x74>)
 800350a:	2200      	movs	r2, #0
 800350c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800350e:	480e      	ldr	r0, [pc, #56]	; (8003548 <MX_I2C1_Init+0x74>)
 8003510:	f7fd f990 	bl	8000834 <HAL_I2C_Init>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800351a:	f000 f8c7 	bl	80036ac <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800351e:	2100      	movs	r1, #0
 8003520:	4809      	ldr	r0, [pc, #36]	; (8003548 <MX_I2C1_Init+0x74>)
 8003522:	f7fd fa16 	bl	8000952 <HAL_I2CEx_ConfigAnalogFilter>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800352c:	f000 f8be 	bl	80036ac <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003530:	2100      	movs	r1, #0
 8003532:	4805      	ldr	r0, [pc, #20]	; (8003548 <MX_I2C1_Init+0x74>)
 8003534:	f7fd fa58 	bl	80009e8 <HAL_I2CEx_ConfigDigitalFilter>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800353e:	f000 f8b5 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200000a0 	.word	0x200000a0
 800354c:	40005400 	.word	0x40005400
 8003550:	2000090e 	.word	0x2000090e

08003554 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <MX_SPI1_Init+0x74>)
 800355a:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <MX_SPI1_Init+0x78>)
 800355c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800355e:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003560:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003564:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800356c:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <MX_SPI1_Init+0x74>)
 800356e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003572:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <MX_SPI1_Init+0x74>)
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003586:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <MX_SPI1_Init+0x74>)
 800358a:	2210      	movs	r2, #16
 800358c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003590:	2200      	movs	r2, #0
 8003592:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003596:	2200      	movs	r2, #0
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <MX_SPI1_Init+0x74>)
 800359c:	2200      	movs	r2, #0
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <MX_SPI1_Init+0x74>)
 80035a2:	2207      	movs	r2, #7
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <MX_SPI1_Init+0x74>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <MX_SPI1_Init+0x74>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035b2:	4805      	ldr	r0, [pc, #20]	; (80035c8 <MX_SPI1_Init+0x74>)
 80035b4:	f7fe fcb0 	bl	8001f18 <HAL_SPI_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80035be:	f000 f875 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200000ec 	.word	0x200000ec
 80035cc:	40013000 	.word	0x40013000

080035d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035d4:	4b14      	ldr	r3, [pc, #80]	; (8003628 <MX_USART2_UART_Init+0x58>)
 80035d6:	4a15      	ldr	r2, [pc, #84]	; (800362c <MX_USART2_UART_Init+0x5c>)
 80035d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <MX_USART2_UART_Init+0x58>)
 80035dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80035e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <MX_USART2_UART_Init+0x58>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <MX_USART2_UART_Init+0x58>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <MX_USART2_UART_Init+0x58>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <MX_USART2_UART_Init+0x58>)
 80035f6:	220c      	movs	r2, #12
 80035f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <MX_USART2_UART_Init+0x58>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <MX_USART2_UART_Init+0x58>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <MX_USART2_UART_Init+0x58>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <MX_USART2_UART_Init+0x58>)
 800360e:	2200      	movs	r2, #0
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003612:	4805      	ldr	r0, [pc, #20]	; (8003628 <MX_USART2_UART_Init+0x58>)
 8003614:	f7ff f97e 	bl	8002914 <HAL_UART_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800361e:	f000 f845 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000150 	.word	0x20000150
 800362c:	40004400 	.word	0x40004400

08003630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003636:	f107 030c 	add.w	r3, r7, #12
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <MX_GPIO_Init+0x78>)
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <MX_GPIO_Init+0x78>)
 800364c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003650:	6153      	str	r3, [r2, #20]
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <MX_GPIO_Init+0x78>)
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <MX_GPIO_Init+0x78>)
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <MX_GPIO_Init+0x78>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6153      	str	r3, [r2, #20]
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <MX_GPIO_Init+0x78>)
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_RESET);
 8003676:	2200      	movs	r2, #0
 8003678:	2110      	movs	r1, #16
 800367a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800367e:	f7fd f8c1 	bl	8000804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_SPI_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI_CS_Pin;
 8003682:	2310      	movs	r3, #16
 8003684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003686:	2301      	movs	r3, #1
 8003688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003692:	f107 030c 	add.w	r3, r7, #12
 8003696:	4619      	mov	r1, r3
 8003698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800369c:	f7fc ff3c 	bl	8000518 <HAL_GPIO_Init>

}
 80036a0:	bf00      	nop
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000

080036ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_MspInit+0x44>)
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	4a0e      	ldr	r2, [pc, #56]	; (8003700 <HAL_MspInit+0x44>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6193      	str	r3, [r2, #24]
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_MspInit+0x44>)
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_MspInit+0x44>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <HAL_MspInit+0x44>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	61d3      	str	r3, [r2, #28]
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_MspInit+0x44>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000

08003704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 0314 	add.w	r3, r7, #20
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_I2C_MspInit+0x7c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d127      	bne.n	8003776 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003726:	4b17      	ldr	r3, [pc, #92]	; (8003784 <HAL_I2C_MspInit+0x80>)
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_I2C_MspInit+0x80>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003730:	6153      	str	r3, [r2, #20]
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <HAL_I2C_MspInit+0x80>)
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800373e:	23c0      	movs	r3, #192	; 0xc0
 8003740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003742:	2312      	movs	r3, #18
 8003744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003746:	2301      	movs	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800374e:	2304      	movs	r3, #4
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	4619      	mov	r1, r3
 8003758:	480b      	ldr	r0, [pc, #44]	; (8003788 <HAL_I2C_MspInit+0x84>)
 800375a:	f7fc fedd 	bl	8000518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_I2C_MspInit+0x80>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4a08      	ldr	r2, [pc, #32]	; (8003784 <HAL_I2C_MspInit+0x80>)
 8003764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003768:	61d3      	str	r3, [r2, #28]
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_I2C_MspInit+0x80>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003776:	bf00      	nop
 8003778:	3728      	adds	r7, #40	; 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40005400 	.word	0x40005400
 8003784:	40021000 	.word	0x40021000
 8003788:	48000400 	.word	0x48000400

0800378c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 0314 	add.w	r3, r7, #20
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_SPI_MspInit+0x7c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d128      	bne.n	8003800 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_SPI_MspInit+0x80>)
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_SPI_MspInit+0x80>)
 80037b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037b8:	6193      	str	r3, [r2, #24]
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_SPI_MspInit+0x80>)
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_SPI_MspInit+0x80>)
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_SPI_MspInit+0x80>)
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d0:	6153      	str	r3, [r2, #20]
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_SPI_MspInit+0x80>)
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80037de:	23e0      	movs	r3, #224	; 0xe0
 80037e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ea:	2303      	movs	r3, #3
 80037ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037ee:	2305      	movs	r3, #5
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	4619      	mov	r1, r3
 80037f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037fc:	f7fc fe8c 	bl	8000518 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003800:	bf00      	nop
 8003802:	3728      	adds	r7, #40	; 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40013000 	.word	0x40013000
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a17      	ldr	r2, [pc, #92]	; (800388c <HAL_UART_MspInit+0x7c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d128      	bne.n	8003884 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003832:	4b17      	ldr	r3, [pc, #92]	; (8003890 <HAL_UART_MspInit+0x80>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4a16      	ldr	r2, [pc, #88]	; (8003890 <HAL_UART_MspInit+0x80>)
 8003838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383c:	61d3      	str	r3, [r2, #28]
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_UART_MspInit+0x80>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <HAL_UART_MspInit+0x80>)
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	4a10      	ldr	r2, [pc, #64]	; (8003890 <HAL_UART_MspInit+0x80>)
 8003850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003854:	6153      	str	r3, [r2, #20]
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_UART_MspInit+0x80>)
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003862:	230c      	movs	r3, #12
 8003864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800386e:	2303      	movs	r3, #3
 8003870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003872:	2307      	movs	r3, #7
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003876:	f107 0314 	add.w	r3, r7, #20
 800387a:	4619      	mov	r1, r3
 800387c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003880:	f7fc fe4a 	bl	8000518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003884:	bf00      	nop
 8003886:	3728      	adds	r7, #40	; 0x28
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40004400 	.word	0x40004400
 8003890:	40021000 	.word	0x40021000

08003894 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <SDTimer_Handler+0x40>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d006      	beq.n	80038b0 <SDTimer_Handler+0x1c>
    Timer1--;
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <SDTimer_Handler+0x40>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <SDTimer_Handler+0x40>)
 80038ae:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <SDTimer_Handler+0x44>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d006      	beq.n	80038c8 <SDTimer_Handler+0x34>
    Timer2--;
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <SDTimer_Handler+0x44>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <SDTimer_Handler+0x44>)
 80038c6:	701a      	strb	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	200001c1 	.word	0x200001c1
 80038d8:	200001c0 	.word	0x200001c0

080038dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ee:	e7fe      	b.n	80038ee <HardFault_Handler+0x4>

080038f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038f4:	e7fe      	b.n	80038f4 <MemManage_Handler+0x4>

080038f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038fa:	e7fe      	b.n	80038fa <BusFault_Handler+0x4>

080038fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003900:	e7fe      	b.n	8003900 <UsageFault_Handler+0x4>

08003902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <SysTick_Handler+0x30>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	3301      	adds	r3, #1
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <SysTick_Handler+0x30>)
 800393c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <SysTick_Handler+0x30>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b09      	cmp	r3, #9
 8003946:	d904      	bls.n	8003952 <SysTick_Handler+0x26>
	{
	FatFsCnt = 0;
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <SysTick_Handler+0x30>)
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 800394e:	f7ff ffa1 	bl	8003894 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003952:	f7fc fcdb 	bl	800030c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	2000008c 	.word	0x2000008c

08003960 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <_sbrk+0x50>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <_sbrk+0x16>
		heap_end = &end;
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <_sbrk+0x50>)
 8003972:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <_sbrk+0x54>)
 8003974:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <_sbrk+0x50>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <_sbrk+0x50>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	466a      	mov	r2, sp
 8003986:	4293      	cmp	r3, r2
 8003988:	d907      	bls.n	800399a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800398a:	f000 fc9b 	bl	80042c4 <__errno>
 800398e:	4602      	mov	r2, r0
 8003990:	230c      	movs	r3, #12
 8003992:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	e006      	b.n	80039a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <_sbrk+0x50>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	4a03      	ldr	r2, [pc, #12]	; (80039b0 <_sbrk+0x50>)
 80039a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80039a6:	68fb      	ldr	r3, [r7, #12]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000090 	.word	0x20000090
 80039b4:	200001c8 	.word	0x200001c8

080039b8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039bc:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <SystemInit+0x84>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <SystemInit+0x84>)
 80039c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80039cc:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <SystemInit+0x88>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <SystemInit+0x88>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <SystemInit+0x88>)
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	4918      	ldr	r1, [pc, #96]	; (8003a40 <SystemInit+0x88>)
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <SystemInit+0x8c>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80039e4:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <SystemInit+0x88>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <SystemInit+0x88>)
 80039ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039f4:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <SystemInit+0x88>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <SystemInit+0x88>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <SystemInit+0x88>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <SystemInit+0x88>)
 8003a06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003a0a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <SystemInit+0x88>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <SystemInit+0x88>)
 8003a12:	f023 030f 	bic.w	r3, r3, #15
 8003a16:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <SystemInit+0x88>)
 8003a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1c:	4908      	ldr	r1, [pc, #32]	; (8003a40 <SystemInit+0x88>)
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <SystemInit+0x90>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <SystemInit+0x88>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a2a:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <SystemInit+0x84>)
 8003a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a30:	609a      	str	r2, [r3, #8]
#endif
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000ed00 	.word	0xe000ed00
 8003a40:	40021000 	.word	0x40021000
 8003a44:	f87fc00c 	.word	0xf87fc00c
 8003a48:	ff00fccc 	.word	0xff00fccc

08003a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a52:	e003      	b.n	8003a5c <LoopCopyDataInit>

08003a54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a5a:	3104      	adds	r1, #4

08003a5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a5c:	480b      	ldr	r0, [pc, #44]	; (8003a8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a64:	d3f6      	bcc.n	8003a54 <CopyDataInit>
	ldr	r2, =_sbss
 8003a66:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a68:	e002      	b.n	8003a70 <LoopFillZerobss>

08003a6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a6c:	f842 3b04 	str.w	r3, [r2], #4

08003a70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <LoopForever+0x16>)
	cmp	r2, r3
 8003a72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003a74:	d3f9      	bcc.n	8003a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a76:	f7ff ff9f 	bl	80039b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a7a:	f000 fc29 	bl	80042d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a7e:	f7ff fcab 	bl	80033d8 <main>

08003a82 <LoopForever>:

LoopForever:
    b LoopForever
 8003a82:	e7fe      	b.n	8003a82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a84:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003a88:	08005050 	.word	0x08005050
	ldr	r0, =_sdata
 8003a8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a90:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003a94:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003a98:	200001c8 	.word	0x200001c8

08003a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a9c:	e7fe      	b.n	8003a9c <ADC1_2_IRQHandler>

08003a9e <SDCARD_Select>:
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2110      	movs	r1, #16
 8003aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aaa:	f7fc feab 	bl	8000804 <HAL_GPIO_WritePin>
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	2110      	movs	r1, #16
 8003aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003abe:	f7fc fea1 	bl	8000804 <HAL_GPIO_WritePin>
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <SDCARD_ReadR1>:
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8003ace:	23ff      	movs	r3, #255	; 0xff
 8003ad0:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8003ad2:	1dfa      	adds	r2, r7, #7
 8003ad4:	1db9      	adds	r1, r7, #6
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2301      	movs	r3, #1
 8003ade:	4807      	ldr	r0, [pc, #28]	; (8003afc <SDCARD_ReadR1+0x34>)
 8003ae0:	f7fe fbfa 	bl	80022d8 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	b25b      	sxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da00      	bge.n	8003aee <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8003aec:	e7f1      	b.n	8003ad2 <SDCARD_ReadR1+0xa>
            break;
 8003aee:	bf00      	nop
    }
    return r1;
 8003af0:	79fb      	ldrb	r3, [r7, #7]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200000ec 	.word	0x200000ec

08003b00 <SDCARD_WaitDataToken>:
#define DATA_TOKEN_CMD17 0xFE
#define DATA_TOKEN_CMD18 0xFE
#define DATA_TOKEN_CMD24 0xFE
#define DATA_TOKEN_CMD25 0xFC

static int SDCARD_WaitDataToken(uint8_t token) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
    uint8_t fb;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8003b0a:	23ff      	movs	r3, #255	; 0xff
 8003b0c:	73bb      	strb	r3, [r7, #14]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &fb, sizeof(fb), HAL_MAX_DELAY);
 8003b0e:	f107 020f 	add.w	r2, r7, #15
 8003b12:	f107 010e 	add.w	r1, r7, #14
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4809      	ldr	r0, [pc, #36]	; (8003b44 <SDCARD_WaitDataToken+0x44>)
 8003b20:	f7fe fbda 	bl	80022d8 <HAL_SPI_TransmitReceive>
        if(fb == token)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	79fa      	ldrb	r2, [r7, #7]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d005      	beq.n	8003b38 <SDCARD_WaitDataToken+0x38>
            break;

        if(fb != 0xFF)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2bff      	cmp	r3, #255	; 0xff
 8003b30:	d0ed      	beq.n	8003b0e <SDCARD_WaitDataToken+0xe>
            return -1;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	e001      	b.n	8003b3c <SDCARD_WaitDataToken+0x3c>
            break;
 8003b38:	bf00      	nop
    }
    return 0;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200000ec 	.word	0x200000ec

08003b48 <SDCARD_ReadBytes>:

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8003b52:	23ff      	movs	r3, #255	; 0xff
 8003b54:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 8003b56:	e00f      	b.n	8003b78 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8003b58:	f107 010f 	add.w	r1, r7, #15
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2301      	movs	r3, #1
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	4808      	ldr	r0, [pc, #32]	; (8003b88 <SDCARD_ReadBytes+0x40>)
 8003b68:	f7fe fbb6 	bl	80022d8 <HAL_SPI_TransmitReceive>
        buff++;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
        buff_size--;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ec      	bne.n	8003b58 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	200000ec 	.word	0x200000ec

08003b8c <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ffd6 	bl	8003b48 <SDCARD_ReadBytes>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	da02      	bge.n	8003ba8 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba6:	e003      	b.n	8003bb0 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	2bff      	cmp	r3, #255	; 0xff
 8003bac:	d1f1      	bne.n	8003b92 <SDCARD_WaitNotBusy+0x6>

    return 0;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <SDCARD_Init>:
 
int SDCARD_Init() {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0

    Set DI and CS high and apply 74 or more clock pulses to SCLK. Without this
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();
 8003bbe:	f7ff ff78 	bl	8003ab2 <SDCARD_Unselect>

    uint8_t high = 0xFF;
 8003bc2:	23ff      	movs	r3, #255	; 0xff
 8003bc4:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	e00a      	b.n	8003be2 <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 8003bcc:	f107 010a 	add.w	r1, r7, #10
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4868      	ldr	r0, [pc, #416]	; (8003d78 <SDCARD_Init+0x1c0>)
 8003bd8:	f7fe fa28 	bl	800202c <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3301      	adds	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	ddf1      	ble.n	8003bcc <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 8003be8:	f7ff ff59 	bl	8003a9e <SDCARD_Select>
    /*
    Step 2.
    
    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8003bec:	f7ff ffce 	bl	8003b8c <SDCARD_WaitNotBusy>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da04      	bge.n	8003c00 <SDCARD_Init+0x48>
        SDCARD_Unselect();
 8003bf6:	f7ff ff5c 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e0b6      	b.n	8003d6e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00, 0x00 /* ARG = 0 */, (0x4A << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295
 8003c04:	2206      	movs	r2, #6
 8003c06:	495d      	ldr	r1, [pc, #372]	; (8003d7c <SDCARD_Init+0x1c4>)
 8003c08:	485b      	ldr	r0, [pc, #364]	; (8003d78 <SDCARD_Init+0x1c0>)
 8003c0a:	f7fe fa0f 	bl	800202c <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8003c0e:	f7ff ff5b 	bl	8003ac8 <SDCARD_ReadR1>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d004      	beq.n	8003c22 <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 8003c18:	f7ff ff4b 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8003c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c20:	e0a5      	b.n	8003d6e <SDCARD_Init+0x1b6>
    MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value)
    will be returned. The lower 12 bits in the return value 0x1AA means that
    the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6
    volts. If not the case, the card should be rejected.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8003c22:	f7ff ffb3 	bl	8003b8c <SDCARD_WaitNotBusy>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	da04      	bge.n	8003c36 <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 8003c2c:	f7ff ff41 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295
 8003c34:	e09b      	b.n	8003d6e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x08 /* CMD8 */, 0x00, 0x00, 0x01, 0xAA /* ARG */, (0x43 << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	2206      	movs	r2, #6
 8003c3c:	4950      	ldr	r1, [pc, #320]	; (8003d80 <SDCARD_Init+0x1c8>)
 8003c3e:	484e      	ldr	r0, [pc, #312]	; (8003d78 <SDCARD_Init+0x1c0>)
 8003c40:	f7fe f9f4 	bl	800202c <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8003c44:	f7ff ff40 	bl	8003ac8 <SDCARD_ReadR1>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d004      	beq.n	8003c58 <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 8003c4e:	f7ff ff30 	bl	8003ab2 <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 8003c52:	f06f 0301 	mvn.w	r3, #1
 8003c56:	e08a      	b.n	8003d6e <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	2104      	movs	r1, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff73 	bl	8003b48 <SDCARD_ReadBytes>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	da04      	bge.n	8003c72 <SDCARD_Init+0xba>
            SDCARD_Unselect();
 8003c68:	f7ff ff23 	bl	8003ab2 <SDCARD_Unselect>
            return -3;
 8003c6c:	f06f 0302 	mvn.w	r3, #2
 8003c70:	e07d      	b.n	8003d6e <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 8003c72:	79bb      	ldrb	r3, [r7, #6]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <SDCARD_Init+0xca>
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	2baa      	cmp	r3, #170	; 0xaa
 8003c80:	d004      	beq.n	8003c8c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8003c82:	f7ff ff16 	bl	8003ab2 <SDCARD_Unselect>
            return -4;
 8003c86:	f06f 0303 	mvn.w	r3, #3
 8003c8a:	e070      	b.n	8003d6e <SDCARD_Init+0x1b6>
    Step 4.

    And then initiate initialization with ACMD41 with HCS flag (bit 30).
    */
    for(;;) {
        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8003c8c:	f7ff ff7e 	bl	8003b8c <SDCARD_WaitNotBusy>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da04      	bge.n	8003ca0 <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 8003c96:	f7ff ff0c 	bl	8003ab2 <SDCARD_Unselect>
            return -1;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9e:	e066      	b.n	8003d6e <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca4:	2206      	movs	r2, #6
 8003ca6:	4937      	ldr	r1, [pc, #220]	; (8003d84 <SDCARD_Init+0x1cc>)
 8003ca8:	4833      	ldr	r0, [pc, #204]	; (8003d78 <SDCARD_Init+0x1c0>)
 8003caa:	f7fe f9bf 	bl	800202c <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 8003cae:	f7ff ff0b 	bl	8003ac8 <SDCARD_ReadR1>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d004      	beq.n	8003cc2 <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 8003cb8:	f7ff fefb 	bl	8003ab2 <SDCARD_Unselect>
            return -5;
 8003cbc:	f06f 0304 	mvn.w	r3, #4
 8003cc0:	e055      	b.n	8003d6e <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8003cc2:	f7ff ff63 	bl	8003b8c <SDCARD_WaitNotBusy>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	da04      	bge.n	8003cd6 <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 8003ccc:	f7ff fef1 	bl	8003ab2 <SDCARD_Unselect>
            return -1;
 8003cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd4:	e04b      	b.n	8003d6e <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cda:	2206      	movs	r2, #6
 8003cdc:	492a      	ldr	r1, [pc, #168]	; (8003d88 <SDCARD_Init+0x1d0>)
 8003cde:	4826      	ldr	r0, [pc, #152]	; (8003d78 <SDCARD_Init+0x1c0>)
 8003ce0:	f7fe f9a4 	bl	800202c <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 8003ce4:	f7ff fef0 	bl	8003ac8 <SDCARD_ReadR1>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 8003cec:	7afb      	ldrb	r3, [r7, #11]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <SDCARD_Init+0x14a>
            break;
        }

        if(r1 != 0x01) {
 8003cf2:	7afb      	ldrb	r3, [r7, #11]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d0c9      	beq.n	8003c8c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8003cf8:	f7ff fedb 	bl	8003ab2 <SDCARD_Unselect>
            return -6;
 8003cfc:	f06f 0305 	mvn.w	r3, #5
 8003d00:	e035      	b.n	8003d6e <SDCARD_Init+0x1b6>
            break;
 8003d02:	bf00      	nop

    After the initialization completed, read OCR register with CMD58 and check
    CCS flag (bit 30). When it is set, the card is a high-capacity card known
    as SDHC/SDXC.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8003d04:	f7ff ff42 	bl	8003b8c <SDCARD_WaitNotBusy>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	da04      	bge.n	8003d18 <SDCARD_Init+0x160>
        SDCARD_Unselect();
 8003d0e:	f7ff fed0 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	e02a      	b.n	8003d6e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1c:	2206      	movs	r2, #6
 8003d1e:	491b      	ldr	r1, [pc, #108]	; (8003d8c <SDCARD_Init+0x1d4>)
 8003d20:	4815      	ldr	r0, [pc, #84]	; (8003d78 <SDCARD_Init+0x1c0>)
 8003d22:	f7fe f983 	bl	800202c <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8003d26:	f7ff fecf 	bl	8003ac8 <SDCARD_ReadR1>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <SDCARD_Init+0x182>
        SDCARD_Unselect();
 8003d30:	f7ff febf 	bl	8003ab2 <SDCARD_Unselect>
        return -7;
 8003d34:	f06f 0306 	mvn.w	r3, #6
 8003d38:	e019      	b.n	8003d6e <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	2104      	movs	r1, #4
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff ff02 	bl	8003b48 <SDCARD_ReadBytes>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da04      	bge.n	8003d54 <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 8003d4a:	f7ff feb2 	bl	8003ab2 <SDCARD_Unselect>
            return -8;
 8003d4e:	f06f 0307 	mvn.w	r3, #7
 8003d52:	e00c      	b.n	8003d6e <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 8003d54:	783b      	ldrb	r3, [r7, #0]
 8003d56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d5c:	d004      	beq.n	8003d68 <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 8003d5e:	f7ff fea8 	bl	8003ab2 <SDCARD_Unselect>
            return -9;
 8003d62:	f06f 0308 	mvn.w	r3, #8
 8003d66:	e002      	b.n	8003d6e <SDCARD_Init+0x1b6>
        }
    }

    SDCARD_Unselect();
 8003d68:	f7ff fea3 	bl	8003ab2 <SDCARD_Unselect>
    return 0;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200000ec 	.word	0x200000ec
 8003d7c:	08004fdc 	.word	0x08004fdc
 8003d80:	08004fe4 	.word	0x08004fe4
 8003d84:	08004fec 	.word	0x08004fec
 8003d88:	08004ff4 	.word	0x08004ff4
 8003d8c:	08004ffc 	.word	0x08004ffc

08003d90 <SDCARD_GetBlocksNumber>:


int SDCARD_GetBlocksNumber(uint32_t* num) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
    uint8_t csd[16];
    uint8_t crc[2];

    SDCARD_Select();
 8003d98:	f7ff fe81 	bl	8003a9e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8003d9c:	f7ff fef6 	bl	8003b8c <SDCARD_WaitNotBusy>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da04      	bge.n	8003db0 <SDCARD_GetBlocksNumber+0x20>
        SDCARD_Unselect();
 8003da6:	f7ff fe84 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	e057      	b.n	8003e60 <SDCARD_GetBlocksNumber+0xd0>

    /* CMD9 (SEND_CSD) command */
    {
        static const uint8_t cmd[] =
            { 0x40 | 0x09 /* CMD9 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	2206      	movs	r2, #6
 8003db6:	492c      	ldr	r1, [pc, #176]	; (8003e68 <SDCARD_GetBlocksNumber+0xd8>)
 8003db8:	482c      	ldr	r0, [pc, #176]	; (8003e6c <SDCARD_GetBlocksNumber+0xdc>)
 8003dba:	f7fe f937 	bl	800202c <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8003dbe:	f7ff fe83 	bl	8003ac8 <SDCARD_ReadR1>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <SDCARD_GetBlocksNumber+0x42>
        SDCARD_Unselect();
 8003dc8:	f7ff fe73 	bl	8003ab2 <SDCARD_Unselect>
        return -2;
 8003dcc:	f06f 0301 	mvn.w	r3, #1
 8003dd0:	e046      	b.n	8003e60 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD9) < 0) {
 8003dd2:	20fe      	movs	r0, #254	; 0xfe
 8003dd4:	f7ff fe94 	bl	8003b00 <SDCARD_WaitDataToken>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	da04      	bge.n	8003de8 <SDCARD_GetBlocksNumber+0x58>
        SDCARD_Unselect();
 8003dde:	f7ff fe68 	bl	8003ab2 <SDCARD_Unselect>
        return -3;
 8003de2:	f06f 0302 	mvn.w	r3, #2
 8003de6:	e03b      	b.n	8003e60 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(csd, sizeof(csd)) < 0) {
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	2110      	movs	r1, #16
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff feaa 	bl	8003b48 <SDCARD_ReadBytes>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da04      	bge.n	8003e04 <SDCARD_GetBlocksNumber+0x74>
        SDCARD_Unselect();
 8003dfa:	f7ff fe5a 	bl	8003ab2 <SDCARD_Unselect>
        return -4;
 8003dfe:	f06f 0303 	mvn.w	r3, #3
 8003e02:	e02d      	b.n	8003e60 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(crc, sizeof(crc)) < 0) {
 8003e04:	f107 0308 	add.w	r3, r7, #8
 8003e08:	2102      	movs	r1, #2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fe9c 	bl	8003b48 <SDCARD_ReadBytes>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	da04      	bge.n	8003e20 <SDCARD_GetBlocksNumber+0x90>
        SDCARD_Unselect();
 8003e16:	f7ff fe4c 	bl	8003ab2 <SDCARD_Unselect>
        return -5;
 8003e1a:	f06f 0304 	mvn.w	r3, #4
 8003e1e:	e01f      	b.n	8003e60 <SDCARD_GetBlocksNumber+0xd0>
    }

    SDCARD_Unselect();
 8003e20:	f7ff fe47 	bl	8003ab2 <SDCARD_Unselect>

    // first byte is VVxxxxxxxx where VV is csd.version
    if((csd[0] & 0xC0) != 0x40) // csd.version != 1
 8003e24:	7b3b      	ldrb	r3, [r7, #12]
 8003e26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d002      	beq.n	8003e34 <SDCARD_GetBlocksNumber+0xa4>
        return -6;
 8003e2e:	f06f 0305 	mvn.w	r3, #5
 8003e32:	e015      	b.n	8003e60 <SDCARD_GetBlocksNumber+0xd0>

    uint32_t tmp = csd[7] & 0x3F; // two bits are reserved
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e3a:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[8];
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	7d3a      	ldrb	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[9];
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	7d7a      	ldrb	r2, [r7, #21]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61fb      	str	r3, [r7, #28]
    tmp = (tmp + 1) << 9;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	3301      	adds	r3, #1
 8003e54:	025b      	lsls	r3, r3, #9
 8003e56:	61fb      	str	r3, [r7, #28]
    *num = tmp;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	601a      	str	r2, [r3, #0]

    return 0;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3720      	adds	r7, #32
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	08005004 	.word	0x08005004
 8003e6c:	200000ec 	.word	0x200000ec

08003e70 <SDCARD_ReadSingleBlock>:

int SDCARD_ReadSingleBlock(uint32_t blockNum, uint8_t* buff) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
    uint8_t crc[2];

    SDCARD_Select();
 8003e7a:	f7ff fe10 	bl	8003a9e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8003e7e:	f7ff fe85 	bl	8003b8c <SDCARD_WaitNotBusy>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	da04      	bge.n	8003e92 <SDCARD_ReadSingleBlock+0x22>
        SDCARD_Unselect();
 8003e88:	f7ff fe13 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	e04d      	b.n	8003f2e <SDCARD_ReadSingleBlock+0xbe>
    }

    /* CMD17 (SEND_SINGLE_BLOCK) command */
    uint8_t cmd[] = {
 8003e92:	2351      	movs	r3, #81	; 0x51
 8003e94:	733b      	strb	r3, [r7, #12]
        0x40 | 0x11 /* CMD17 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	737b      	strb	r3, [r7, #13]
        (blockNum >> 16) & 0xFF,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	73bb      	strb	r3, [r7, #14]
        (blockNum >> 8) & 0xFF,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	73fb      	strb	r3, [r7, #15]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	743b      	strb	r3, [r7, #16]
 8003eb4:	23ff      	movs	r3, #255	; 0xff
 8003eb6:	747b      	strb	r3, [r7, #17]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003eb8:	f107 010c 	add.w	r1, r7, #12
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	2206      	movs	r2, #6
 8003ec2:	481d      	ldr	r0, [pc, #116]	; (8003f38 <SDCARD_ReadSingleBlock+0xc8>)
 8003ec4:	f7fe f8b2 	bl	800202c <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8003ec8:	f7ff fdfe 	bl	8003ac8 <SDCARD_ReadR1>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <SDCARD_ReadSingleBlock+0x6c>
        SDCARD_Unselect();
 8003ed2:	f7ff fdee 	bl	8003ab2 <SDCARD_Unselect>
        return -2;
 8003ed6:	f06f 0301 	mvn.w	r3, #1
 8003eda:	e028      	b.n	8003f2e <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD17) < 0) {
 8003edc:	20fe      	movs	r0, #254	; 0xfe
 8003ede:	f7ff fe0f 	bl	8003b00 <SDCARD_WaitDataToken>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da04      	bge.n	8003ef2 <SDCARD_ReadSingleBlock+0x82>
        SDCARD_Unselect();
 8003ee8:	f7ff fde3 	bl	8003ab2 <SDCARD_Unselect>
        return -3;
 8003eec:	f06f 0302 	mvn.w	r3, #2
 8003ef0:	e01d      	b.n	8003f2e <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(buff, 512) < 0) {
 8003ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ef6:	6838      	ldr	r0, [r7, #0]
 8003ef8:	f7ff fe26 	bl	8003b48 <SDCARD_ReadBytes>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da04      	bge.n	8003f0c <SDCARD_ReadSingleBlock+0x9c>
        SDCARD_Unselect();
 8003f02:	f7ff fdd6 	bl	8003ab2 <SDCARD_Unselect>
        return -4;
 8003f06:	f06f 0303 	mvn.w	r3, #3
 8003f0a:	e010      	b.n	8003f2e <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(crc, 2) < 0) {
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fe18 	bl	8003b48 <SDCARD_ReadBytes>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	da04      	bge.n	8003f28 <SDCARD_ReadSingleBlock+0xb8>
        SDCARD_Unselect();
 8003f1e:	f7ff fdc8 	bl	8003ab2 <SDCARD_Unselect>
        return -5;
 8003f22:	f06f 0304 	mvn.w	r3, #4
 8003f26:	e002      	b.n	8003f2e <SDCARD_ReadSingleBlock+0xbe>
    }

    SDCARD_Unselect();
 8003f28:	f7ff fdc3 	bl	8003ab2 <SDCARD_Unselect>
    return 0;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	200000ec 	.word	0x200000ec

08003f3c <SDCARD_WriteSingleBlock>:


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 8003f46:	f7ff fdaa 	bl	8003a9e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8003f4a:	f7ff fe1f 	bl	8003b8c <SDCARD_WaitNotBusy>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da04      	bge.n	8003f5e <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 8003f54:	f7ff fdad 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8003f58:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5c:	e05e      	b.n	800401c <SDCARD_WriteSingleBlock+0xe0>
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
 8003f5e:	2358      	movs	r3, #88	; 0x58
 8003f60:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	74fb      	strb	r3, [r7, #19]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	753b      	strb	r3, [r7, #20]
 8003f80:	23ff      	movs	r3, #255	; 0xff
 8003f82:	757b      	strb	r3, [r7, #21]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003f84:	f107 0110 	add.w	r1, r7, #16
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8c:	2206      	movs	r2, #6
 8003f8e:	4825      	ldr	r0, [pc, #148]	; (8004024 <SDCARD_WriteSingleBlock+0xe8>)
 8003f90:	f7fe f84c 	bl	800202c <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8003f94:	f7ff fd98 	bl	8003ac8 <SDCARD_ReadR1>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 8003f9e:	f7ff fd88 	bl	8003ab2 <SDCARD_Unselect>
        return -2;
 8003fa2:	f06f 0301 	mvn.w	r3, #1
 8003fa6:	e039      	b.n	800401c <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 8003fa8:	23fe      	movs	r3, #254	; 0xfe
 8003faa:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 8003fac:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <SDCARD_WriteSingleBlock+0xec>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 8003fb2:	f107 010f 	add.w	r1, r7, #15
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4819      	ldr	r0, [pc, #100]	; (8004024 <SDCARD_WriteSingleBlock+0xe8>)
 8003fbe:	f7fe f835 	bl	800202c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 8003fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	4815      	ldr	r0, [pc, #84]	; (8004024 <SDCARD_WriteSingleBlock+0xe8>)
 8003fce:	f7fe f82d 	bl	800202c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 8003fd2:	f107 010c 	add.w	r1, r7, #12
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	2202      	movs	r2, #2
 8003fdc:	4811      	ldr	r0, [pc, #68]	; (8004024 <SDCARD_WriteSingleBlock+0xe8>)
 8003fde:	f7fe f825 	bl	800202c <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 8003fe2:	f107 030b 	add.w	r3, r7, #11
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fdad 	bl	8003b48 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 8003fee:	7afb      	ldrb	r3, [r7, #11]
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	2b05      	cmp	r3, #5
 8003ff6:	d004      	beq.n	8004002 <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 8003ff8:	f7ff fd5b 	bl	8003ab2 <SDCARD_Unselect>
        return -3;
 8003ffc:	f06f 0302 	mvn.w	r3, #2
 8004000:	e00c      	b.n	800401c <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 8004002:	f7ff fdc3 	bl	8003b8c <SDCARD_WaitNotBusy>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	da04      	bge.n	8004016 <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 800400c:	f7ff fd51 	bl	8003ab2 <SDCARD_Unselect>
        return -4;
 8004010:	f06f 0303 	mvn.w	r3, #3
 8004014:	e002      	b.n	800401c <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 8004016:	f7ff fd4c 	bl	8003ab2 <SDCARD_Unselect>
    return 0;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	200000ec 	.word	0x200000ec
 8004028:	08004fa0 	.word	0x08004fa0

0800402c <SDCARD_ReadBegin>:

int SDCARD_ReadBegin(uint32_t blockNum) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    SDCARD_Select();
 8004034:	f7ff fd33 	bl	8003a9e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8004038:	f7ff fda8 	bl	8003b8c <SDCARD_WaitNotBusy>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	da04      	bge.n	800404c <SDCARD_ReadBegin+0x20>
        SDCARD_Unselect();
 8004042:	f7ff fd36 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	e027      	b.n	800409c <SDCARD_ReadBegin+0x70>
    }

    /* CMD18 (READ_MULTIPLE_BLOCK) command */
    uint8_t cmd[] = {
 800404c:	2352      	movs	r3, #82	; 0x52
 800404e:	723b      	strb	r3, [r7, #8]
        0x40 | 0x12 /* CMD18 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8004054:	b2db      	uxtb	r3, r3
 8004056:	727b      	strb	r3, [r7, #9]
        (blockNum >> 16) & 0xFF,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 800405c:	b2db      	uxtb	r3, r3
 800405e:	72bb      	strb	r3, [r7, #10]
        (blockNum >> 8) & 0xFF,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8004064:	b2db      	uxtb	r3, r3
 8004066:	72fb      	strb	r3, [r7, #11]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	733b      	strb	r3, [r7, #12]
 800406e:	23ff      	movs	r3, #255	; 0xff
 8004070:	737b      	strb	r3, [r7, #13]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8004072:	f107 0108 	add.w	r1, r7, #8
 8004076:	f04f 33ff 	mov.w	r3, #4294967295
 800407a:	2206      	movs	r2, #6
 800407c:	4809      	ldr	r0, [pc, #36]	; (80040a4 <SDCARD_ReadBegin+0x78>)
 800407e:	f7fd ffd5 	bl	800202c <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8004082:	f7ff fd21 	bl	8003ac8 <SDCARD_ReadR1>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <SDCARD_ReadBegin+0x6a>
        SDCARD_Unselect();
 800408c:	f7ff fd11 	bl	8003ab2 <SDCARD_Unselect>
        return -2;
 8004090:	f06f 0301 	mvn.w	r3, #1
 8004094:	e002      	b.n	800409c <SDCARD_ReadBegin+0x70>
    }

    SDCARD_Unselect();
 8004096:	f7ff fd0c 	bl	8003ab2 <SDCARD_Unselect>
    return 0;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	200000ec 	.word	0x200000ec

080040a8 <SDCARD_ReadData>:

int SDCARD_ReadData(uint8_t* buff) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
    uint8_t crc[2];
    SDCARD_Select();
 80040b0:	f7ff fcf5 	bl	8003a9e <SDCARD_Select>

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD18) < 0) {
 80040b4:	20fe      	movs	r0, #254	; 0xfe
 80040b6:	f7ff fd23 	bl	8003b00 <SDCARD_WaitDataToken>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	da04      	bge.n	80040ca <SDCARD_ReadData+0x22>
        SDCARD_Unselect();
 80040c0:	f7ff fcf7 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 80040c4:	f04f 33ff 	mov.w	r3, #4294967295
 80040c8:	e01d      	b.n	8004106 <SDCARD_ReadData+0x5e>
    }

    if(SDCARD_ReadBytes(buff, 512) < 0) {
 80040ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fd3a 	bl	8003b48 <SDCARD_ReadBytes>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da04      	bge.n	80040e4 <SDCARD_ReadData+0x3c>
        SDCARD_Unselect();
 80040da:	f7ff fcea 	bl	8003ab2 <SDCARD_Unselect>
        return -2;
 80040de:	f06f 0301 	mvn.w	r3, #1
 80040e2:	e010      	b.n	8004106 <SDCARD_ReadData+0x5e>
    }

    if(SDCARD_ReadBytes(crc, 2) < 0) {
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fd2c 	bl	8003b48 <SDCARD_ReadBytes>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da04      	bge.n	8004100 <SDCARD_ReadData+0x58>
        SDCARD_Unselect();
 80040f6:	f7ff fcdc 	bl	8003ab2 <SDCARD_Unselect>
        return -3;
 80040fa:	f06f 0302 	mvn.w	r3, #2
 80040fe:	e002      	b.n	8004106 <SDCARD_ReadData+0x5e>
    }

    SDCARD_Unselect();
 8004100:	f7ff fcd7 	bl	8003ab2 <SDCARD_Unselect>
    return 0;
 8004104:	2300      	movs	r3, #0

}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <SDCARD_ReadEnd>:

int SDCARD_ReadEnd() {
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
    SDCARD_Select();
 8004116:	f7ff fcc2 	bl	8003a9e <SDCARD_Select>

    /* CMD12 (STOP_TRANSMISSION) */
    {
        static const uint8_t cmd[] = { 0x40 | 0x0C /* CMD12 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
 800411e:	2206      	movs	r2, #6
 8004120:	4910      	ldr	r1, [pc, #64]	; (8004164 <SDCARD_ReadEnd+0x54>)
 8004122:	4811      	ldr	r0, [pc, #68]	; (8004168 <SDCARD_ReadEnd+0x58>)
 8004124:	f7fd ff82 	bl	800202c <HAL_SPI_Transmit>
    /*
    The received byte immediataly following CMD12 is a stuff byte, it should be
    discarded before receive the response of the CMD12
    */
    uint8_t stuffByte;
    if(SDCARD_ReadBytes(&stuffByte, sizeof(stuffByte)) < 0) {
 8004128:	1dfb      	adds	r3, r7, #7
 800412a:	2101      	movs	r1, #1
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fd0b 	bl	8003b48 <SDCARD_ReadBytes>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	da04      	bge.n	8004142 <SDCARD_ReadEnd+0x32>
        SDCARD_Unselect();
 8004138:	f7ff fcbb 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	e00c      	b.n	800415c <SDCARD_ReadEnd+0x4c>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8004142:	f7ff fcc1 	bl	8003ac8 <SDCARD_ReadR1>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <SDCARD_ReadEnd+0x46>
        SDCARD_Unselect();
 800414c:	f7ff fcb1 	bl	8003ab2 <SDCARD_Unselect>
        return -2;
 8004150:	f06f 0301 	mvn.w	r3, #1
 8004154:	e002      	b.n	800415c <SDCARD_ReadEnd+0x4c>
    }
    
    SDCARD_Unselect();
 8004156:	f7ff fcac 	bl	8003ab2 <SDCARD_Unselect>
    return 0;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	0800500c 	.word	0x0800500c
 8004168:	200000ec 	.word	0x200000ec

0800416c <SDCARD_WriteBegin>:


int SDCARD_WriteBegin(uint32_t blockNum) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    SDCARD_Select();
 8004174:	f7ff fc93 	bl	8003a9e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8004178:	f7ff fd08 	bl	8003b8c <SDCARD_WaitNotBusy>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	da04      	bge.n	800418c <SDCARD_WriteBegin+0x20>
        SDCARD_Unselect();
 8004182:	f7ff fc96 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8004186:	f04f 33ff 	mov.w	r3, #4294967295
 800418a:	e027      	b.n	80041dc <SDCARD_WriteBegin+0x70>
    }

    /* CMD25 (WRITE_MULTIPLE_BLOCK) command */
    uint8_t cmd[] = {
 800418c:	2359      	movs	r3, #89	; 0x59
 800418e:	723b      	strb	r3, [r7, #8]
        0x40 | 0x19 /* CMD25 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8004194:	b2db      	uxtb	r3, r3
 8004196:	727b      	strb	r3, [r7, #9]
        (blockNum >> 16) & 0xFF,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 800419c:	b2db      	uxtb	r3, r3
 800419e:	72bb      	strb	r3, [r7, #10]
        (blockNum >> 8) & 0xFF,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	72fb      	strb	r3, [r7, #11]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	733b      	strb	r3, [r7, #12]
 80041ae:	23ff      	movs	r3, #255	; 0xff
 80041b0:	737b      	strb	r3, [r7, #13]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80041b2:	f107 0108 	add.w	r1, r7, #8
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	2206      	movs	r2, #6
 80041bc:	4809      	ldr	r0, [pc, #36]	; (80041e4 <SDCARD_WriteBegin+0x78>)
 80041be:	f7fd ff35 	bl	800202c <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 80041c2:	f7ff fc81 	bl	8003ac8 <SDCARD_ReadR1>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d004      	beq.n	80041d6 <SDCARD_WriteBegin+0x6a>
        SDCARD_Unselect();
 80041cc:	f7ff fc71 	bl	8003ab2 <SDCARD_Unselect>
        return -2;
 80041d0:	f06f 0301 	mvn.w	r3, #1
 80041d4:	e002      	b.n	80041dc <SDCARD_WriteBegin+0x70>
    }

    SDCARD_Unselect();
 80041d6:	f7ff fc6c 	bl	8003ab2 <SDCARD_Unselect>
    return 0;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200000ec 	.word	0x200000ec

080041e8 <SDCARD_WriteData>:

int SDCARD_WriteData(const uint8_t* buff) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    SDCARD_Select();
 80041f0:	f7ff fc55 	bl	8003a9e <SDCARD_Select>

    uint8_t dataToken = DATA_TOKEN_CMD25;
 80041f4:	23fc      	movs	r3, #252	; 0xfc
 80041f6:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <SDCARD_WriteData+0x88>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 80041fe:	f107 010f 	add.w	r1, r7, #15
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
 8004206:	2201      	movs	r2, #1
 8004208:	481a      	ldr	r0, [pc, #104]	; (8004274 <SDCARD_WriteData+0x8c>)
 800420a:	f7fd ff0f 	bl	800202c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4816      	ldr	r0, [pc, #88]	; (8004274 <SDCARD_WriteData+0x8c>)
 800421a:	f7fd ff07 	bl	800202c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 800421e:	f107 010c 	add.w	r1, r7, #12
 8004222:	f04f 33ff 	mov.w	r3, #4294967295
 8004226:	2202      	movs	r2, #2
 8004228:	4812      	ldr	r0, [pc, #72]	; (8004274 <SDCARD_WriteData+0x8c>)
 800422a:	f7fd feff 	bl	800202c <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 800422e:	f107 030b 	add.w	r3, r7, #11
 8004232:	2101      	movs	r1, #1
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fc87 	bl	8003b48 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 800423a:	7afb      	ldrb	r3, [r7, #11]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2b05      	cmp	r3, #5
 8004242:	d004      	beq.n	800424e <SDCARD_WriteData+0x66>
        SDCARD_Unselect();
 8004244:	f7ff fc35 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
 800424c:	e00c      	b.n	8004268 <SDCARD_WriteData+0x80>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 800424e:	f7ff fc9d 	bl	8003b8c <SDCARD_WaitNotBusy>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	da04      	bge.n	8004262 <SDCARD_WriteData+0x7a>
        SDCARD_Unselect();
 8004258:	f7ff fc2b 	bl	8003ab2 <SDCARD_Unselect>
        return -2;
 800425c:	f06f 0301 	mvn.w	r3, #1
 8004260:	e002      	b.n	8004268 <SDCARD_WriteData+0x80>
    }

    SDCARD_Unselect();
 8004262:	f7ff fc26 	bl	8003ab2 <SDCARD_Unselect>
    return 0;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	08004fa0 	.word	0x08004fa0
 8004274:	200000ec 	.word	0x200000ec

08004278 <SDCARD_WriteEnd>:

int SDCARD_WriteEnd() {
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
    SDCARD_Select();
 800427e:	f7ff fc0e 	bl	8003a9e <SDCARD_Select>

    uint8_t stopTran = 0xFD; // stop transaction token for CMD25
 8004282:	23fd      	movs	r3, #253	; 0xfd
 8004284:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &stopTran, sizeof(stopTran), HAL_MAX_DELAY);
 8004286:	1df9      	adds	r1, r7, #7
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
 800428c:	2201      	movs	r2, #1
 800428e:	480c      	ldr	r0, [pc, #48]	; (80042c0 <SDCARD_WriteEnd+0x48>)
 8004290:	f7fd fecc 	bl	800202c <HAL_SPI_Transmit>

    // skip one byte before readyng "busy"
    // this is required by the spec and is necessary for some real SD-cards!
    uint8_t skipByte;
    SDCARD_ReadBytes(&skipByte, sizeof(skipByte));
 8004294:	1dbb      	adds	r3, r7, #6
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fc55 	bl	8003b48 <SDCARD_ReadBytes>

    if(SDCARD_WaitNotBusy() < 0) {
 800429e:	f7ff fc75 	bl	8003b8c <SDCARD_WaitNotBusy>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	da04      	bge.n	80042b2 <SDCARD_WriteEnd+0x3a>
        SDCARD_Unselect();
 80042a8:	f7ff fc03 	bl	8003ab2 <SDCARD_Unselect>
        return -1;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295
 80042b0:	e002      	b.n	80042b8 <SDCARD_WriteEnd+0x40>
    }

    SDCARD_Unselect();
 80042b2:	f7ff fbfe 	bl	8003ab2 <SDCARD_Unselect>
    return 0;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200000ec 	.word	0x200000ec

080042c4 <__errno>:
 80042c4:	4b01      	ldr	r3, [pc, #4]	; (80042cc <__errno+0x8>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	2000000c 	.word	0x2000000c

080042d0 <__libc_init_array>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	4e0d      	ldr	r6, [pc, #52]	; (8004308 <__libc_init_array+0x38>)
 80042d4:	4c0d      	ldr	r4, [pc, #52]	; (800430c <__libc_init_array+0x3c>)
 80042d6:	1ba4      	subs	r4, r4, r6
 80042d8:	10a4      	asrs	r4, r4, #2
 80042da:	2500      	movs	r5, #0
 80042dc:	42a5      	cmp	r5, r4
 80042de:	d109      	bne.n	80042f4 <__libc_init_array+0x24>
 80042e0:	4e0b      	ldr	r6, [pc, #44]	; (8004310 <__libc_init_array+0x40>)
 80042e2:	4c0c      	ldr	r4, [pc, #48]	; (8004314 <__libc_init_array+0x44>)
 80042e4:	f000 fc74 	bl	8004bd0 <_init>
 80042e8:	1ba4      	subs	r4, r4, r6
 80042ea:	10a4      	asrs	r4, r4, #2
 80042ec:	2500      	movs	r5, #0
 80042ee:	42a5      	cmp	r5, r4
 80042f0:	d105      	bne.n	80042fe <__libc_init_array+0x2e>
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042f8:	4798      	blx	r3
 80042fa:	3501      	adds	r5, #1
 80042fc:	e7ee      	b.n	80042dc <__libc_init_array+0xc>
 80042fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004302:	4798      	blx	r3
 8004304:	3501      	adds	r5, #1
 8004306:	e7f2      	b.n	80042ee <__libc_init_array+0x1e>
 8004308:	08005048 	.word	0x08005048
 800430c:	08005048 	.word	0x08005048
 8004310:	08005048 	.word	0x08005048
 8004314:	0800504c 	.word	0x0800504c

08004318 <memset>:
 8004318:	4402      	add	r2, r0
 800431a:	4603      	mov	r3, r0
 800431c:	4293      	cmp	r3, r2
 800431e:	d100      	bne.n	8004322 <memset+0xa>
 8004320:	4770      	bx	lr
 8004322:	f803 1b01 	strb.w	r1, [r3], #1
 8004326:	e7f9      	b.n	800431c <memset+0x4>

08004328 <sniprintf>:
 8004328:	b40c      	push	{r2, r3}
 800432a:	b530      	push	{r4, r5, lr}
 800432c:	4b17      	ldr	r3, [pc, #92]	; (800438c <sniprintf+0x64>)
 800432e:	1e0c      	subs	r4, r1, #0
 8004330:	b09d      	sub	sp, #116	; 0x74
 8004332:	681d      	ldr	r5, [r3, #0]
 8004334:	da08      	bge.n	8004348 <sniprintf+0x20>
 8004336:	238b      	movs	r3, #139	; 0x8b
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	f04f 30ff 	mov.w	r0, #4294967295
 800433e:	b01d      	add	sp, #116	; 0x74
 8004340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004344:	b002      	add	sp, #8
 8004346:	4770      	bx	lr
 8004348:	f44f 7302 	mov.w	r3, #520	; 0x208
 800434c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004350:	bf14      	ite	ne
 8004352:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004356:	4623      	moveq	r3, r4
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	9307      	str	r3, [sp, #28]
 800435c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004360:	9002      	str	r0, [sp, #8]
 8004362:	9006      	str	r0, [sp, #24]
 8004364:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004368:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800436a:	ab21      	add	r3, sp, #132	; 0x84
 800436c:	a902      	add	r1, sp, #8
 800436e:	4628      	mov	r0, r5
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	f000 f8a1 	bl	80044b8 <_svfiprintf_r>
 8004376:	1c43      	adds	r3, r0, #1
 8004378:	bfbc      	itt	lt
 800437a:	238b      	movlt	r3, #139	; 0x8b
 800437c:	602b      	strlt	r3, [r5, #0]
 800437e:	2c00      	cmp	r4, #0
 8004380:	d0dd      	beq.n	800433e <sniprintf+0x16>
 8004382:	9b02      	ldr	r3, [sp, #8]
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e7d9      	b.n	800433e <sniprintf+0x16>
 800438a:	bf00      	nop
 800438c:	2000000c 	.word	0x2000000c

08004390 <_vsniprintf_r>:
 8004390:	b530      	push	{r4, r5, lr}
 8004392:	1e14      	subs	r4, r2, #0
 8004394:	4605      	mov	r5, r0
 8004396:	b09b      	sub	sp, #108	; 0x6c
 8004398:	4618      	mov	r0, r3
 800439a:	da05      	bge.n	80043a8 <_vsniprintf_r+0x18>
 800439c:	238b      	movs	r3, #139	; 0x8b
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	b01b      	add	sp, #108	; 0x6c
 80043a6:	bd30      	pop	{r4, r5, pc}
 80043a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80043ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80043b0:	bf14      	ite	ne
 80043b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80043b6:	4623      	moveq	r3, r4
 80043b8:	9302      	str	r3, [sp, #8]
 80043ba:	9305      	str	r3, [sp, #20]
 80043bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043c0:	9100      	str	r1, [sp, #0]
 80043c2:	9104      	str	r1, [sp, #16]
 80043c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80043c8:	4602      	mov	r2, r0
 80043ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80043cc:	4669      	mov	r1, sp
 80043ce:	4628      	mov	r0, r5
 80043d0:	f000 f872 	bl	80044b8 <_svfiprintf_r>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	bfbc      	itt	lt
 80043d8:	238b      	movlt	r3, #139	; 0x8b
 80043da:	602b      	strlt	r3, [r5, #0]
 80043dc:	2c00      	cmp	r4, #0
 80043de:	d0e1      	beq.n	80043a4 <_vsniprintf_r+0x14>
 80043e0:	9b00      	ldr	r3, [sp, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e7dd      	b.n	80043a4 <_vsniprintf_r+0x14>

080043e8 <vsniprintf>:
 80043e8:	b507      	push	{r0, r1, r2, lr}
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	460a      	mov	r2, r1
 80043f0:	4601      	mov	r1, r0
 80043f2:	4803      	ldr	r0, [pc, #12]	; (8004400 <vsniprintf+0x18>)
 80043f4:	6800      	ldr	r0, [r0, #0]
 80043f6:	f7ff ffcb 	bl	8004390 <_vsniprintf_r>
 80043fa:	b003      	add	sp, #12
 80043fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004400:	2000000c 	.word	0x2000000c

08004404 <__ssputs_r>:
 8004404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	688e      	ldr	r6, [r1, #8]
 800440a:	429e      	cmp	r6, r3
 800440c:	4682      	mov	sl, r0
 800440e:	460c      	mov	r4, r1
 8004410:	4690      	mov	r8, r2
 8004412:	4699      	mov	r9, r3
 8004414:	d837      	bhi.n	8004486 <__ssputs_r+0x82>
 8004416:	898a      	ldrh	r2, [r1, #12]
 8004418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800441c:	d031      	beq.n	8004482 <__ssputs_r+0x7e>
 800441e:	6825      	ldr	r5, [r4, #0]
 8004420:	6909      	ldr	r1, [r1, #16]
 8004422:	1a6f      	subs	r7, r5, r1
 8004424:	6965      	ldr	r5, [r4, #20]
 8004426:	2302      	movs	r3, #2
 8004428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800442c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004430:	f109 0301 	add.w	r3, r9, #1
 8004434:	443b      	add	r3, r7
 8004436:	429d      	cmp	r5, r3
 8004438:	bf38      	it	cc
 800443a:	461d      	movcc	r5, r3
 800443c:	0553      	lsls	r3, r2, #21
 800443e:	d530      	bpl.n	80044a2 <__ssputs_r+0x9e>
 8004440:	4629      	mov	r1, r5
 8004442:	f000 fb2b 	bl	8004a9c <_malloc_r>
 8004446:	4606      	mov	r6, r0
 8004448:	b950      	cbnz	r0, 8004460 <__ssputs_r+0x5c>
 800444a:	230c      	movs	r3, #12
 800444c:	f8ca 3000 	str.w	r3, [sl]
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004456:	81a3      	strh	r3, [r4, #12]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004460:	463a      	mov	r2, r7
 8004462:	6921      	ldr	r1, [r4, #16]
 8004464:	f000 faa8 	bl	80049b8 <memcpy>
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800446e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004472:	81a3      	strh	r3, [r4, #12]
 8004474:	6126      	str	r6, [r4, #16]
 8004476:	6165      	str	r5, [r4, #20]
 8004478:	443e      	add	r6, r7
 800447a:	1bed      	subs	r5, r5, r7
 800447c:	6026      	str	r6, [r4, #0]
 800447e:	60a5      	str	r5, [r4, #8]
 8004480:	464e      	mov	r6, r9
 8004482:	454e      	cmp	r6, r9
 8004484:	d900      	bls.n	8004488 <__ssputs_r+0x84>
 8004486:	464e      	mov	r6, r9
 8004488:	4632      	mov	r2, r6
 800448a:	4641      	mov	r1, r8
 800448c:	6820      	ldr	r0, [r4, #0]
 800448e:	f000 fa9e 	bl	80049ce <memmove>
 8004492:	68a3      	ldr	r3, [r4, #8]
 8004494:	1b9b      	subs	r3, r3, r6
 8004496:	60a3      	str	r3, [r4, #8]
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	441e      	add	r6, r3
 800449c:	6026      	str	r6, [r4, #0]
 800449e:	2000      	movs	r0, #0
 80044a0:	e7dc      	b.n	800445c <__ssputs_r+0x58>
 80044a2:	462a      	mov	r2, r5
 80044a4:	f000 fb54 	bl	8004b50 <_realloc_r>
 80044a8:	4606      	mov	r6, r0
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d1e2      	bne.n	8004474 <__ssputs_r+0x70>
 80044ae:	6921      	ldr	r1, [r4, #16]
 80044b0:	4650      	mov	r0, sl
 80044b2:	f000 faa5 	bl	8004a00 <_free_r>
 80044b6:	e7c8      	b.n	800444a <__ssputs_r+0x46>

080044b8 <_svfiprintf_r>:
 80044b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044bc:	461d      	mov	r5, r3
 80044be:	898b      	ldrh	r3, [r1, #12]
 80044c0:	061f      	lsls	r7, r3, #24
 80044c2:	b09d      	sub	sp, #116	; 0x74
 80044c4:	4680      	mov	r8, r0
 80044c6:	460c      	mov	r4, r1
 80044c8:	4616      	mov	r6, r2
 80044ca:	d50f      	bpl.n	80044ec <_svfiprintf_r+0x34>
 80044cc:	690b      	ldr	r3, [r1, #16]
 80044ce:	b96b      	cbnz	r3, 80044ec <_svfiprintf_r+0x34>
 80044d0:	2140      	movs	r1, #64	; 0x40
 80044d2:	f000 fae3 	bl	8004a9c <_malloc_r>
 80044d6:	6020      	str	r0, [r4, #0]
 80044d8:	6120      	str	r0, [r4, #16]
 80044da:	b928      	cbnz	r0, 80044e8 <_svfiprintf_r+0x30>
 80044dc:	230c      	movs	r3, #12
 80044de:	f8c8 3000 	str.w	r3, [r8]
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	e0c8      	b.n	800467a <_svfiprintf_r+0x1c2>
 80044e8:	2340      	movs	r3, #64	; 0x40
 80044ea:	6163      	str	r3, [r4, #20]
 80044ec:	2300      	movs	r3, #0
 80044ee:	9309      	str	r3, [sp, #36]	; 0x24
 80044f0:	2320      	movs	r3, #32
 80044f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044f6:	2330      	movs	r3, #48	; 0x30
 80044f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044fc:	9503      	str	r5, [sp, #12]
 80044fe:	f04f 0b01 	mov.w	fp, #1
 8004502:	4637      	mov	r7, r6
 8004504:	463d      	mov	r5, r7
 8004506:	f815 3b01 	ldrb.w	r3, [r5], #1
 800450a:	b10b      	cbz	r3, 8004510 <_svfiprintf_r+0x58>
 800450c:	2b25      	cmp	r3, #37	; 0x25
 800450e:	d13e      	bne.n	800458e <_svfiprintf_r+0xd6>
 8004510:	ebb7 0a06 	subs.w	sl, r7, r6
 8004514:	d00b      	beq.n	800452e <_svfiprintf_r+0x76>
 8004516:	4653      	mov	r3, sl
 8004518:	4632      	mov	r2, r6
 800451a:	4621      	mov	r1, r4
 800451c:	4640      	mov	r0, r8
 800451e:	f7ff ff71 	bl	8004404 <__ssputs_r>
 8004522:	3001      	adds	r0, #1
 8004524:	f000 80a4 	beq.w	8004670 <_svfiprintf_r+0x1b8>
 8004528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800452a:	4453      	add	r3, sl
 800452c:	9309      	str	r3, [sp, #36]	; 0x24
 800452e:	783b      	ldrb	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 809d 	beq.w	8004670 <_svfiprintf_r+0x1b8>
 8004536:	2300      	movs	r3, #0
 8004538:	f04f 32ff 	mov.w	r2, #4294967295
 800453c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004540:	9304      	str	r3, [sp, #16]
 8004542:	9307      	str	r3, [sp, #28]
 8004544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004548:	931a      	str	r3, [sp, #104]	; 0x68
 800454a:	462f      	mov	r7, r5
 800454c:	2205      	movs	r2, #5
 800454e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004552:	4850      	ldr	r0, [pc, #320]	; (8004694 <_svfiprintf_r+0x1dc>)
 8004554:	f7fb fe44 	bl	80001e0 <memchr>
 8004558:	9b04      	ldr	r3, [sp, #16]
 800455a:	b9d0      	cbnz	r0, 8004592 <_svfiprintf_r+0xda>
 800455c:	06d9      	lsls	r1, r3, #27
 800455e:	bf44      	itt	mi
 8004560:	2220      	movmi	r2, #32
 8004562:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004566:	071a      	lsls	r2, r3, #28
 8004568:	bf44      	itt	mi
 800456a:	222b      	movmi	r2, #43	; 0x2b
 800456c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004570:	782a      	ldrb	r2, [r5, #0]
 8004572:	2a2a      	cmp	r2, #42	; 0x2a
 8004574:	d015      	beq.n	80045a2 <_svfiprintf_r+0xea>
 8004576:	9a07      	ldr	r2, [sp, #28]
 8004578:	462f      	mov	r7, r5
 800457a:	2000      	movs	r0, #0
 800457c:	250a      	movs	r5, #10
 800457e:	4639      	mov	r1, r7
 8004580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004584:	3b30      	subs	r3, #48	; 0x30
 8004586:	2b09      	cmp	r3, #9
 8004588:	d94d      	bls.n	8004626 <_svfiprintf_r+0x16e>
 800458a:	b1b8      	cbz	r0, 80045bc <_svfiprintf_r+0x104>
 800458c:	e00f      	b.n	80045ae <_svfiprintf_r+0xf6>
 800458e:	462f      	mov	r7, r5
 8004590:	e7b8      	b.n	8004504 <_svfiprintf_r+0x4c>
 8004592:	4a40      	ldr	r2, [pc, #256]	; (8004694 <_svfiprintf_r+0x1dc>)
 8004594:	1a80      	subs	r0, r0, r2
 8004596:	fa0b f000 	lsl.w	r0, fp, r0
 800459a:	4318      	orrs	r0, r3
 800459c:	9004      	str	r0, [sp, #16]
 800459e:	463d      	mov	r5, r7
 80045a0:	e7d3      	b.n	800454a <_svfiprintf_r+0x92>
 80045a2:	9a03      	ldr	r2, [sp, #12]
 80045a4:	1d11      	adds	r1, r2, #4
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	9103      	str	r1, [sp, #12]
 80045aa:	2a00      	cmp	r2, #0
 80045ac:	db01      	blt.n	80045b2 <_svfiprintf_r+0xfa>
 80045ae:	9207      	str	r2, [sp, #28]
 80045b0:	e004      	b.n	80045bc <_svfiprintf_r+0x104>
 80045b2:	4252      	negs	r2, r2
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	9207      	str	r2, [sp, #28]
 80045ba:	9304      	str	r3, [sp, #16]
 80045bc:	783b      	ldrb	r3, [r7, #0]
 80045be:	2b2e      	cmp	r3, #46	; 0x2e
 80045c0:	d10c      	bne.n	80045dc <_svfiprintf_r+0x124>
 80045c2:	787b      	ldrb	r3, [r7, #1]
 80045c4:	2b2a      	cmp	r3, #42	; 0x2a
 80045c6:	d133      	bne.n	8004630 <_svfiprintf_r+0x178>
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	1d1a      	adds	r2, r3, #4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	9203      	str	r2, [sp, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bfb8      	it	lt
 80045d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80045d8:	3702      	adds	r7, #2
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	4d2e      	ldr	r5, [pc, #184]	; (8004698 <_svfiprintf_r+0x1e0>)
 80045de:	7839      	ldrb	r1, [r7, #0]
 80045e0:	2203      	movs	r2, #3
 80045e2:	4628      	mov	r0, r5
 80045e4:	f7fb fdfc 	bl	80001e0 <memchr>
 80045e8:	b138      	cbz	r0, 80045fa <_svfiprintf_r+0x142>
 80045ea:	2340      	movs	r3, #64	; 0x40
 80045ec:	1b40      	subs	r0, r0, r5
 80045ee:	fa03 f000 	lsl.w	r0, r3, r0
 80045f2:	9b04      	ldr	r3, [sp, #16]
 80045f4:	4303      	orrs	r3, r0
 80045f6:	3701      	adds	r7, #1
 80045f8:	9304      	str	r3, [sp, #16]
 80045fa:	7839      	ldrb	r1, [r7, #0]
 80045fc:	4827      	ldr	r0, [pc, #156]	; (800469c <_svfiprintf_r+0x1e4>)
 80045fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004602:	2206      	movs	r2, #6
 8004604:	1c7e      	adds	r6, r7, #1
 8004606:	f7fb fdeb 	bl	80001e0 <memchr>
 800460a:	2800      	cmp	r0, #0
 800460c:	d038      	beq.n	8004680 <_svfiprintf_r+0x1c8>
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <_svfiprintf_r+0x1e8>)
 8004610:	bb13      	cbnz	r3, 8004658 <_svfiprintf_r+0x1a0>
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	3307      	adds	r3, #7
 8004616:	f023 0307 	bic.w	r3, r3, #7
 800461a:	3308      	adds	r3, #8
 800461c:	9303      	str	r3, [sp, #12]
 800461e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004620:	444b      	add	r3, r9
 8004622:	9309      	str	r3, [sp, #36]	; 0x24
 8004624:	e76d      	b.n	8004502 <_svfiprintf_r+0x4a>
 8004626:	fb05 3202 	mla	r2, r5, r2, r3
 800462a:	2001      	movs	r0, #1
 800462c:	460f      	mov	r7, r1
 800462e:	e7a6      	b.n	800457e <_svfiprintf_r+0xc6>
 8004630:	2300      	movs	r3, #0
 8004632:	3701      	adds	r7, #1
 8004634:	9305      	str	r3, [sp, #20]
 8004636:	4619      	mov	r1, r3
 8004638:	250a      	movs	r5, #10
 800463a:	4638      	mov	r0, r7
 800463c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004640:	3a30      	subs	r2, #48	; 0x30
 8004642:	2a09      	cmp	r2, #9
 8004644:	d903      	bls.n	800464e <_svfiprintf_r+0x196>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0c8      	beq.n	80045dc <_svfiprintf_r+0x124>
 800464a:	9105      	str	r1, [sp, #20]
 800464c:	e7c6      	b.n	80045dc <_svfiprintf_r+0x124>
 800464e:	fb05 2101 	mla	r1, r5, r1, r2
 8004652:	2301      	movs	r3, #1
 8004654:	4607      	mov	r7, r0
 8004656:	e7f0      	b.n	800463a <_svfiprintf_r+0x182>
 8004658:	ab03      	add	r3, sp, #12
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	4622      	mov	r2, r4
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <_svfiprintf_r+0x1ec>)
 8004660:	a904      	add	r1, sp, #16
 8004662:	4640      	mov	r0, r8
 8004664:	f3af 8000 	nop.w
 8004668:	f1b0 3fff 	cmp.w	r0, #4294967295
 800466c:	4681      	mov	r9, r0
 800466e:	d1d6      	bne.n	800461e <_svfiprintf_r+0x166>
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	065b      	lsls	r3, r3, #25
 8004674:	f53f af35 	bmi.w	80044e2 <_svfiprintf_r+0x2a>
 8004678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800467a:	b01d      	add	sp, #116	; 0x74
 800467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004680:	ab03      	add	r3, sp, #12
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	4622      	mov	r2, r4
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <_svfiprintf_r+0x1ec>)
 8004688:	a904      	add	r1, sp, #16
 800468a:	4640      	mov	r0, r8
 800468c:	f000 f882 	bl	8004794 <_printf_i>
 8004690:	e7ea      	b.n	8004668 <_svfiprintf_r+0x1b0>
 8004692:	bf00      	nop
 8004694:	08005012 	.word	0x08005012
 8004698:	08005018 	.word	0x08005018
 800469c:	0800501c 	.word	0x0800501c
 80046a0:	00000000 	.word	0x00000000
 80046a4:	08004405 	.word	0x08004405

080046a8 <_printf_common>:
 80046a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ac:	4691      	mov	r9, r2
 80046ae:	461f      	mov	r7, r3
 80046b0:	688a      	ldr	r2, [r1, #8]
 80046b2:	690b      	ldr	r3, [r1, #16]
 80046b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bfb8      	it	lt
 80046bc:	4613      	movlt	r3, r2
 80046be:	f8c9 3000 	str.w	r3, [r9]
 80046c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046c6:	4606      	mov	r6, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	b112      	cbz	r2, 80046d2 <_printf_common+0x2a>
 80046cc:	3301      	adds	r3, #1
 80046ce:	f8c9 3000 	str.w	r3, [r9]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0699      	lsls	r1, r3, #26
 80046d6:	bf42      	ittt	mi
 80046d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80046dc:	3302      	addmi	r3, #2
 80046de:	f8c9 3000 	strmi.w	r3, [r9]
 80046e2:	6825      	ldr	r5, [r4, #0]
 80046e4:	f015 0506 	ands.w	r5, r5, #6
 80046e8:	d107      	bne.n	80046fa <_printf_common+0x52>
 80046ea:	f104 0a19 	add.w	sl, r4, #25
 80046ee:	68e3      	ldr	r3, [r4, #12]
 80046f0:	f8d9 2000 	ldr.w	r2, [r9]
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	42ab      	cmp	r3, r5
 80046f8:	dc28      	bgt.n	800474c <_printf_common+0xa4>
 80046fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	3300      	adds	r3, #0
 8004702:	bf18      	it	ne
 8004704:	2301      	movne	r3, #1
 8004706:	0692      	lsls	r2, r2, #26
 8004708:	d42d      	bmi.n	8004766 <_printf_common+0xbe>
 800470a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800470e:	4639      	mov	r1, r7
 8004710:	4630      	mov	r0, r6
 8004712:	47c0      	blx	r8
 8004714:	3001      	adds	r0, #1
 8004716:	d020      	beq.n	800475a <_printf_common+0xb2>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	68e5      	ldr	r5, [r4, #12]
 800471c:	f8d9 2000 	ldr.w	r2, [r9]
 8004720:	f003 0306 	and.w	r3, r3, #6
 8004724:	2b04      	cmp	r3, #4
 8004726:	bf08      	it	eq
 8004728:	1aad      	subeq	r5, r5, r2
 800472a:	68a3      	ldr	r3, [r4, #8]
 800472c:	6922      	ldr	r2, [r4, #16]
 800472e:	bf0c      	ite	eq
 8004730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004734:	2500      	movne	r5, #0
 8004736:	4293      	cmp	r3, r2
 8004738:	bfc4      	itt	gt
 800473a:	1a9b      	subgt	r3, r3, r2
 800473c:	18ed      	addgt	r5, r5, r3
 800473e:	f04f 0900 	mov.w	r9, #0
 8004742:	341a      	adds	r4, #26
 8004744:	454d      	cmp	r5, r9
 8004746:	d11a      	bne.n	800477e <_printf_common+0xd6>
 8004748:	2000      	movs	r0, #0
 800474a:	e008      	b.n	800475e <_printf_common+0xb6>
 800474c:	2301      	movs	r3, #1
 800474e:	4652      	mov	r2, sl
 8004750:	4639      	mov	r1, r7
 8004752:	4630      	mov	r0, r6
 8004754:	47c0      	blx	r8
 8004756:	3001      	adds	r0, #1
 8004758:	d103      	bne.n	8004762 <_printf_common+0xba>
 800475a:	f04f 30ff 	mov.w	r0, #4294967295
 800475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004762:	3501      	adds	r5, #1
 8004764:	e7c3      	b.n	80046ee <_printf_common+0x46>
 8004766:	18e1      	adds	r1, r4, r3
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	2030      	movs	r0, #48	; 0x30
 800476c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004770:	4422      	add	r2, r4
 8004772:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004776:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800477a:	3302      	adds	r3, #2
 800477c:	e7c5      	b.n	800470a <_printf_common+0x62>
 800477e:	2301      	movs	r3, #1
 8004780:	4622      	mov	r2, r4
 8004782:	4639      	mov	r1, r7
 8004784:	4630      	mov	r0, r6
 8004786:	47c0      	blx	r8
 8004788:	3001      	adds	r0, #1
 800478a:	d0e6      	beq.n	800475a <_printf_common+0xb2>
 800478c:	f109 0901 	add.w	r9, r9, #1
 8004790:	e7d8      	b.n	8004744 <_printf_common+0x9c>
	...

08004794 <_printf_i>:
 8004794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004798:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800479c:	460c      	mov	r4, r1
 800479e:	7e09      	ldrb	r1, [r1, #24]
 80047a0:	b085      	sub	sp, #20
 80047a2:	296e      	cmp	r1, #110	; 0x6e
 80047a4:	4617      	mov	r7, r2
 80047a6:	4606      	mov	r6, r0
 80047a8:	4698      	mov	r8, r3
 80047aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047ac:	f000 80b3 	beq.w	8004916 <_printf_i+0x182>
 80047b0:	d822      	bhi.n	80047f8 <_printf_i+0x64>
 80047b2:	2963      	cmp	r1, #99	; 0x63
 80047b4:	d036      	beq.n	8004824 <_printf_i+0x90>
 80047b6:	d80a      	bhi.n	80047ce <_printf_i+0x3a>
 80047b8:	2900      	cmp	r1, #0
 80047ba:	f000 80b9 	beq.w	8004930 <_printf_i+0x19c>
 80047be:	2958      	cmp	r1, #88	; 0x58
 80047c0:	f000 8083 	beq.w	80048ca <_printf_i+0x136>
 80047c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80047cc:	e032      	b.n	8004834 <_printf_i+0xa0>
 80047ce:	2964      	cmp	r1, #100	; 0x64
 80047d0:	d001      	beq.n	80047d6 <_printf_i+0x42>
 80047d2:	2969      	cmp	r1, #105	; 0x69
 80047d4:	d1f6      	bne.n	80047c4 <_printf_i+0x30>
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	6813      	ldr	r3, [r2, #0]
 80047da:	0605      	lsls	r5, r0, #24
 80047dc:	f103 0104 	add.w	r1, r3, #4
 80047e0:	d52a      	bpl.n	8004838 <_printf_i+0xa4>
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6011      	str	r1, [r2, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	da03      	bge.n	80047f2 <_printf_i+0x5e>
 80047ea:	222d      	movs	r2, #45	; 0x2d
 80047ec:	425b      	negs	r3, r3
 80047ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80047f2:	486f      	ldr	r0, [pc, #444]	; (80049b0 <_printf_i+0x21c>)
 80047f4:	220a      	movs	r2, #10
 80047f6:	e039      	b.n	800486c <_printf_i+0xd8>
 80047f8:	2973      	cmp	r1, #115	; 0x73
 80047fa:	f000 809d 	beq.w	8004938 <_printf_i+0x1a4>
 80047fe:	d808      	bhi.n	8004812 <_printf_i+0x7e>
 8004800:	296f      	cmp	r1, #111	; 0x6f
 8004802:	d020      	beq.n	8004846 <_printf_i+0xb2>
 8004804:	2970      	cmp	r1, #112	; 0x70
 8004806:	d1dd      	bne.n	80047c4 <_printf_i+0x30>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f043 0320 	orr.w	r3, r3, #32
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	e003      	b.n	800481a <_printf_i+0x86>
 8004812:	2975      	cmp	r1, #117	; 0x75
 8004814:	d017      	beq.n	8004846 <_printf_i+0xb2>
 8004816:	2978      	cmp	r1, #120	; 0x78
 8004818:	d1d4      	bne.n	80047c4 <_printf_i+0x30>
 800481a:	2378      	movs	r3, #120	; 0x78
 800481c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004820:	4864      	ldr	r0, [pc, #400]	; (80049b4 <_printf_i+0x220>)
 8004822:	e055      	b.n	80048d0 <_printf_i+0x13c>
 8004824:	6813      	ldr	r3, [r2, #0]
 8004826:	1d19      	adds	r1, r3, #4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6011      	str	r1, [r2, #0]
 800482c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004834:	2301      	movs	r3, #1
 8004836:	e08c      	b.n	8004952 <_printf_i+0x1be>
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6011      	str	r1, [r2, #0]
 800483c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004840:	bf18      	it	ne
 8004842:	b21b      	sxthne	r3, r3
 8004844:	e7cf      	b.n	80047e6 <_printf_i+0x52>
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	6825      	ldr	r5, [r4, #0]
 800484a:	1d18      	adds	r0, r3, #4
 800484c:	6010      	str	r0, [r2, #0]
 800484e:	0628      	lsls	r0, r5, #24
 8004850:	d501      	bpl.n	8004856 <_printf_i+0xc2>
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	e002      	b.n	800485c <_printf_i+0xc8>
 8004856:	0668      	lsls	r0, r5, #25
 8004858:	d5fb      	bpl.n	8004852 <_printf_i+0xbe>
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	4854      	ldr	r0, [pc, #336]	; (80049b0 <_printf_i+0x21c>)
 800485e:	296f      	cmp	r1, #111	; 0x6f
 8004860:	bf14      	ite	ne
 8004862:	220a      	movne	r2, #10
 8004864:	2208      	moveq	r2, #8
 8004866:	2100      	movs	r1, #0
 8004868:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800486c:	6865      	ldr	r5, [r4, #4]
 800486e:	60a5      	str	r5, [r4, #8]
 8004870:	2d00      	cmp	r5, #0
 8004872:	f2c0 8095 	blt.w	80049a0 <_printf_i+0x20c>
 8004876:	6821      	ldr	r1, [r4, #0]
 8004878:	f021 0104 	bic.w	r1, r1, #4
 800487c:	6021      	str	r1, [r4, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d13d      	bne.n	80048fe <_printf_i+0x16a>
 8004882:	2d00      	cmp	r5, #0
 8004884:	f040 808e 	bne.w	80049a4 <_printf_i+0x210>
 8004888:	4665      	mov	r5, ip
 800488a:	2a08      	cmp	r2, #8
 800488c:	d10b      	bne.n	80048a6 <_printf_i+0x112>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	07db      	lsls	r3, r3, #31
 8004892:	d508      	bpl.n	80048a6 <_printf_i+0x112>
 8004894:	6923      	ldr	r3, [r4, #16]
 8004896:	6862      	ldr	r2, [r4, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	bfde      	ittt	le
 800489c:	2330      	movle	r3, #48	; 0x30
 800489e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048a6:	ebac 0305 	sub.w	r3, ip, r5
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	f8cd 8000 	str.w	r8, [sp]
 80048b0:	463b      	mov	r3, r7
 80048b2:	aa03      	add	r2, sp, #12
 80048b4:	4621      	mov	r1, r4
 80048b6:	4630      	mov	r0, r6
 80048b8:	f7ff fef6 	bl	80046a8 <_printf_common>
 80048bc:	3001      	adds	r0, #1
 80048be:	d14d      	bne.n	800495c <_printf_i+0x1c8>
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	b005      	add	sp, #20
 80048c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048ca:	4839      	ldr	r0, [pc, #228]	; (80049b0 <_printf_i+0x21c>)
 80048cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80048d0:	6813      	ldr	r3, [r2, #0]
 80048d2:	6821      	ldr	r1, [r4, #0]
 80048d4:	1d1d      	adds	r5, r3, #4
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6015      	str	r5, [r2, #0]
 80048da:	060a      	lsls	r2, r1, #24
 80048dc:	d50b      	bpl.n	80048f6 <_printf_i+0x162>
 80048de:	07ca      	lsls	r2, r1, #31
 80048e0:	bf44      	itt	mi
 80048e2:	f041 0120 	orrmi.w	r1, r1, #32
 80048e6:	6021      	strmi	r1, [r4, #0]
 80048e8:	b91b      	cbnz	r3, 80048f2 <_printf_i+0x15e>
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	f022 0220 	bic.w	r2, r2, #32
 80048f0:	6022      	str	r2, [r4, #0]
 80048f2:	2210      	movs	r2, #16
 80048f4:	e7b7      	b.n	8004866 <_printf_i+0xd2>
 80048f6:	064d      	lsls	r5, r1, #25
 80048f8:	bf48      	it	mi
 80048fa:	b29b      	uxthmi	r3, r3
 80048fc:	e7ef      	b.n	80048de <_printf_i+0x14a>
 80048fe:	4665      	mov	r5, ip
 8004900:	fbb3 f1f2 	udiv	r1, r3, r2
 8004904:	fb02 3311 	mls	r3, r2, r1, r3
 8004908:	5cc3      	ldrb	r3, [r0, r3]
 800490a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800490e:	460b      	mov	r3, r1
 8004910:	2900      	cmp	r1, #0
 8004912:	d1f5      	bne.n	8004900 <_printf_i+0x16c>
 8004914:	e7b9      	b.n	800488a <_printf_i+0xf6>
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	6825      	ldr	r5, [r4, #0]
 800491a:	6961      	ldr	r1, [r4, #20]
 800491c:	1d18      	adds	r0, r3, #4
 800491e:	6010      	str	r0, [r2, #0]
 8004920:	0628      	lsls	r0, r5, #24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	d501      	bpl.n	800492a <_printf_i+0x196>
 8004926:	6019      	str	r1, [r3, #0]
 8004928:	e002      	b.n	8004930 <_printf_i+0x19c>
 800492a:	066a      	lsls	r2, r5, #25
 800492c:	d5fb      	bpl.n	8004926 <_printf_i+0x192>
 800492e:	8019      	strh	r1, [r3, #0]
 8004930:	2300      	movs	r3, #0
 8004932:	6123      	str	r3, [r4, #16]
 8004934:	4665      	mov	r5, ip
 8004936:	e7b9      	b.n	80048ac <_printf_i+0x118>
 8004938:	6813      	ldr	r3, [r2, #0]
 800493a:	1d19      	adds	r1, r3, #4
 800493c:	6011      	str	r1, [r2, #0]
 800493e:	681d      	ldr	r5, [r3, #0]
 8004940:	6862      	ldr	r2, [r4, #4]
 8004942:	2100      	movs	r1, #0
 8004944:	4628      	mov	r0, r5
 8004946:	f7fb fc4b 	bl	80001e0 <memchr>
 800494a:	b108      	cbz	r0, 8004950 <_printf_i+0x1bc>
 800494c:	1b40      	subs	r0, r0, r5
 800494e:	6060      	str	r0, [r4, #4]
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	2300      	movs	r3, #0
 8004956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495a:	e7a7      	b.n	80048ac <_printf_i+0x118>
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	462a      	mov	r2, r5
 8004960:	4639      	mov	r1, r7
 8004962:	4630      	mov	r0, r6
 8004964:	47c0      	blx	r8
 8004966:	3001      	adds	r0, #1
 8004968:	d0aa      	beq.n	80048c0 <_printf_i+0x12c>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	079b      	lsls	r3, r3, #30
 800496e:	d413      	bmi.n	8004998 <_printf_i+0x204>
 8004970:	68e0      	ldr	r0, [r4, #12]
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	4298      	cmp	r0, r3
 8004976:	bfb8      	it	lt
 8004978:	4618      	movlt	r0, r3
 800497a:	e7a3      	b.n	80048c4 <_printf_i+0x130>
 800497c:	2301      	movs	r3, #1
 800497e:	464a      	mov	r2, r9
 8004980:	4639      	mov	r1, r7
 8004982:	4630      	mov	r0, r6
 8004984:	47c0      	blx	r8
 8004986:	3001      	adds	r0, #1
 8004988:	d09a      	beq.n	80048c0 <_printf_i+0x12c>
 800498a:	3501      	adds	r5, #1
 800498c:	68e3      	ldr	r3, [r4, #12]
 800498e:	9a03      	ldr	r2, [sp, #12]
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	42ab      	cmp	r3, r5
 8004994:	dcf2      	bgt.n	800497c <_printf_i+0x1e8>
 8004996:	e7eb      	b.n	8004970 <_printf_i+0x1dc>
 8004998:	2500      	movs	r5, #0
 800499a:	f104 0919 	add.w	r9, r4, #25
 800499e:	e7f5      	b.n	800498c <_printf_i+0x1f8>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ac      	bne.n	80048fe <_printf_i+0x16a>
 80049a4:	7803      	ldrb	r3, [r0, #0]
 80049a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ae:	e76c      	b.n	800488a <_printf_i+0xf6>
 80049b0:	08005023 	.word	0x08005023
 80049b4:	08005034 	.word	0x08005034

080049b8 <memcpy>:
 80049b8:	b510      	push	{r4, lr}
 80049ba:	1e43      	subs	r3, r0, #1
 80049bc:	440a      	add	r2, r1
 80049be:	4291      	cmp	r1, r2
 80049c0:	d100      	bne.n	80049c4 <memcpy+0xc>
 80049c2:	bd10      	pop	{r4, pc}
 80049c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049cc:	e7f7      	b.n	80049be <memcpy+0x6>

080049ce <memmove>:
 80049ce:	4288      	cmp	r0, r1
 80049d0:	b510      	push	{r4, lr}
 80049d2:	eb01 0302 	add.w	r3, r1, r2
 80049d6:	d807      	bhi.n	80049e8 <memmove+0x1a>
 80049d8:	1e42      	subs	r2, r0, #1
 80049da:	4299      	cmp	r1, r3
 80049dc:	d00a      	beq.n	80049f4 <memmove+0x26>
 80049de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80049e6:	e7f8      	b.n	80049da <memmove+0xc>
 80049e8:	4283      	cmp	r3, r0
 80049ea:	d9f5      	bls.n	80049d8 <memmove+0xa>
 80049ec:	1881      	adds	r1, r0, r2
 80049ee:	1ad2      	subs	r2, r2, r3
 80049f0:	42d3      	cmn	r3, r2
 80049f2:	d100      	bne.n	80049f6 <memmove+0x28>
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80049fe:	e7f7      	b.n	80049f0 <memmove+0x22>

08004a00 <_free_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4605      	mov	r5, r0
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d045      	beq.n	8004a94 <_free_r+0x94>
 8004a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0c:	1f0c      	subs	r4, r1, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfb8      	it	lt
 8004a12:	18e4      	addlt	r4, r4, r3
 8004a14:	f000 f8d2 	bl	8004bbc <__malloc_lock>
 8004a18:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <_free_r+0x98>)
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	b933      	cbnz	r3, 8004a2e <_free_r+0x2e>
 8004a20:	6063      	str	r3, [r4, #4]
 8004a22:	6014      	str	r4, [r2, #0]
 8004a24:	4628      	mov	r0, r5
 8004a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2a:	f000 b8c8 	b.w	8004bbe <__malloc_unlock>
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	d90c      	bls.n	8004a4c <_free_r+0x4c>
 8004a32:	6821      	ldr	r1, [r4, #0]
 8004a34:	1862      	adds	r2, r4, r1
 8004a36:	4293      	cmp	r3, r2
 8004a38:	bf04      	itt	eq
 8004a3a:	681a      	ldreq	r2, [r3, #0]
 8004a3c:	685b      	ldreq	r3, [r3, #4]
 8004a3e:	6063      	str	r3, [r4, #4]
 8004a40:	bf04      	itt	eq
 8004a42:	1852      	addeq	r2, r2, r1
 8004a44:	6022      	streq	r2, [r4, #0]
 8004a46:	6004      	str	r4, [r0, #0]
 8004a48:	e7ec      	b.n	8004a24 <_free_r+0x24>
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	b10a      	cbz	r2, 8004a54 <_free_r+0x54>
 8004a50:	42a2      	cmp	r2, r4
 8004a52:	d9fa      	bls.n	8004a4a <_free_r+0x4a>
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	1858      	adds	r0, r3, r1
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d10b      	bne.n	8004a74 <_free_r+0x74>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	4401      	add	r1, r0
 8004a60:	1858      	adds	r0, r3, r1
 8004a62:	4282      	cmp	r2, r0
 8004a64:	6019      	str	r1, [r3, #0]
 8004a66:	d1dd      	bne.n	8004a24 <_free_r+0x24>
 8004a68:	6810      	ldr	r0, [r2, #0]
 8004a6a:	6852      	ldr	r2, [r2, #4]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	4401      	add	r1, r0
 8004a70:	6019      	str	r1, [r3, #0]
 8004a72:	e7d7      	b.n	8004a24 <_free_r+0x24>
 8004a74:	d902      	bls.n	8004a7c <_free_r+0x7c>
 8004a76:	230c      	movs	r3, #12
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	e7d3      	b.n	8004a24 <_free_r+0x24>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	1821      	adds	r1, r4, r0
 8004a80:	428a      	cmp	r2, r1
 8004a82:	bf04      	itt	eq
 8004a84:	6811      	ldreq	r1, [r2, #0]
 8004a86:	6852      	ldreq	r2, [r2, #4]
 8004a88:	6062      	str	r2, [r4, #4]
 8004a8a:	bf04      	itt	eq
 8004a8c:	1809      	addeq	r1, r1, r0
 8004a8e:	6021      	streq	r1, [r4, #0]
 8004a90:	605c      	str	r4, [r3, #4]
 8004a92:	e7c7      	b.n	8004a24 <_free_r+0x24>
 8004a94:	bd38      	pop	{r3, r4, r5, pc}
 8004a96:	bf00      	nop
 8004a98:	20000094 	.word	0x20000094

08004a9c <_malloc_r>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	1ccd      	adds	r5, r1, #3
 8004aa0:	f025 0503 	bic.w	r5, r5, #3
 8004aa4:	3508      	adds	r5, #8
 8004aa6:	2d0c      	cmp	r5, #12
 8004aa8:	bf38      	it	cc
 8004aaa:	250c      	movcc	r5, #12
 8004aac:	2d00      	cmp	r5, #0
 8004aae:	4606      	mov	r6, r0
 8004ab0:	db01      	blt.n	8004ab6 <_malloc_r+0x1a>
 8004ab2:	42a9      	cmp	r1, r5
 8004ab4:	d903      	bls.n	8004abe <_malloc_r+0x22>
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	2000      	movs	r0, #0
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
 8004abe:	f000 f87d 	bl	8004bbc <__malloc_lock>
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <_malloc_r+0xac>)
 8004ac4:	6814      	ldr	r4, [r2, #0]
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	b991      	cbnz	r1, 8004af0 <_malloc_r+0x54>
 8004aca:	4c20      	ldr	r4, [pc, #128]	; (8004b4c <_malloc_r+0xb0>)
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	b91b      	cbnz	r3, 8004ad8 <_malloc_r+0x3c>
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 f863 	bl	8004b9c <_sbrk_r>
 8004ad6:	6020      	str	r0, [r4, #0]
 8004ad8:	4629      	mov	r1, r5
 8004ada:	4630      	mov	r0, r6
 8004adc:	f000 f85e 	bl	8004b9c <_sbrk_r>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d124      	bne.n	8004b2e <_malloc_r+0x92>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	6033      	str	r3, [r6, #0]
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f000 f868 	bl	8004bbe <__malloc_unlock>
 8004aee:	e7e4      	b.n	8004aba <_malloc_r+0x1e>
 8004af0:	680b      	ldr	r3, [r1, #0]
 8004af2:	1b5b      	subs	r3, r3, r5
 8004af4:	d418      	bmi.n	8004b28 <_malloc_r+0x8c>
 8004af6:	2b0b      	cmp	r3, #11
 8004af8:	d90f      	bls.n	8004b1a <_malloc_r+0x7e>
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	50cd      	str	r5, [r1, r3]
 8004afe:	18cc      	adds	r4, r1, r3
 8004b00:	4630      	mov	r0, r6
 8004b02:	f000 f85c 	bl	8004bbe <__malloc_unlock>
 8004b06:	f104 000b 	add.w	r0, r4, #11
 8004b0a:	1d23      	adds	r3, r4, #4
 8004b0c:	f020 0007 	bic.w	r0, r0, #7
 8004b10:	1ac3      	subs	r3, r0, r3
 8004b12:	d0d3      	beq.n	8004abc <_malloc_r+0x20>
 8004b14:	425a      	negs	r2, r3
 8004b16:	50e2      	str	r2, [r4, r3]
 8004b18:	e7d0      	b.n	8004abc <_malloc_r+0x20>
 8004b1a:	428c      	cmp	r4, r1
 8004b1c:	684b      	ldr	r3, [r1, #4]
 8004b1e:	bf16      	itet	ne
 8004b20:	6063      	strne	r3, [r4, #4]
 8004b22:	6013      	streq	r3, [r2, #0]
 8004b24:	460c      	movne	r4, r1
 8004b26:	e7eb      	b.n	8004b00 <_malloc_r+0x64>
 8004b28:	460c      	mov	r4, r1
 8004b2a:	6849      	ldr	r1, [r1, #4]
 8004b2c:	e7cc      	b.n	8004ac8 <_malloc_r+0x2c>
 8004b2e:	1cc4      	adds	r4, r0, #3
 8004b30:	f024 0403 	bic.w	r4, r4, #3
 8004b34:	42a0      	cmp	r0, r4
 8004b36:	d005      	beq.n	8004b44 <_malloc_r+0xa8>
 8004b38:	1a21      	subs	r1, r4, r0
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f000 f82e 	bl	8004b9c <_sbrk_r>
 8004b40:	3001      	adds	r0, #1
 8004b42:	d0cf      	beq.n	8004ae4 <_malloc_r+0x48>
 8004b44:	6025      	str	r5, [r4, #0]
 8004b46:	e7db      	b.n	8004b00 <_malloc_r+0x64>
 8004b48:	20000094 	.word	0x20000094
 8004b4c:	20000098 	.word	0x20000098

08004b50 <_realloc_r>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	4607      	mov	r7, r0
 8004b54:	4614      	mov	r4, r2
 8004b56:	460e      	mov	r6, r1
 8004b58:	b921      	cbnz	r1, 8004b64 <_realloc_r+0x14>
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b60:	f7ff bf9c 	b.w	8004a9c <_malloc_r>
 8004b64:	b922      	cbnz	r2, 8004b70 <_realloc_r+0x20>
 8004b66:	f7ff ff4b 	bl	8004a00 <_free_r>
 8004b6a:	4625      	mov	r5, r4
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b70:	f000 f826 	bl	8004bc0 <_malloc_usable_size_r>
 8004b74:	42a0      	cmp	r0, r4
 8004b76:	d20f      	bcs.n	8004b98 <_realloc_r+0x48>
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	f7ff ff8e 	bl	8004a9c <_malloc_r>
 8004b80:	4605      	mov	r5, r0
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d0f2      	beq.n	8004b6c <_realloc_r+0x1c>
 8004b86:	4631      	mov	r1, r6
 8004b88:	4622      	mov	r2, r4
 8004b8a:	f7ff ff15 	bl	80049b8 <memcpy>
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff ff35 	bl	8004a00 <_free_r>
 8004b96:	e7e9      	b.n	8004b6c <_realloc_r+0x1c>
 8004b98:	4635      	mov	r5, r6
 8004b9a:	e7e7      	b.n	8004b6c <_realloc_r+0x1c>

08004b9c <_sbrk_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4c06      	ldr	r4, [pc, #24]	; (8004bb8 <_sbrk_r+0x1c>)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	f7fe feda 	bl	8003960 <_sbrk>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d102      	bne.n	8004bb6 <_sbrk_r+0x1a>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	b103      	cbz	r3, 8004bb6 <_sbrk_r+0x1a>
 8004bb4:	602b      	str	r3, [r5, #0]
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	200001c4 	.word	0x200001c4

08004bbc <__malloc_lock>:
 8004bbc:	4770      	bx	lr

08004bbe <__malloc_unlock>:
 8004bbe:	4770      	bx	lr

08004bc0 <_malloc_usable_size_r>:
 8004bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc4:	1f18      	subs	r0, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bfbc      	itt	lt
 8004bca:	580b      	ldrlt	r3, [r1, r0]
 8004bcc:	18c0      	addlt	r0, r0, r3
 8004bce:	4770      	bx	lr

08004bd0 <_init>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr

08004bdc <_fini>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr
