
Logger_303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007018  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007688  08007688  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007690  08007690  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  08007708  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08007708  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b95c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000300a  00000000  00000000  0003b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  0003ea08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001068  00000000  00000000  0003fba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a45d  00000000  00000000  00040c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f901  00000000  00000000  0005b06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ba38  00000000  00000000  0006a96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f63a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  000f6424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007190 	.word	0x08007190

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007190 	.word	0x08007190

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9a5 	b.w	80005ec <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f835 	bl	8000320 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f828 	bl	8000320 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f817 	bl	8000320 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f809 	bl	8000320 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2203      	movs	r2, #3
 80005fc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2203      	movs	r2, #3
 8000608:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2203      	movs	r2, #3
 800060e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2203      	movs	r2, #3
 8000614:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2203      	movs	r2, #3
 800061a:	715a      	strb	r2, [r3, #5]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af04      	add	r7, sp, #16
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	460b      	mov	r3, r1
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	b29a      	uxth	r2, r3
 8000646:	8af9      	ldrh	r1, [r7, #22]
 8000648:	f241 3388 	movw	r3, #5000	; 0x1388
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	2302      	movs	r3, #2
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	f001 fb4d 	bl	8001cf8 <HAL_I2C_Mem_Read>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d10b      	bne.n	800067c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000664:	7d7b      	ldrb	r3, [r7, #21]
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b21a      	sxth	r2, r3
 800066a:	7d3b      	ldrb	r3, [r7, #20]
 800066c:	b21b      	sxth	r3, r3
 800066e:	4313      	orrs	r3, r2
 8000670:	b21b      	sxth	r3, r3
 8000672:	b29a      	uxth	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	801a      	strh	r2, [r3, #0]
		return true;
 8000678:	2301      	movs	r3, #1
 800067a:	e000      	b.n	800067e <read_register16+0x56>
	} else
		return false;
 800067c:	2300      	movs	r3, #0

}
 800067e:	4618      	mov	r0, r3
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000686:	b590      	push	{r4, r7, lr}
 8000688:	b08b      	sub	sp, #44	; 0x2c
 800068a:	af04      	add	r7, sp, #16
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	607a      	str	r2, [r7, #4]
 8000690:	461a      	mov	r2, r3
 8000692:	460b      	mov	r3, r1
 8000694:	72fb      	strb	r3, [r7, #11]
 8000696:	4613      	mov	r3, r2
 8000698:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	b29c      	uxth	r4, r3
 80006aa:	7abb      	ldrb	r3, [r7, #10]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	8af9      	ldrh	r1, [r7, #22]
 80006b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80006b4:	9202      	str	r2, [sp, #8]
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	4622      	mov	r2, r4
 80006c0:	f001 fb1a 	bl	8001cf8 <HAL_I2C_Mem_Read>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <read_data+0x48>
		return 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <read_data+0x4a>
	else
		return 1;
 80006ce:	2301      	movs	r3, #1

}
 80006d0:	4618      	mov	r0, r3
 80006d2:	371c      	adds	r7, #28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd90      	pop	{r4, r7, pc}

080006d8 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	461a      	mov	r2, r3
 80006e4:	2188      	movs	r1, #136	; 0x88
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff9e 	bl	8000628 <read_register16>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d06f      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3302      	adds	r3, #2
 80006f6:	461a      	mov	r2, r3
 80006f8:	218a      	movs	r1, #138	; 0x8a
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff94 	bl	8000628 <read_register16>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d065      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3304      	adds	r3, #4
 800070a:	461a      	mov	r2, r3
 800070c:	218c      	movs	r1, #140	; 0x8c
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff8a 	bl	8000628 <read_register16>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d05b      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3306      	adds	r3, #6
 800071e:	461a      	mov	r2, r3
 8000720:	218e      	movs	r1, #142	; 0x8e
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff ff80 	bl	8000628 <read_register16>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d051      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3308      	adds	r3, #8
 8000732:	461a      	mov	r2, r3
 8000734:	2190      	movs	r1, #144	; 0x90
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff76 	bl	8000628 <read_register16>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d047      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	330a      	adds	r3, #10
 8000746:	461a      	mov	r2, r3
 8000748:	2192      	movs	r1, #146	; 0x92
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff6c 	bl	8000628 <read_register16>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d03d      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	330c      	adds	r3, #12
 800075a:	461a      	mov	r2, r3
 800075c:	2194      	movs	r1, #148	; 0x94
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff62 	bl	8000628 <read_register16>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d033      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	330e      	adds	r3, #14
 800076e:	461a      	mov	r2, r3
 8000770:	2196      	movs	r1, #150	; 0x96
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ff58 	bl	8000628 <read_register16>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d029      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3310      	adds	r3, #16
 8000782:	461a      	mov	r2, r3
 8000784:	2198      	movs	r1, #152	; 0x98
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff4e 	bl	8000628 <read_register16>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d01f      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3312      	adds	r3, #18
 8000796:	461a      	mov	r2, r3
 8000798:	219a      	movs	r1, #154	; 0x9a
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ff44 	bl	8000628 <read_register16>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d015      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3314      	adds	r3, #20
 80007aa:	461a      	mov	r2, r3
 80007ac:	219c      	movs	r1, #156	; 0x9c
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ff3a 	bl	8000628 <read_register16>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80007be:	461a      	mov	r2, r3
 80007c0:	219e      	movs	r1, #158	; 0x9e
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff30 	bl	8000628 <read_register16>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <read_calibration_data+0xfa>

		return true;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e000      	b.n	80007d4 <read_calibration_data+0xfc>
	}

	return false;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f103 0218 	add.w	r2, r3, #24
 80007ea:	2301      	movs	r3, #1
 80007ec:	21a1      	movs	r1, #161	; 0xa1
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff49 	bl	8000686 <read_data>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d14b      	bne.n	8000892 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	331a      	adds	r3, #26
 80007fe:	461a      	mov	r2, r3
 8000800:	21e1      	movs	r1, #225	; 0xe1
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff10 	bl	8000628 <read_register16>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d041      	beq.n	8000892 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f103 021c 	add.w	r2, r3, #28
 8000814:	2301      	movs	r3, #1
 8000816:	21e3      	movs	r1, #227	; 0xe3
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff34 	bl	8000686 <read_data>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d136      	bne.n	8000892 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000824:	f107 030e 	add.w	r3, r7, #14
 8000828:	461a      	mov	r2, r3
 800082a:	21e4      	movs	r1, #228	; 0xe4
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff fefb 	bl	8000628 <read_register16>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d02c      	beq.n	8000892 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	461a      	mov	r2, r3
 800083e:	21e5      	movs	r1, #229	; 0xe5
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fef1 	bl	8000628 <read_register16>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d022      	beq.n	8000892 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000852:	2301      	movs	r3, #1
 8000854:	21e7      	movs	r1, #231	; 0xe7
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ff15 	bl	8000686 <read_data>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d117      	bne.n	8000892 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000862:	89fb      	ldrh	r3, [r7, #14]
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	b21b      	sxth	r3, r3
 8000868:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800086c:	b21a      	sxth	r2, r3
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	121b      	asrs	r3, r3, #8
 8000872:	b21b      	sxth	r3, r3
 8000874:	f003 030f 	and.w	r3, r3, #15
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21a      	sxth	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000882:	89bb      	ldrh	r3, [r7, #12]
 8000884:	091b      	lsrs	r3, r3, #4
 8000886:	b29b      	uxth	r3, r3
 8000888:	b21a      	sxth	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	841a      	strh	r2, [r3, #32]

		return true;
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
 80008a8:	4613      	mov	r3, r2
 80008aa:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	89f9      	ldrh	r1, [r7, #14]
 80008be:	f242 7310 	movw	r3, #10000	; 0x2710
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	2301      	movs	r3, #1
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	1cbb      	adds	r3, r7, #2
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	f001 f8ed 	bl	8001aac <HAL_I2C_Mem_Write>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d101      	bne.n	80008dc <write_register8+0x40>
		return false;
 80008d8:	2300      	movs	r3, #0
 80008da:	e000      	b.n	80008de <write_register8+0x42>
	else
		return true;
 80008dc:	2301      	movs	r3, #1
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008f4:	2b76      	cmp	r3, #118	; 0x76
 80008f6:	d005      	beq.n	8000904 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008fc:	2b77      	cmp	r3, #119	; 0x77
 80008fe:	d001      	beq.n	8000904 <bmp280_init+0x1e>

		return false;
 8000900:	2300      	movs	r3, #0
 8000902:	e099      	b.n	8000a38 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800090a:	2301      	movs	r3, #1
 800090c:	21d0      	movs	r1, #208	; 0xd0
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff feb9 	bl	8000686 <read_data>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <bmp280_init+0x38>
		return false;
 800091a:	2300      	movs	r3, #0
 800091c:	e08c      	b.n	8000a38 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000924:	2b58      	cmp	r3, #88	; 0x58
 8000926:	d006      	beq.n	8000936 <bmp280_init+0x50>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800092e:	2b60      	cmp	r3, #96	; 0x60
 8000930:	d001      	beq.n	8000936 <bmp280_init+0x50>

		return false;
 8000932:	2300      	movs	r3, #0
 8000934:	e080      	b.n	8000a38 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000936:	22b6      	movs	r2, #182	; 0xb6
 8000938:	21e0      	movs	r1, #224	; 0xe0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ffae 	bl	800089c <write_register8>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <bmp280_init+0x64>
		return false;
 8000946:	2300      	movs	r3, #0
 8000948:	e076      	b.n	8000a38 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800094a:	f107 020c 	add.w	r2, r7, #12
 800094e:	2301      	movs	r3, #1
 8000950:	21f3      	movs	r1, #243	; 0xf3
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff fe97 	bl	8000686 <read_data>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f5      	bne.n	800094a <bmp280_init+0x64>
				&& (status & 1) == 0)
 800095e:	7b3b      	ldrb	r3, [r7, #12]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1f0      	bne.n	800094a <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff feb5 	bl	80006d8 <read_calibration_data>
 800096e:	4603      	mov	r3, r0
 8000970:	f083 0301 	eor.w	r3, r3, #1
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d100      	bne.n	800097c <bmp280_init+0x96>
 800097a:	e001      	b.n	8000980 <bmp280_init+0x9a>
		return false;
 800097c:	2300      	movs	r3, #0
 800097e:	e05b      	b.n	8000a38 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000986:	2b60      	cmp	r3, #96	; 0x60
 8000988:	d10a      	bne.n	80009a0 <bmp280_init+0xba>
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ff26 	bl	80007dc <read_hum_calibration_data>
 8000990:	4603      	mov	r3, r0
 8000992:	f083 0301 	eor.w	r3, r3, #1
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <bmp280_init+0xba>
		return false;
 800099c:	2300      	movs	r3, #0
 800099e:	e04b      	b.n	8000a38 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	795b      	ldrb	r3, [r3, #5]
 80009a4:	015b      	lsls	r3, r3, #5
 80009a6:	b25a      	sxtb	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	461a      	mov	r2, r3
 80009ba:	21f5      	movs	r1, #245	; 0xf5
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff6d 	bl	800089c <write_register8>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <bmp280_init+0xe6>
		return false;
 80009c8:	2300      	movs	r3, #0
 80009ca:	e035      	b.n	8000a38 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d102      	bne.n	80009da <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	78db      	ldrb	r3, [r3, #3]
 80009de:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80009e0:	b25a      	sxtb	r2, r3
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	789b      	ldrb	r3, [r3, #2]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80009f8:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000a00:	2b60      	cmp	r3, #96	; 0x60
 8000a02:	d10d      	bne.n	8000a20 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	791b      	ldrb	r3, [r3, #4]
 8000a08:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000a0a:	7b7b      	ldrb	r3, [r7, #13]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	21f2      	movs	r1, #242	; 0xf2
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff43 	bl	800089c <write_register8>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <bmp280_init+0x13a>
			return false;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e00b      	b.n	8000a38 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	461a      	mov	r2, r3
 8000a24:	21f4      	movs	r1, #244	; 0xf4
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ff38 	bl	800089c <write_register8>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <bmp280_init+0x150>
		return false;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <bmp280_init+0x152>
	}

	return true;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	10da      	asrs	r2, r3, #3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000a5e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000a62:	12db      	asrs	r3, r3, #11
 8000a64:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	111b      	asrs	r3, r3, #4
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	8812      	ldrh	r2, [r2, #0]
 8000a6e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	1112      	asrs	r2, r2, #4
 8000a74:	68f9      	ldr	r1, [r7, #12]
 8000a76:	8809      	ldrh	r1, [r1, #0]
 8000a78:	1a52      	subs	r2, r2, r1
 8000a7a:	fb02 f303 	mul.w	r3, r2, r3
 8000a7e:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000a8a:	139b      	asrs	r3, r3, #14
 8000a8c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	441a      	add	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	3380      	adds	r3, #128	; 0x80
 8000aa4:	121b      	asrs	r3, r3, #8
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	371c      	adds	r7, #28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000ab2:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000ac8:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8000acc:	f142 34ff 	adc.w	r4, r2, #4294967295
 8000ad0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	6a3a      	ldr	r2, [r7, #32]
 8000ad8:	fb02 f203 	mul.w	r2, r2, r3
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	6a39      	ldr	r1, [r7, #32]
 8000ae0:	fb01 f303 	mul.w	r3, r1, r3
 8000ae4:	441a      	add	r2, r3
 8000ae6:	6a39      	ldr	r1, [r7, #32]
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	fba1 3403 	umull	r3, r4, r1, r3
 8000aee:	4422      	add	r2, r4
 8000af0:	4614      	mov	r4, r2
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000af8:	b211      	sxth	r1, r2
 8000afa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000afe:	fb01 f504 	mul.w	r5, r1, r4
 8000b02:	fb03 f002 	mul.w	r0, r3, r2
 8000b06:	4428      	add	r0, r5
 8000b08:	fba3 3401 	umull	r3, r4, r3, r1
 8000b0c:	1902      	adds	r2, r0, r4
 8000b0e:	4614      	mov	r4, r2
 8000b10:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8000b14:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000b24:	6a3a      	ldr	r2, [r7, #32]
 8000b26:	fb04 f102 	mul.w	r1, r4, r2
 8000b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b2c:	fb03 f202 	mul.w	r2, r3, r2
 8000b30:	1888      	adds	r0, r1, r2
 8000b32:	6a3a      	ldr	r2, [r7, #32]
 8000b34:	fba2 1203 	umull	r1, r2, r2, r3
 8000b38:	1883      	adds	r3, r0, r2
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	f04f 0500 	mov.w	r5, #0
 8000b40:	f04f 0600 	mov.w	r6, #0
 8000b44:	0456      	lsls	r6, r2, #17
 8000b46:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8000b4a:	044d      	lsls	r5, r1, #17
 8000b4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000b50:	186b      	adds	r3, r5, r1
 8000b52:	eb46 0402 	adc.w	r4, r6, r2
 8000b56:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b60:	b219      	sxth	r1, r3
 8000b62:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000b66:	f04f 0500 	mov.w	r5, #0
 8000b6a:	f04f 0600 	mov.w	r6, #0
 8000b6e:	00ce      	lsls	r6, r1, #3
 8000b70:	2500      	movs	r5, #0
 8000b72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000b76:	186b      	adds	r3, r5, r1
 8000b78:	eb46 0402 	adc.w	r4, r6, r2
 8000b7c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	6a3a      	ldr	r2, [r7, #32]
 8000b84:	fb02 f203 	mul.w	r2, r2, r3
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	6a39      	ldr	r1, [r7, #32]
 8000b8c:	fb01 f303 	mul.w	r3, r1, r3
 8000b90:	441a      	add	r2, r3
 8000b92:	6a39      	ldr	r1, [r7, #32]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	fba1 3403 	umull	r3, r4, r1, r3
 8000b9a:	4422      	add	r2, r4
 8000b9c:	4614      	mov	r4, r2
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000ba4:	b211      	sxth	r1, r2
 8000ba6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000baa:	fb01 f504 	mul.w	r5, r1, r4
 8000bae:	fb03 f002 	mul.w	r0, r3, r2
 8000bb2:	4428      	add	r0, r5
 8000bb4:	fba3 3401 	umull	r3, r4, r3, r1
 8000bb8:	1902      	adds	r2, r0, r4
 8000bba:	4614      	mov	r4, r2
 8000bbc:	f04f 0100 	mov.w	r1, #0
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	0a19      	lsrs	r1, r3, #8
 8000bc6:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8000bca:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000bd8:	6a38      	ldr	r0, [r7, #32]
 8000bda:	fb04 f500 	mul.w	r5, r4, r0
 8000bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000be0:	fb03 f000 	mul.w	r0, r3, r0
 8000be4:	4428      	add	r0, r5
 8000be6:	6a3d      	ldr	r5, [r7, #32]
 8000be8:	fba5 5603 	umull	r5, r6, r5, r3
 8000bec:	1983      	adds	r3, r0, r6
 8000bee:	461e      	mov	r6, r3
 8000bf0:	f04f 0b00 	mov.w	fp, #0
 8000bf4:	f04f 0c00 	mov.w	ip, #0
 8000bf8:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8000bfc:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8000c00:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000c04:	eb1b 0301 	adds.w	r3, fp, r1
 8000c08:	eb4c 0402 	adc.w	r4, ip, r2
 8000c0c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000c10:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000c14:	1c19      	adds	r1, r3, #0
 8000c16:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	88db      	ldrh	r3, [r3, #6]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	f04f 0400 	mov.w	r4, #0
 8000c24:	fb03 f502 	mul.w	r5, r3, r2
 8000c28:	fb01 f004 	mul.w	r0, r1, r4
 8000c2c:	4428      	add	r0, r5
 8000c2e:	fba1 3403 	umull	r3, r4, r1, r3
 8000c32:	1902      	adds	r2, r0, r4
 8000c34:	4614      	mov	r4, r2
 8000c36:	f04f 0100 	mov.w	r1, #0
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	1061      	asrs	r1, r4, #1
 8000c40:	17e2      	asrs	r2, r4, #31
 8000c42:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8000c46:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000c4a:	4323      	orrs	r3, r4
 8000c4c:	d101      	bne.n	8000c52 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e0d4      	b.n	8000dfc <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000c58:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000c5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	ea4f 0963 	mov.w	r9, r3, asr #1
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8000c6c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000c70:	4645      	mov	r5, r8
 8000c72:	464e      	mov	r6, r9
 8000c74:	1aed      	subs	r5, r5, r3
 8000c76:	eb66 0604 	sbc.w	r6, r6, r4
 8000c7a:	46a8      	mov	r8, r5
 8000c7c:	46b1      	mov	r9, r6
 8000c7e:	eb18 0308 	adds.w	r3, r8, r8
 8000c82:	eb49 0409 	adc.w	r4, r9, r9
 8000c86:	4698      	mov	r8, r3
 8000c88:	46a1      	mov	r9, r4
 8000c8a:	eb18 0805 	adds.w	r8, r8, r5
 8000c8e:	eb49 0906 	adc.w	r9, r9, r6
 8000c92:	f04f 0100 	mov.w	r1, #0
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8000c9e:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8000ca2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8000ca6:	eb18 0801 	adds.w	r8, r8, r1
 8000caa:	eb49 0902 	adc.w	r9, r9, r2
 8000cae:	f04f 0100 	mov.w	r1, #0
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8000cba:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8000cbe:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	4691      	mov	r9, r2
 8000cc6:	eb18 0805 	adds.w	r8, r8, r5
 8000cca:	eb49 0906 	adc.w	r9, r9, r6
 8000cce:	f04f 0100 	mov.w	r1, #0
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8000cda:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8000cde:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	4691      	mov	r9, r2
 8000ce6:	eb18 0005 	adds.w	r0, r8, r5
 8000cea:	eb49 0106 	adc.w	r1, r9, r6
 8000cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cf2:	f7ff fac5 	bl	8000280 <__aeabi_ldivmod>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000d04:	b219      	sxth	r1, r3
 8000d06:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000d0a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	f04f 0400 	mov.w	r4, #0
 8000d16:	0b6b      	lsrs	r3, r5, #13
 8000d18:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8000d1c:	1374      	asrs	r4, r6, #13
 8000d1e:	fb03 f502 	mul.w	r5, r3, r2
 8000d22:	fb01 f004 	mul.w	r0, r1, r4
 8000d26:	4428      	add	r0, r5
 8000d28:	fba1 1203 	umull	r1, r2, r1, r3
 8000d2c:	1883      	adds	r3, r0, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	f04f 0400 	mov.w	r4, #0
 8000d3c:	0b6b      	lsrs	r3, r5, #13
 8000d3e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8000d42:	1374      	asrs	r4, r6, #13
 8000d44:	fb03 f502 	mul.w	r5, r3, r2
 8000d48:	fb01 f004 	mul.w	r0, r1, r4
 8000d4c:	4428      	add	r0, r5
 8000d4e:	fba1 1203 	umull	r1, r2, r1, r3
 8000d52:	1883      	adds	r3, r0, r2
 8000d54:	461a      	mov	r2, r3
 8000d56:	f04f 0300 	mov.w	r3, #0
 8000d5a:	f04f 0400 	mov.w	r4, #0
 8000d5e:	0e4b      	lsrs	r3, r1, #25
 8000d60:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8000d64:	1654      	asrs	r4, r2, #25
 8000d66:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	fb04 f102 	mul.w	r1, r4, r2
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	fb03 f202 	mul.w	r2, r3, r2
 8000d82:	1888      	adds	r0, r1, r2
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	fba2 1203 	umull	r1, r2, r2, r3
 8000d8a:	1883      	adds	r3, r0, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	f04f 0400 	mov.w	r4, #0
 8000d96:	0ccb      	lsrs	r3, r1, #19
 8000d98:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000d9c:	14d4      	asrs	r4, r2, #19
 8000d9e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8000da2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000da6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000daa:	eb11 0803 	adds.w	r8, r1, r3
 8000dae:	eb42 0904 	adc.w	r9, r2, r4
 8000db2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000db6:	eb13 0508 	adds.w	r5, r3, r8
 8000dba:	eb44 0609 	adc.w	r6, r4, r9
 8000dbe:	f04f 0100 	mov.w	r1, #0
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	0a29      	lsrs	r1, r5, #8
 8000dc8:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8000dcc:	1232      	asrs	r2, r6, #8
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000dd4:	b21d      	sxth	r5, r3
 8000dd6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8000dda:	f04f 0800 	mov.w	r8, #0
 8000dde:	f04f 0900 	mov.w	r9, #0
 8000de2:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8000de6:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8000dea:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8000dee:	eb18 0301 	adds.w	r3, r8, r1
 8000df2:	eb49 0402 	adc.w	r4, r9, r2
 8000df6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8000dfa:	693b      	ldr	r3, [r7, #16]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08000e06 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8000e06:	b480      	push	{r7}
 8000e08:	b087      	sub	sp, #28
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8000e18:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	039a      	lsls	r2, r3, #14
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000e24:	051b      	lsls	r3, r3, #20
 8000e26:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fb03 f301 	mul.w	r3, r3, r1
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e3c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8000e44:	4611      	mov	r1, r2
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	fb02 f201 	mul.w	r2, r2, r1
 8000e4c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000e4e:	68f9      	ldr	r1, [r7, #12]
 8000e50:	7f09      	ldrb	r1, [r1, #28]
 8000e52:	4608      	mov	r0, r1
 8000e54:	6979      	ldr	r1, [r7, #20]
 8000e56:	fb01 f100 	mul.w	r1, r1, r0
 8000e5a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000e5c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000e60:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000e64:	1292      	asrs	r2, r2, #10
 8000e66:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8000e6a:	68f9      	ldr	r1, [r7, #12]
 8000e6c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8000e70:	fb01 f202 	mul.w	r2, r1, r2
 8000e74:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000e78:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	13db      	asrs	r3, r3, #15
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	13d2      	asrs	r2, r2, #15
 8000e88:	fb02 f303 	mul.w	r3, r2, r3
 8000e8c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	7e12      	ldrb	r2, [r2, #24]
 8000e92:	fb02 f303 	mul.w	r3, r2, r3
 8000e96:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000ea4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8000eac:	bfa8      	it	ge
 8000eae:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8000eb2:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	131b      	asrs	r3, r3, #12
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	371c      	adds	r7, #28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000ed8:	2b60      	cmp	r3, #96	; 0x60
 8000eda:	d007      	beq.n	8000eec <bmp280_read_fixed+0x28>
		if (humidity)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <bmp280_read_fixed+0x32>
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	e000      	b.n	8000ef8 <bmp280_read_fixed+0x34>
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8000efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f107 0218 	add.w	r2, r7, #24
 8000f02:	21f7      	movs	r1, #247	; 0xf7
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff fbbe 	bl	8000686 <read_data>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <bmp280_read_fixed+0x50>
		return false;
 8000f10:	2300      	movs	r3, #0
 8000f12:	e038      	b.n	8000f86 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8000f14:	7e3b      	ldrb	r3, [r7, #24]
 8000f16:	031a      	lsls	r2, r3, #12
 8000f18:	7e7b      	ldrb	r3, [r7, #25]
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	7eba      	ldrb	r2, [r7, #26]
 8000f20:	0912      	lsrs	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	4313      	orrs	r3, r2
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8000f28:	7efb      	ldrb	r3, [r7, #27]
 8000f2a:	031a      	lsls	r2, r3, #12
 8000f2c:	7f3b      	ldrb	r3, [r7, #28]
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	4313      	orrs	r3, r2
 8000f32:	7f7a      	ldrb	r2, [r7, #29]
 8000f34:	0912      	lsrs	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	461a      	mov	r2, r3
 8000f42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff fd7b 	bl	8000a40 <compensate_temperature>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	461a      	mov	r2, r3
 8000f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff fdab 	bl	8000ab2 <compensate_pressure>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00d      	beq.n	8000f84 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8000f68:	7fbb      	ldrb	r3, [r7, #30]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	7ffa      	ldrb	r2, [r7, #31]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	461a      	mov	r2, r3
 8000f76:	6a39      	ldr	r1, [r7, #32]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff ff44 	bl	8000e06 <compensate_humidity>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	601a      	str	r2, [r3, #0]
	}

	return true;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3730      	adds	r7, #48	; 0x30
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x28>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x28>)
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f92f 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f004 fe76 	bl	8005c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40022000 	.word	0x40022000

08000fbc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f939 	bl	8001252 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f90f 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000008 	.word	0x20000008
 8001014:	20000004 	.word	0x20000004
 8001018:	20000000 	.word	0x20000000

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000004 	.word	0x20000004
 8001040:	2000009c 	.word	0x2000009c

08001044 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;  
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000009c 	.word	0x2000009c

0800105c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_Delay+0x40>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000004 	.word	0x20000004

080010a0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	da0b      	bge.n	8001130 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <NVIC_SetPriority+0x4c>)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	3b04      	subs	r3, #4
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112e:	e009      	b.n	8001144 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <NVIC_SetPriority+0x50>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	e000e100 	.word	0xe000e100

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff47 	bl	80010a0 <NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff5c 	bl	80010e8 <NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff8e 	bl	8001158 <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffb0 	bl	80011c0 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001282:	e14e      	b.n	8001522 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8140 	beq.w	800151c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x40>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b12      	cmp	r3, #18
 80012aa:	d123      	bne.n	80012f4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	6939      	ldr	r1, [r7, #16]
 80012f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d00b      	beq.n	8001348 <HAL_GPIO_Init+0xdc>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d007      	beq.n	8001348 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800133c:	2b11      	cmp	r3, #17
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b12      	cmp	r3, #18
 8001346:	d130      	bne.n	80013aa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137e:	2201      	movs	r2, #1
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 0201 	and.w	r2, r3, #1
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 809a 	beq.w	800151c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e8:	4b55      	ldr	r3, [pc, #340]	; (8001540 <HAL_GPIO_Init+0x2d4>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a54      	ldr	r2, [pc, #336]	; (8001540 <HAL_GPIO_Init+0x2d4>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b52      	ldr	r3, [pc, #328]	; (8001540 <HAL_GPIO_Init+0x2d4>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_GPIO_Init+0x2d8>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142a:	d013      	beq.n	8001454 <HAL_GPIO_Init+0x1e8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a46      	ldr	r2, [pc, #280]	; (8001548 <HAL_GPIO_Init+0x2dc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d00d      	beq.n	8001450 <HAL_GPIO_Init+0x1e4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a45      	ldr	r2, [pc, #276]	; (800154c <HAL_GPIO_Init+0x2e0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d007      	beq.n	800144c <HAL_GPIO_Init+0x1e0>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a44      	ldr	r2, [pc, #272]	; (8001550 <HAL_GPIO_Init+0x2e4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d101      	bne.n	8001448 <HAL_GPIO_Init+0x1dc>
 8001444:	2303      	movs	r3, #3
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x1ea>
 8001448:	2305      	movs	r3, #5
 800144a:	e004      	b.n	8001456 <HAL_GPIO_Init+0x1ea>
 800144c:	2302      	movs	r3, #2
 800144e:	e002      	b.n	8001456 <HAL_GPIO_Init+0x1ea>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_GPIO_Init+0x1ea>
 8001454:	2300      	movs	r3, #0
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	f002 0203 	and.w	r2, r2, #3
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	4093      	lsls	r3, r2
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001466:	4937      	ldr	r1, [pc, #220]	; (8001544 <HAL_GPIO_Init+0x2d8>)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001498:	4a2e      	ldr	r2, [pc, #184]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ec:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001516:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	f47f aea9 	bne.w	8001284 <HAL_GPIO_Init+0x18>
  }
}
 8001532:	bf00      	nop
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	48000400 	.word	0x48000400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000c00 	.word	0x48000c00
 8001554:	40010400 	.word	0x40010400

08001558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
 8001564:	4613      	mov	r3, r2
 8001566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001568:	787b      	ldrb	r3, [r7, #1]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001574:	e002      	b.n	800157c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e081      	b.n	800169e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f004 fb98 	bl	8005ce4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2224      	movs	r2, #36	; 0x24
 80015b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e006      	b.n	8001610 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800160e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d104      	bne.n	8001622 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001620:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001634:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001644:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	ea42 0103 	orr.w	r1, r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	021a      	lsls	r2, r3, #8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69d9      	ldr	r1, [r3, #28]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	461a      	mov	r2, r3
 80016b4:	460b      	mov	r3, r1
 80016b6:	817b      	strh	r3, [r7, #10]
 80016b8:	4613      	mov	r3, r2
 80016ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	f040 80e4 	bne.w	8001896 <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_I2C_Master_Transmit+0x34>
 80016d8:	2302      	movs	r3, #2
 80016da:	e0dd      	b.n	8001898 <HAL_I2C_Master_Transmit+0x1f0>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016e4:	f7ff fcae 	bl	8001044 <HAL_GetTick>
 80016e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2319      	movs	r3, #25
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 fde6 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e0c8      	b.n	8001898 <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2221      	movs	r2, #33	; 0x21
 800170a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2210      	movs	r2, #16
 8001712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	893a      	ldrh	r2, [r7, #8]
 8001726:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001732:	b29b      	uxth	r3, r3
 8001734:	2bff      	cmp	r3, #255	; 0xff
 8001736:	d90e      	bls.n	8001756 <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	22ff      	movs	r2, #255	; 0xff
 800173c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001742:	b2da      	uxtb	r2, r3
 8001744:	8979      	ldrh	r1, [r7, #10]
 8001746:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 ff3a 	bl	80025c8 <I2C_TransferConfig>
 8001754:	e070      	b.n	8001838 <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	b2da      	uxtb	r2, r3
 8001766:	8979      	ldrh	r1, [r7, #10]
 8001768:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 ff29 	bl	80025c8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001776:	e05f      	b.n	8001838 <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	6a39      	ldr	r1, [r7, #32]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 fddd 	bl	800233c <I2C_WaitOnTXISFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178c:	2b04      	cmp	r3, #4
 800178e:	d101      	bne.n	8001794 <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e081      	b.n	8001898 <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e07f      	b.n	8001898 <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	1c59      	adds	r1, r3, #1
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	6251      	str	r1, [r2, #36]	; 0x24
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d135      	bne.n	8001838 <HAL_I2C_Master_Transmit+0x190>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d030      	beq.n	8001838 <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	2200      	movs	r2, #0
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 fd71 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e053      	b.n	8001898 <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2bff      	cmp	r3, #255	; 0xff
 80017f8:	d90e      	bls.n	8001818 <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	22ff      	movs	r2, #255	; 0xff
 80017fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001804:	b2da      	uxtb	r2, r3
 8001806:	8979      	ldrh	r1, [r7, #10]
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 fed9 	bl	80025c8 <I2C_TransferConfig>
 8001816:	e00f      	b.n	8001838 <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	b2da      	uxtb	r2, r3
 8001828:	8979      	ldrh	r1, [r7, #10]
 800182a:	2300      	movs	r3, #0
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fec8 	bl	80025c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d19a      	bne.n	8001778 <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 fdb8 	bl	80023bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	2b04      	cmp	r3, #4
 8001858:	d101      	bne.n	800185e <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e01c      	b.n	8001898 <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e01a      	b.n	8001898 <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2220      	movs	r2, #32
 8001868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_I2C_Master_Transmit+0x1fc>)
 8001876:	400b      	ands	r3, r1
 8001878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2220      	movs	r2, #32
 800187e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 8001896:	2302      	movs	r3, #2
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	80002000 	.word	0x80002000
 80018a4:	fe00e800 	.word	0xfe00e800

080018a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	461a      	mov	r2, r3
 80018b4:	460b      	mov	r3, r1
 80018b6:	817b      	strh	r3, [r7, #10]
 80018b8:	4613      	mov	r3, r2
 80018ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	f040 80e5 	bne.w	8001a98 <HAL_I2C_Master_Receive+0x1f0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_I2C_Master_Receive+0x34>
 80018d8:	2302      	movs	r3, #2
 80018da:	e0de      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1f2>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018e4:	f7ff fbae 	bl	8001044 <HAL_GetTick>
 80018e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2319      	movs	r3, #25
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 fce6 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e0c9      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1f2>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2222      	movs	r2, #34	; 0x22
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2210      	movs	r2, #16
 8001912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	893a      	ldrh	r2, [r7, #8]
 8001926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001932:	b29b      	uxth	r3, r3
 8001934:	2bff      	cmp	r3, #255	; 0xff
 8001936:	d90e      	bls.n	8001956 <HAL_I2C_Master_Receive+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	22ff      	movs	r2, #255	; 0xff
 800193c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	b2da      	uxtb	r2, r3
 8001944:	8979      	ldrh	r1, [r7, #10]
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_I2C_Master_Receive+0x1fc>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 fe3a 	bl	80025c8 <I2C_TransferConfig>
 8001954:	e071      	b.n	8001a3a <HAL_I2C_Master_Receive+0x192>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	b2da      	uxtb	r2, r3
 8001966:	8979      	ldrh	r1, [r7, #10]
 8001968:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <HAL_I2C_Master_Receive+0x1fc>)
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fe29 	bl	80025c8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001976:	e060      	b.n	8001a3a <HAL_I2C_Master_Receive+0x192>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	6a39      	ldr	r1, [r7, #32]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fd59 	bl	8002434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <HAL_I2C_Master_Receive+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	2b04      	cmp	r3, #4
 800198e:	d101      	bne.n	8001994 <HAL_I2C_Master_Receive+0xec>
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e082      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1f2>
        }
        else
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e080      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1f2>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	1c59      	adds	r1, r3, #1
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	6251      	str	r1, [r2, #36]	; 0x24
 80019a8:	b2c2      	uxtb	r2, r0
 80019aa:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d135      	bne.n	8001a3a <HAL_I2C_Master_Receive+0x192>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d030      	beq.n	8001a3a <HAL_I2C_Master_Receive+0x192>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	2200      	movs	r2, #0
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 fc70 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_Master_Receive+0x14a>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e053      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1f2>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2bff      	cmp	r3, #255	; 0xff
 80019fa:	d90e      	bls.n	8001a1a <HAL_I2C_Master_Receive+0x172>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	22ff      	movs	r2, #255	; 0xff
 8001a00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	8979      	ldrh	r1, [r7, #10]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fdd8 	bl	80025c8 <I2C_TransferConfig>
 8001a18:	e00f      	b.n	8001a3a <HAL_I2C_Master_Receive+0x192>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	8979      	ldrh	r1, [r7, #10]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 fdc7 	bl	80025c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d199      	bne.n	8001978 <HAL_I2C_Master_Receive+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	6a39      	ldr	r1, [r7, #32]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 fcb7 	bl	80023bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_I2C_Master_Receive+0x1bc>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d101      	bne.n	8001a60 <HAL_I2C_Master_Receive+0x1b8>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e01c      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1f2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e01a      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1f2>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_I2C_Master_Receive+0x200>)
 8001a78:	400b      	ands	r3, r1
 8001a7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e000      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1f2>
  }
  else
  {
    return HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
  }
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	80002400 	.word	0x80002400
 8001aa8:	fe00e800 	.word	0xfe00e800

08001aac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	817b      	strh	r3, [r7, #10]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	813b      	strh	r3, [r7, #8]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	f040 8109 	bne.w	8001cea <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x38>
 8001ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e101      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_I2C_Mem_Write+0x4a>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e0fa      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001afe:	f7ff faa1 	bl	8001044 <HAL_GetTick>
 8001b02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2319      	movs	r3, #25
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 fbd9 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0e5      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2221      	movs	r2, #33	; 0x21
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2240      	movs	r2, #64	; 0x40
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a3a      	ldr	r2, [r7, #32]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b48:	88f8      	ldrh	r0, [r7, #6]
 8001b4a:	893a      	ldrh	r2, [r7, #8]
 8001b4c:	8979      	ldrh	r1, [r7, #10]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4603      	mov	r3, r0
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fad1 	bl	8002100 <I2C_RequestMemoryWrite>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00f      	beq.n	8001b84 <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d105      	bne.n	8001b78 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b9      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0b3      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d90e      	bls.n	8001bac <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	22ff      	movs	r2, #255	; 0xff
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	8979      	ldrh	r1, [r7, #10]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fd0f 	bl	80025c8 <I2C_TransferConfig>
 8001baa:	e00f      	b.n	8001bcc <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fcfe 	bl	80025c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 fbb3 	bl	800233c <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d101      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e081      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e07f      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	1c59      	adds	r1, r3, #1
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	6251      	str	r1, [r2, #36]	; 0x24
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d135      	bne.n	8001c8c <HAL_I2C_Mem_Write+0x1e0>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d030      	beq.n	8001c8c <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	2200      	movs	r2, #0
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fb47 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e053      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2bff      	cmp	r3, #255	; 0xff
 8001c4c:	d90e      	bls.n	8001c6c <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	22ff      	movs	r2, #255	; 0xff
 8001c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	8979      	ldrh	r1, [r7, #10]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fcaf 	bl	80025c8 <I2C_TransferConfig>
 8001c6a:	e00f      	b.n	8001c8c <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	8979      	ldrh	r1, [r7, #10]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fc9e 	bl	80025c8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d19a      	bne.n	8001bcc <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fb8e 	bl	80023bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e01c      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e01a      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_I2C_Mem_Write+0x248>)
 8001cca:	400b      	ands	r3, r1
 8001ccc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	fe00e800 	.word	0xfe00e800

08001cf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	4608      	mov	r0, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	817b      	strh	r3, [r7, #10]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	813b      	strh	r3, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	f040 8107 	bne.w	8001f32 <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_I2C_Mem_Read+0x38>
 8001d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0ff      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_I2C_Mem_Read+0x4a>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e0f8      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d4a:	f7ff f97b 	bl	8001044 <HAL_GetTick>
 8001d4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2319      	movs	r3, #25
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 fab3 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0e3      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2222      	movs	r2, #34	; 0x22
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a3a      	ldr	r2, [r7, #32]
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d94:	88f8      	ldrh	r0, [r7, #6]
 8001d96:	893a      	ldrh	r2, [r7, #8]
 8001d98:	8979      	ldrh	r1, [r7, #10]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4603      	mov	r3, r0
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fa0b 	bl	80021c0 <I2C_RequestMemoryRead>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00f      	beq.n	8001dd0 <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d105      	bne.n	8001dc4 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b7      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0b1      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d90e      	bls.n	8001df8 <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	22ff      	movs	r2, #255	; 0xff
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	4b54      	ldr	r3, [pc, #336]	; (8001f3c <HAL_I2C_Mem_Read+0x244>)
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fbe9 	bl	80025c8 <I2C_TransferConfig>
 8001df6:	e00f      	b.n	8001e18 <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <HAL_I2C_Mem_Read+0x244>)
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fbd8 	bl	80025c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2104      	movs	r1, #4
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fa50 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e080      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	1c59      	adds	r1, r3, #1
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6251      	str	r1, [r2, #36]	; 0x24
 8001e42:	b2c2      	uxtb	r2, r0
 8001e44:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d135      	bne.n	8001ed4 <HAL_I2C_Mem_Read+0x1dc>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d030      	beq.n	8001ed4 <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fa23 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e053      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2bff      	cmp	r3, #255	; 0xff
 8001e94:	d90e      	bls.n	8001eb4 <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	22ff      	movs	r2, #255	; 0xff
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	8979      	ldrh	r1, [r7, #10]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fb8b 	bl	80025c8 <I2C_TransferConfig>
 8001eb2:	e00f      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	8979      	ldrh	r1, [r7, #10]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fb7a 	bl	80025c8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d19c      	bne.n	8001e18 <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fa6a 	bl	80023bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d101      	bne.n	8001efa <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e01c      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e01a      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2220      	movs	r2, #32
 8001f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_I2C_Mem_Read+0x248>)
 8001f12:	400b      	ands	r3, r1
 8001f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 8001f32:	2302      	movs	r3, #2
  }
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	80002400 	.word	0x80002400
 8001f40:	fe00e800 	.word	0xfe00e800

08001f44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	460b      	mov	r3, r1
 8001f52:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	f040 80c6 	bne.w	80020f6 <HAL_I2C_IsDeviceReady+0x1b2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e0bc      	b.n	80020f8 <HAL_I2C_IsDeviceReady+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_I2C_IsDeviceReady+0x48>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e0b5      	b.n	80020f8 <HAL_I2C_IsDeviceReady+0x1b4>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_I2C_IsDeviceReady+0x76>
 8001faa:	897b      	ldrh	r3, [r7, #10]
 8001fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fb8:	e004      	b.n	8001fc4 <HAL_I2C_IsDeviceReady+0x80>
 8001fba:	897b      	ldrh	r3, [r7, #10]
 8001fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff f83b 	bl	8001044 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001fd0:	e018      	b.n	8002004 <HAL_I2C_IsDeviceReady+0xc0>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d014      	beq.n	8002004 <HAL_I2C_IsDeviceReady+0xc0>
        {
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_I2C_IsDeviceReady+0xac>
 8001fe0:	f7ff f830 	bl	8001044 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d209      	bcs.n	8002004 <HAL_I2C_IsDeviceReady+0xc0>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e079      	b.n	80020f8 <HAL_I2C_IsDeviceReady+0x1b4>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b20      	cmp	r3, #32
 8002010:	d00c      	beq.n	800202c <HAL_I2C_IsDeviceReady+0xe8>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b10      	cmp	r3, #16
 800201e:	d005      	beq.n	800202c <HAL_I2C_IsDeviceReady+0xe8>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2ba0      	cmp	r3, #160	; 0xa0
 800202a:	d1d2      	bne.n	8001fd2 <HAL_I2C_IsDeviceReady+0x8e>
          }
        }
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b10      	cmp	r3, #16
 8002038:	d01a      	beq.n	8002070 <HAL_I2C_IsDeviceReady+0x12c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2200      	movs	r2, #0
 8002042:	2120      	movs	r1, #32
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f93f 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_IsDeviceReady+0x110>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e051      	b.n	80020f8 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2220      	movs	r2, #32
 800205a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e043      	b.n	80020f8 <HAL_I2C_IsDeviceReady+0x1b4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	2120      	movs	r1, #32
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f924 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_IsDeviceReady+0x146>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e036      	b.n	80020f8 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2210      	movs	r2, #16
 8002090:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2220      	movs	r2, #32
 8002098:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	613a      	str	r2, [r7, #16]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d118      	bne.n	80020d8 <HAL_I2C_IsDeviceReady+0x194>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	2120      	movs	r1, #32
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f901 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_I2C_IsDeviceReady+0x18c>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e013      	b.n	80020f8 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2220      	movs	r2, #32
 80020d6:	61da      	str	r2, [r3, #28]
      }
    }
    while (I2C_Trials < Trials);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f63f af60 	bhi.w	8001fa2 <HAL_I2C_IsDeviceReady+0x5e>

    hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e000      	b.n	80020f8 <HAL_I2C_IsDeviceReady+0x1b4>
  }
  else
  {
    return HAL_BUSY;
 80020f6:	2302      	movs	r3, #2
  }
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	4603      	mov	r3, r0
 8002110:	817b      	strh	r3, [r7, #10]
 8002112:	460b      	mov	r3, r1
 8002114:	813b      	strh	r3, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	8979      	ldrh	r1, [r7, #10]
 8002120:	4b26      	ldr	r3, [pc, #152]	; (80021bc <I2C_RequestMemoryWrite+0xbc>)
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fa4d 	bl	80025c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	69b9      	ldr	r1, [r7, #24]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f902 	bl	800233c <I2C_WaitOnTXISFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	2b04      	cmp	r3, #4
 8002144:	d101      	bne.n	800214a <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e034      	b.n	80021b4 <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e032      	b.n	80021b4 <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002154:	893b      	ldrh	r3, [r7, #8]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	629a      	str	r2, [r3, #40]	; 0x28
 800215e:	e01b      	b.n	8002198 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002160:	893b      	ldrh	r3, [r7, #8]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	b29b      	uxth	r3, r3
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	69b9      	ldr	r1, [r7, #24]
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f8e2 	bl	800233c <I2C_WaitOnTXISFlagUntilTimeout>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	2b04      	cmp	r3, #4
 8002184:	d101      	bne.n	800218a <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e014      	b.n	80021b4 <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e012      	b.n	80021b4 <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800218e:	893b      	ldrh	r3, [r7, #8]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2200      	movs	r2, #0
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f890 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e000      	b.n	80021b4 <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	80002000 	.word	0x80002000

080021c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	817b      	strh	r3, [r7, #10]
 80021d2:	460b      	mov	r3, r1
 80021d4:	813b      	strh	r3, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	8979      	ldrh	r1, [r7, #10]
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <I2C_RequestMemoryRead+0xbc>)
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2300      	movs	r3, #0
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f9ee 	bl	80025c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f8a3 	bl	800233c <I2C_WaitOnTXISFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	2b04      	cmp	r3, #4
 8002202:	d101      	bne.n	8002208 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e034      	b.n	8002272 <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e032      	b.n	8002272 <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002212:	893b      	ldrh	r3, [r7, #8]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
 800221c:	e01b      	b.n	8002256 <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800221e:	893b      	ldrh	r3, [r7, #8]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	b29b      	uxth	r3, r3
 8002224:	b2da      	uxtb	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f883 	bl	800233c <I2C_WaitOnTXISFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	2b04      	cmp	r3, #4
 8002242:	d101      	bne.n	8002248 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e014      	b.n	8002272 <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e012      	b.n	8002272 <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800224c:	893b      	ldrh	r3, [r7, #8]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2200      	movs	r2, #0
 800225e:	2140      	movs	r1, #64	; 0x40
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f831 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e000      	b.n	8002272 <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	80002000 	.word	0x80002000

08002280 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d103      	bne.n	800229e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d007      	beq.n	80022bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	619a      	str	r2, [r3, #24]
  }
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d8:	e01c      	b.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d018      	beq.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022e8:	f7fe feac 	bl	8001044 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d20d      	bcs.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e00f      	b.n	8002334 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4013      	ands	r3, r2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	429a      	cmp	r2, r3
 8002330:	d0d3      	beq.n	80022da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002348:	e02c      	b.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f8dc 	bl	800250c <I2C_IsAcknowledgeFailed>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e02a      	b.n	80023b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d01e      	beq.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800236c:	f7fe fe6a 	bl	8001044 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	d213      	bcs.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e007      	b.n	80023b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d1cb      	bne.n	800234a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c8:	e028      	b.n	800241c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f89c 	bl	800250c <I2C_IsAcknowledgeFailed>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e026      	b.n	800242c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023e4:	f7fe fe2e 	bl	8001044 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d213      	bcs.n	800241c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e007      	b.n	800242c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d1cf      	bne.n	80023ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002440:	e055      	b.n	80024ee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f860 	bl	800250c <I2C_IsAcknowledgeFailed>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e053      	b.n	80024fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	d129      	bne.n	80024b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d105      	bne.n	800247e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e03f      	b.n	80024fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2220      	movs	r2, #32
 8002484:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002492:	400b      	ands	r3, r1
 8002494:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e022      	b.n	80024fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80024be:	f7fe fdc1 	bl	8001044 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d20f      	bcs.n	80024ee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f043 0220 	orr.w	r2, r3, #32
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e007      	b.n	80024fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d1a2      	bne.n	8002442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	fe00e800 	.word	0xfe00e800

0800250c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b10      	cmp	r3, #16
 8002524:	d148      	bne.n	80025b8 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002526:	e01c      	b.n	8002562 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d018      	beq.n	8002562 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <I2C_IsAcknowledgeFailed+0x3a>
 8002536:	f7fe fd85 	bl	8001044 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	429a      	cmp	r2, r3
 8002544:	d20d      	bcs.n	8002562 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e02b      	b.n	80025ba <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b20      	cmp	r3, #32
 800256e:	d1db      	bne.n	8002528 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2210      	movs	r2, #16
 8002576:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2220      	movs	r2, #32
 800257e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff fe7d 	bl	8002280 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <I2C_IsAcknowledgeFailed+0xb8>)
 8002592:	400b      	ands	r3, r1
 8002594:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2204      	movs	r2, #4
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	fe00e800 	.word	0xfe00e800

080025c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	4613      	mov	r3, r2
 80025d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	0d5b      	lsrs	r3, r3, #21
 80025e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <I2C_TransferConfig+0x58>)
 80025ea:	430b      	orrs	r3, r1
 80025ec:	43db      	mvns	r3, r3
 80025ee:	ea02 0103 	and.w	r1, r2, r3
 80025f2:	897b      	ldrh	r3, [r7, #10]
 80025f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025f8:	7a7b      	ldrb	r3, [r7, #9]
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	431a      	orrs	r2, r3
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	431a      	orrs	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	03ff63ff 	.word	0x03ff63ff

08002624 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b20      	cmp	r3, #32
 8002638:	d138      	bne.n	80026ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002644:	2302      	movs	r3, #2
 8002646:	e032      	b.n	80026ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002676:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d139      	bne.n	8002748 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80026de:	2302      	movs	r3, #2
 80026e0:	e033      	b.n	800274a <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2224      	movs	r2, #36	; 0x24
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002710:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800275e:	af00      	add	r7, sp, #0
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f000 beda 	b.w	8003526 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 816e 	beq.w	8002a5e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002782:	4bb5      	ldr	r3, [pc, #724]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d00c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800278e:	4bb2      	ldr	r3, [pc, #712]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d15a      	bne.n	8002850 <HAL_RCC_OscConfig+0xf8>
 800279a:	4baf      	ldr	r3, [pc, #700]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a6:	d153      	bne.n	8002850 <HAL_RCC_OscConfig+0xf8>
 80027a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80027bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d102      	bne.n	80027da <HAL_RCC_OscConfig+0x82>
 80027d4:	4ba0      	ldr	r3, [pc, #640]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0xae>
 80027da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80027ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027f6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002802:	4b95      	ldr	r3, [pc, #596]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800280a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800280e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002812:	fa92 f2a2 	rbit	r2, r2
 8002816:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800281a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800281e:	fab2 f282 	clz	r2, r2
 8002822:	b252      	sxtb	r2, r2
 8002824:	f042 0220 	orr.w	r2, r2, #32
 8002828:	b252      	sxtb	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f002 021f 	and.w	r2, r2, #31
 8002830:	2101      	movs	r1, #1
 8002832:	fa01 f202 	lsl.w	r2, r1, r2
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 810f 	beq.w	8002a5c <HAL_RCC_OscConfig+0x304>
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f040 8109 	bne.w	8002a5c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f000 be6b 	b.w	8003526 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x112>
 800285c:	4b7e      	ldr	r3, [pc, #504]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a7d      	ldr	r2, [pc, #500]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e030      	b.n	80028cc <HAL_RCC_OscConfig+0x174>
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10c      	bne.n	800288e <HAL_RCC_OscConfig+0x136>
 8002874:	4b78      	ldr	r3, [pc, #480]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a77      	ldr	r2, [pc, #476]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 800287a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a74      	ldr	r2, [pc, #464]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e01e      	b.n	80028cc <HAL_RCC_OscConfig+0x174>
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x15c>
 800289a:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b6c      	ldr	r3, [pc, #432]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6b      	ldr	r2, [pc, #428]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0x174>
 80028b4:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a67      	ldr	r2, [pc, #412]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a64      	ldr	r2, [pc, #400]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028cc:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f023 020f 	bic.w	r2, r3, #15
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	495f      	ldr	r1, [pc, #380]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d05a      	beq.n	80029a0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe fbab 	bl	8001044 <HAL_GetTick>
 80028ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	e00a      	b.n	800290a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f4:	f7fe fba6 	bl	8001044 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d902      	bls.n	800290a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	f000 be0e 	b.w	8003526 <HAL_RCC_OscConfig+0xdce>
 800290a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800290e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800291e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_RCC_OscConfig+0x1e4>
 8002936:	4b48      	ldr	r3, [pc, #288]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	e015      	b.n	8002968 <HAL_RCC_OscConfig+0x210>
 800293c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002940:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002954:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002958:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002964:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800296c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002970:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002974:	fa92 f2a2 	rbit	r2, r2
 8002978:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 800297c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b252      	sxtb	r2, r2
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	b252      	sxtb	r2, r2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f002 021f 	and.w	r2, r2, #31
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0aa      	beq.n	80028f4 <HAL_RCC_OscConfig+0x19c>
 800299e:	e05e      	b.n	8002a5e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fb50 	bl	8001044 <HAL_GetTick>
 80029a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029aa:	f7fe fb4b 	bl	8001044 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d902      	bls.n	80029c0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f000 bdb3 	b.w	8003526 <HAL_RCC_OscConfig+0xdce>
 80029c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80029d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_RCC_OscConfig+0x29a>
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x2c6>
 80029f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_RCC_OscConfig+0x300>)
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a22:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002a26:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a2a:	fa92 f2a2 	rbit	r2, r2
 8002a2e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8002a32:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b252      	sxtb	r2, r2
 8002a3c:	f042 0220 	orr.w	r2, r2, #32
 8002a40:	b252      	sxtb	r2, r2
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	f002 021f 	and.w	r2, r2, #31
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1aa      	bne.n	80029aa <HAL_RCC_OscConfig+0x252>
 8002a54:	e003      	b.n	8002a5e <HAL_RCC_OscConfig+0x306>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8170 	beq.w	8002d4e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a6e:	4bd0      	ldr	r3, [pc, #832]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a7a:	4bcd      	ldr	r3, [pc, #820]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d16d      	bne.n	8002b62 <HAL_RCC_OscConfig+0x40a>
 8002a86:	4bca      	ldr	r3, [pc, #808]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d167      	bne.n	8002b62 <HAL_RCC_OscConfig+0x40a>
 8002a92:	2302      	movs	r3, #2
 8002a94:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8002aa4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x36a>
 8002abc:	4bbc      	ldr	r3, [pc, #752]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	e013      	b.n	8002aea <HAL_RCC_OscConfig+0x392>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ada:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ae6:	4bb2      	ldr	r3, [pc, #712]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2202      	movs	r2, #2
 8002aec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002af0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8002afc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b252      	sxtb	r2, r2
 8002b06:	f042 0220 	orr.w	r2, r2, #32
 8002b0a:	b252      	sxtb	r2, r2
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	f002 021f 	and.w	r2, r2, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_RCC_OscConfig+0x3d6>
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d002      	beq.n	8002b2e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f000 bcfc 	b.w	8003526 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2e:	4ba0      	ldr	r3, [pc, #640]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6959      	ldr	r1, [r3, #20]
 8002b3c:	23f8      	movs	r3, #248	; 0xf8
 8002b3e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8002b4e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	4995      	ldr	r1, [pc, #596]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b60:	e0f5      	b.n	8002d4e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8085 	beq.w	8002c78 <HAL_RCC_OscConfig+0x520>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8002b80:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	461a      	mov	r2, r3
 8002b94:	2301      	movs	r3, #1
 8002b96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe fa54 	bl	8001044 <HAL_GetTick>
 8002b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fa4f 	bl	8001044 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d902      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	f000 bcb7 	b.w	8003526 <HAL_RCC_OscConfig+0xdce>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8002bca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_OscConfig+0x490>
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e013      	b.n	8002c10 <HAL_RCC_OscConfig+0x4b8>
 8002be8:	2302      	movs	r3, #2
 8002bea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c00:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c0c:	4b68      	ldr	r3, [pc, #416]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2202      	movs	r2, #2
 8002c12:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c16:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c1a:	fa92 f2a2 	rbit	r2, r2
 8002c1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8002c22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c26:	fab2 f282 	clz	r2, r2
 8002c2a:	b252      	sxtb	r2, r2
 8002c2c:	f042 0220 	orr.w	r2, r2, #32
 8002c30:	b252      	sxtb	r2, r2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	f002 021f 	and.w	r2, r2, #31
 8002c38:	2101      	movs	r1, #1
 8002c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ae      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b5a      	ldr	r3, [pc, #360]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6959      	ldr	r1, [r3, #20]
 8002c52:	23f8      	movs	r3, #248	; 0xf8
 8002c54:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002c64:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	494f      	ldr	r1, [pc, #316]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
 8002c76:	e06a      	b.n	8002d4e <HAL_RCC_OscConfig+0x5f6>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8002c8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe f9cf 	bl	8001044 <HAL_GetTick>
 8002ca6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cac:	f7fe f9ca 	bl	8001044 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d902      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	f000 bc32 	b.w	8003526 <HAL_RCC_OscConfig+0xdce>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8002cd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x59a>
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e013      	b.n	8002d1a <HAL_RCC_OscConfig+0x5c2>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002d04:	2302      	movs	r3, #2
 8002d06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d16:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d20:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002d24:	fa92 f2a2 	rbit	r2, r2
 8002d28:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8002d2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d30:	fab2 f282 	clz	r2, r2
 8002d34:	b252      	sxtb	r2, r2
 8002d36:	f042 0220 	orr.w	r2, r2, #32
 8002d3a:	b252      	sxtb	r2, r2
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	f002 021f 	and.w	r2, r2, #31
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ae      	bne.n	8002cac <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80d8 	beq.w	8002f0e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d067      	beq.n	8002e38 <HAL_RCC_OscConfig+0x6e0>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8002d7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_OscConfig+0x65c>)
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7fe f958 	bl	8001044 <HAL_GetTick>
 8002d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d98:	e00e      	b.n	8002db8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe f953 	bl	8001044 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d906      	bls.n	8002db8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e3bb      	b.n	8003526 <HAL_RCC_OscConfig+0xdce>
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	10908120 	.word	0x10908120
 8002db8:	2302      	movs	r3, #2
 8002dba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002dca:	2302      	movs	r3, #2
 8002dcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dd4:	fa93 f2a3 	rbit	r2, r3
 8002dd8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002de2:	2202      	movs	r2, #2
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002df4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	4ba5      	ldr	r3, [pc, #660]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002dfe:	2102      	movs	r1, #2
 8002e00:	6019      	str	r1, [r3, #0]
 8002e02:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	fa93 f1a3 	rbit	r1, r3
 8002e0c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e10:	6019      	str	r1, [r3, #0]
  return(result);
 8002e12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0b1      	beq.n	8002d9a <HAL_RCC_OscConfig+0x642>
 8002e36:	e06a      	b.n	8002f0e <HAL_RCC_OscConfig+0x7b6>
 8002e38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e4e:	601a      	str	r2, [r3, #0]
  return(result);
 8002e50:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b8c      	ldr	r3, [pc, #560]	; (8003090 <HAL_RCC_OscConfig+0x938>)
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	461a      	mov	r2, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe f8ec 	bl	8001044 <HAL_GetTick>
 8002e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	e009      	b.n	8002e86 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e72:	f7fe f8e7 	bl	8001044 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e34f      	b.n	8003526 <HAL_RCC_OscConfig+0xdce>
 8002e86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	fa93 f2a3 	rbit	r2, r3
 8002e98:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002eba:	2202      	movs	r2, #2
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ecc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ece:	4b6f      	ldr	r3, [pc, #444]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ed2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	6019      	str	r1, [r3, #0]
 8002eda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	fa93 f1a3 	rbit	r1, r3
 8002ee4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ee8:	6019      	str	r1, [r3, #0]
  return(result);
 8002eea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1b1      	bne.n	8002e72 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8159 	beq.w	80031d0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d112      	bne.n	8002f56 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b56      	ldr	r3, [pc, #344]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a55      	ldr	r2, [pc, #340]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	61d3      	str	r3, [r2, #28]
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	f107 030c 	add.w	r3, r7, #12
 8002f4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <HAL_RCC_OscConfig+0x93c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11a      	bne.n	8002f98 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_OscConfig+0x93c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a4b      	ldr	r2, [pc, #300]	; (8003094 <HAL_RCC_OscConfig+0x93c>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe f869 	bl	8001044 <HAL_GetTick>
 8002f72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	e009      	b.n	8002f8c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe f864 	bl	8001044 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b64      	cmp	r3, #100	; 0x64
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e2cc      	b.n	8003526 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x93c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x858>
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a39      	ldr	r2, [pc, #228]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	e02f      	b.n	8003010 <HAL_RCC_OscConfig+0x8b8>
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x87c>
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a33      	ldr	r2, [pc, #204]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6213      	str	r3, [r2, #32]
 8002fc6:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a30      	ldr	r2, [pc, #192]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	e01d      	b.n	8003010 <HAL_RCC_OscConfig+0x8b8>
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x8a0>
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6213      	str	r3, [r2, #32]
 8002fea:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a27      	ldr	r2, [pc, #156]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6213      	str	r3, [r2, #32]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0x8b8>
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a20      	ldr	r2, [pc, #128]	; (800308c <HAL_RCC_OscConfig+0x934>)
 800300a:	f023 0304 	bic.w	r3, r3, #4
 800300e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d06b      	beq.n	80030f2 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe f813 	bl	8001044 <HAL_GetTick>
 800301e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe f80e 	bl	8001044 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e274      	b.n	8003526 <HAL_RCC_OscConfig+0xdce>
 800303c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003040:	2202      	movs	r2, #2
 8003042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003058:	2202      	movs	r2, #2
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fa93 f2a3 	rbit	r2, r3
 8003066:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800306a:	601a      	str	r2, [r3, #0]
  return(result);
 800306c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003070:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d108      	bne.n	8003098 <HAL_RCC_OscConfig+0x940>
 8003086:	4b01      	ldr	r3, [pc, #4]	; (800308c <HAL_RCC_OscConfig+0x934>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	e013      	b.n	80030b4 <HAL_RCC_OscConfig+0x95c>
 800308c:	40021000 	.word	0x40021000
 8003090:	10908120 	.word	0x10908120
 8003094:	40007000 	.word	0x40007000
 8003098:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800309c:	2202      	movs	r2, #2
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	4bbb      	ldr	r3, [pc, #748]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80030b8:	2102      	movs	r1, #2
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	fa92 f1a2 	rbit	r1, r2
 80030c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030ca:	6011      	str	r1, [r2, #0]
  return(result);
 80030cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	fab2 f282 	clz	r2, r2
 80030d6:	b252      	sxtb	r2, r2
 80030d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030dc:	b252      	sxtb	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f002 021f 	and.w	r2, r2, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d099      	beq.n	8003024 <HAL_RCC_OscConfig+0x8cc>
 80030f0:	e064      	b.n	80031bc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fd ffa7 	bl	8001044 <HAL_GetTick>
 80030f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fd ffa2 	bl	8001044 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e208      	b.n	8003526 <HAL_RCC_OscConfig+0xdce>
 8003114:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003118:	2202      	movs	r2, #2
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003130:	2202      	movs	r2, #2
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003142:	601a      	str	r2, [r3, #0]
  return(result);
 8003144:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003148:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d102      	bne.n	8003164 <HAL_RCC_OscConfig+0xa0c>
 800315e:	4b90      	ldr	r3, [pc, #576]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	e00d      	b.n	8003180 <HAL_RCC_OscConfig+0xa28>
 8003164:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003168:	2202      	movs	r2, #2
 800316a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	fa93 f2a3 	rbit	r2, r3
 8003176:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003184:	2102      	movs	r1, #2
 8003186:	6011      	str	r1, [r2, #0]
 8003188:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	fa92 f1a2 	rbit	r1, r2
 8003192:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003196:	6011      	str	r1, [r2, #0]
  return(result);
 8003198:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	fab2 f282 	clz	r2, r2
 80031a2:	b252      	sxtb	r2, r2
 80031a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a8:	b252      	sxtb	r2, r2
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	f002 021f 	and.w	r2, r2, #31
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f202 	lsl.w	r2, r1, r2
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d19f      	bne.n	80030fc <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c4:	4b76      	ldr	r3, [pc, #472]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4a75      	ldr	r2, [pc, #468]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 81a4 	beq.w	8003524 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031dc:	4b70      	ldr	r3, [pc, #448]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	f000 819b 	beq.w	8003520 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	f040 8113 	bne.w	800341c <HAL_RCC_OscConfig+0xcc4>
 80031f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80031fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800320e:	601a      	str	r2, [r3, #0]
  return(result);
 8003210:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003214:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800321e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	461a      	mov	r2, r3
 8003226:	2300      	movs	r3, #0
 8003228:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fd ff0b 	bl	8001044 <HAL_GetTick>
 800322e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003232:	e009      	b.n	8003248 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003234:	f7fd ff06 	bl	8001044 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e16e      	b.n	8003526 <HAL_RCC_OscConfig+0xdce>
 8003248:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800324c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003260:	601a      	str	r2, [r3, #0]
  return(result);
 8003262:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003266:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d102      	bne.n	8003282 <HAL_RCC_OscConfig+0xb2a>
 800327c:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	e01b      	b.n	80032ba <HAL_RCC_OscConfig+0xb62>
 8003282:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	fa93 f2a3 	rbit	r2, r3
 8003296:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80032be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032c2:	6011      	str	r1, [r2, #0]
 80032c4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	fa92 f1a2 	rbit	r1, r2
 80032ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032d2:	6011      	str	r1, [r2, #0]
  return(result);
 80032d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	fab2 f282 	clz	r2, r2
 80032de:	b252      	sxtb	r2, r2
 80032e0:	f042 0220 	orr.w	r2, r2, #32
 80032e4:	b252      	sxtb	r2, r2
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f002 021f 	and.w	r2, r2, #31
 80032ec:	2101      	movs	r1, #1
 80032ee:	fa01 f202 	lsl.w	r2, r1, r2
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d19d      	bne.n	8003234 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f8:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	430b      	orrs	r3, r1
 800330e:	4924      	ldr	r1, [pc, #144]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
 8003314:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800331c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800332c:	601a      	str	r2, [r3, #0]
  return(result);
 800332e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003332:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800333c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	461a      	mov	r2, r3
 8003344:	2301      	movs	r3, #1
 8003346:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fd fe7c 	bl	8001044 <HAL_GetTick>
 800334c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003350:	e009      	b.n	8003366 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003352:	f7fd fe77 	bl	8001044 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0df      	b.n	8003526 <HAL_RCC_OscConfig+0xdce>
 8003366:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800336a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800337e:	601a      	str	r2, [r3, #0]
  return(result);
 8003380:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003384:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d104      	bne.n	80033a4 <HAL_RCC_OscConfig+0xc4c>
 800339a:	4b01      	ldr	r3, [pc, #4]	; (80033a0 <HAL_RCC_OscConfig+0xc48>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xc84>
 80033a0:	40021000 	.word	0x40021000
 80033a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	fa93 f2a3 	rbit	r2, r3
 80033d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	4b55      	ldr	r3, [pc, #340]	; (8003530 <HAL_RCC_OscConfig+0xdd8>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033e4:	6011      	str	r1, [r2, #0]
 80033e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	fa92 f1a2 	rbit	r1, r2
 80033f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033f4:	6011      	str	r1, [r2, #0]
  return(result);
 80033f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	fab2 f282 	clz	r2, r2
 8003400:	b252      	sxtb	r2, r2
 8003402:	f042 0220 	orr.w	r2, r2, #32
 8003406:	b252      	sxtb	r2, r2
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f002 021f 	and.w	r2, r2, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f202 	lsl.w	r2, r1, r2
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d09b      	beq.n	8003352 <HAL_RCC_OscConfig+0xbfa>
 800341a:	e083      	b.n	8003524 <HAL_RCC_OscConfig+0xdcc>
 800341c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	fa93 f2a3 	rbit	r2, r3
 8003430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003434:	601a      	str	r2, [r3, #0]
  return(result);
 8003436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800343a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003444:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	461a      	mov	r2, r3
 800344c:	2300      	movs	r3, #0
 800344e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fd fdf8 	bl	8001044 <HAL_GetTick>
 8003454:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003458:	e009      	b.n	800346e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345a:	f7fd fdf3 	bl	8001044 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e05b      	b.n	8003526 <HAL_RCC_OscConfig+0xdce>
 800346e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003472:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003486:	601a      	str	r2, [r3, #0]
  return(result);
 8003488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800348c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d102      	bne.n	80034a8 <HAL_RCC_OscConfig+0xd50>
 80034a2:	4b23      	ldr	r3, [pc, #140]	; (8003530 <HAL_RCC_OscConfig+0xdd8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	e01b      	b.n	80034e0 <HAL_RCC_OscConfig+0xd88>
 80034a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f107 0320 	add.w	r3, r7, #32
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f107 031c 	add.w	r3, r7, #28
 80034c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	fa93 f2a3 	rbit	r2, r3
 80034d6:	f107 0318 	add.w	r3, r7, #24
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_RCC_OscConfig+0xdd8>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f107 0214 	add.w	r2, r7, #20
 80034e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034e8:	6011      	str	r1, [r2, #0]
 80034ea:	f107 0214 	add.w	r2, r7, #20
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	fa92 f1a2 	rbit	r1, r2
 80034f4:	f107 0210 	add.w	r2, r7, #16
 80034f8:	6011      	str	r1, [r2, #0]
  return(result);
 80034fa:	f107 0210 	add.w	r2, r7, #16
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	b252      	sxtb	r2, r2
 8003506:	f042 0220 	orr.w	r2, r2, #32
 800350a:	b252      	sxtb	r2, r2
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	f002 021f 	and.w	r2, r2, #31
 8003512:	2101      	movs	r1, #1
 8003514:	fa01 f202 	lsl.w	r2, r1, r2
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d19d      	bne.n	800345a <HAL_RCC_OscConfig+0xd02>
 800351e:	e001      	b.n	8003524 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b09e      	sub	sp, #120	; 0x78
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e164      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0207 	bic.w	r2, r3, #7
 8003562:	498d      	ldr	r1, [pc, #564]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e14c      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b84      	ldr	r3, [pc, #528]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4981      	ldr	r1, [pc, #516]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80df 	beq.w	8003766 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d13d      	bne.n	800362c <HAL_RCC_ClockConfig+0xf8>
 80035b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d102      	bne.n	80035da <HAL_RCC_ClockConfig+0xa6>
 80035d4:	4b71      	ldr	r3, [pc, #452]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e00f      	b.n	80035fa <HAL_RCC_ClockConfig+0xc6>
 80035da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	667b      	str	r3, [r7, #100]	; 0x64
 80035e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ec:	663b      	str	r3, [r7, #96]	; 0x60
 80035ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f6:	4b69      	ldr	r3, [pc, #420]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003602:	fa92 f2a2 	rbit	r2, r2
 8003606:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8003608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800360a:	fab2 f282 	clz	r2, r2
 800360e:	b252      	sxtb	r2, r2
 8003610:	f042 0220 	orr.w	r2, r2, #32
 8003614:	b252      	sxtb	r2, r2
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f002 021f 	and.w	r2, r2, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d17d      	bne.n	8003724 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0f4      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d13d      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x17c>
 8003634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003638:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8003642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <HAL_RCC_ClockConfig+0x12a>
 8003658:	4b50      	ldr	r3, [pc, #320]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	e00f      	b.n	800367e <HAL_RCC_ClockConfig+0x14a>
 800365e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	647b      	str	r3, [r7, #68]	; 0x44
 800366c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
 8003672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800367a:	4b48      	ldr	r3, [pc, #288]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003682:	63ba      	str	r2, [r7, #56]	; 0x38
 8003684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003686:	fa92 f2a2 	rbit	r2, r2
 800368a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 800368c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800368e:	fab2 f282 	clz	r2, r2
 8003692:	b252      	sxtb	r2, r2
 8003694:	f042 0220 	orr.w	r2, r2, #32
 8003698:	b252      	sxtb	r2, r2
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f002 021f 	and.w	r2, r2, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d13b      	bne.n	8003724 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0b2      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e2>
 80036b0:	2302      	movs	r3, #2
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a4>
 80036d2:	4b32      	ldr	r3, [pc, #200]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	e00d      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1c0>
 80036d8:	2302      	movs	r3, #2
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
 80036e4:	2302      	movs	r3, #2
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	2202      	movs	r2, #2
 80036f6:	61ba      	str	r2, [r7, #24]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	fa92 f2a2 	rbit	r2, r2
 80036fe:	617a      	str	r2, [r7, #20]
  return(result);
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	fab2 f282 	clz	r2, r2
 8003706:	b252      	sxtb	r2, r2
 8003708:	f042 0220 	orr.w	r2, r2, #32
 800370c:	b252      	sxtb	r2, r2
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	f002 021f 	and.w	r2, r2, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f202 	lsl.w	r2, r1, r2
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e078      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 0203 	bic.w	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	491a      	ldr	r1, [pc, #104]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003736:	f7fd fc85 	bl	8001044 <HAL_GetTick>
 800373a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373c:	e00a      	b.n	8003754 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373e:	f7fd fc81 	bl	8001044 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e060      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 020c 	and.w	r2, r3, #12
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	429a      	cmp	r2, r3
 8003764:	d1eb      	bne.n	800373e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d215      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 0207 	bic.w	r2, r3, #7
 800377c:	4906      	ldr	r1, [pc, #24]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d006      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e03f      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e2>
 8003796:	bf00      	nop
 8003798:	40022000 	.word	0x40022000
 800379c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_RCC_ClockConfig+0x2ec>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4919      	ldr	r1, [pc, #100]	; (8003820 <HAL_RCC_ClockConfig+0x2ec>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_RCC_ClockConfig+0x2ec>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4911      	ldr	r1, [pc, #68]	; (8003820 <HAL_RCC_ClockConfig+0x2ec>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037de:	f000 f825 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037e2:	4601      	mov	r1, r0
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCC_ClockConfig+0x2ec>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037ec:	23f0      	movs	r3, #240	; 0xf0
 80037ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <HAL_RCC_ClockConfig+0x2f0>)
 8003804:	5cd3      	ldrb	r3, [r2, r3]
 8003806:	fa21 f303 	lsr.w	r3, r1, r3
 800380a:	4a07      	ldr	r2, [pc, #28]	; (8003828 <HAL_RCC_ClockConfig+0x2f4>)
 800380c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800380e:	2000      	movs	r0, #0
 8003810:	f7fd fbd4 	bl	8000fbc <HAL_InitTick>
  
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3778      	adds	r7, #120	; 0x78
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	08007604 	.word	0x08007604
 8003828:	20000008 	.word	0x20000008

0800382c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b08b      	sub	sp, #44	; 0x2c
 8003830:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	2300      	movs	r3, #0
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003846:	4b29      	ldr	r3, [pc, #164]	; (80038ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b04      	cmp	r3, #4
 8003854:	d002      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x30>
 8003856:	2b08      	cmp	r3, #8
 8003858:	d003      	beq.n	8003862 <HAL_RCC_GetSysClockFreq+0x36>
 800385a:	e03c      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800385c:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800385e:	623b      	str	r3, [r7, #32]
      break;
 8003860:	e03c      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003868:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800386c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	607b      	str	r3, [r7, #4]
  return(result);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003886:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f003 020f 	and.w	r2, r3, #15
 800388e:	230f      	movs	r3, #15
 8003890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	60fb      	str	r3, [r7, #12]
  return(result);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
 80038a4:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80038b4:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
 80038c4:	e004      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	4a0c      	ldr	r2, [pc, #48]	; (80038fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	623b      	str	r3, [r7, #32]
      break;
 80038d4:	e002      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038d8:	623b      	str	r3, [r7, #32]
      break;
 80038da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038dc:	6a3b      	ldr	r3, [r7, #32]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	372c      	adds	r7, #44	; 0x2c
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	007a1200 	.word	0x007a1200
 80038f4:	080075e4 	.word	0x080075e4
 80038f8:	080075f4 	.word	0x080075f4
 80038fc:	003d0900 	.word	0x003d0900

08003900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_RCC_GetHCLKFreq+0x14>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000008 	.word	0x20000008

08003918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800391e:	f7ff ffef 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 8003922:	4601      	mov	r1, r0
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800392c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003930:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	603b      	str	r3, [r7, #0]
  return(result);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003946:	5cd3      	ldrb	r3, [r2, r3]
 8003948:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	08007614 	.word	0x08007614

0800395c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003962:	f7ff ffcd 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 8003966:	4601      	mov	r1, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003970:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003974:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	603b      	str	r3, [r7, #0]
  return(result);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_RCC_GetPCLK2Freq+0x40>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	08007614 	.word	0x08007614

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b092      	sub	sp, #72	; 0x48
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80cf 	beq.w	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c4:	4b86      	ldr	r3, [pc, #536]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10e      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d0:	4b83      	ldr	r3, [pc, #524]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	4a82      	ldr	r2, [pc, #520]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039da:	61d3      	str	r3, [r2, #28]
 80039dc:	4b80      	ldr	r3, [pc, #512]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	4b7d      	ldr	r3, [pc, #500]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039fa:	4b7a      	ldr	r3, [pc, #488]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a79      	ldr	r2, [pc, #484]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a06:	f7fd fb1d 	bl	8001044 <HAL_GetTick>
 8003a0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	e008      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7fd fb19 	bl	8001044 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	; 0x64
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e0da      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	4b70      	ldr	r3, [pc, #448]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a2c:	4b6c      	ldr	r3, [pc, #432]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d07c      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d075      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a4a:	4b65      	ldr	r3, [pc, #404]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	461a      	mov	r2, r3
 8003a72:	2301      	movs	r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	461a      	mov	r2, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a98:	4a51      	ldr	r2, [pc, #324]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d046      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fd facc 	bl	8001044 <HAL_GetTick>
 8003aac:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fd fac8 	bl	8001044 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e087      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ade:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	fab3 f383 	clz	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f043 0302 	orr.w	r3, r3, #2
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d102      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003af4:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	e007      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003afa:	2302      	movs	r3, #2
 8003afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	fa93 f3a3 	rbit	r3, r3
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	613a      	str	r2, [r7, #16]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	fa92 f2a2 	rbit	r2, r2
 8003b14:	60fa      	str	r2, [r7, #12]
  return(result);
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b252      	sxtb	r2, r2
 8003b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b22:	b252      	sxtb	r2, r2
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	f002 021f 	and.w	r2, r2, #31
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0bc      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b36:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4927      	ldr	r1, [pc, #156]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	4a22      	ldr	r2, [pc, #136]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	f023 0203 	bic.w	r2, r3, #3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	491a      	ldr	r1, [pc, #104]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b86:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f023 0210 	bic.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4913      	ldr	r1, [pc, #76]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	490b      	ldr	r1, [pc, #44]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bc2:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4904      	ldr	r1, [pc, #16]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3748      	adds	r7, #72	; 0x48
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40007000 	.word	0x40007000
 8003be8:	10908100 	.word	0x10908100

08003bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e07c      	b.n	8003cf8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f002 f8a7 	bl	8005d6c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c34:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c3e:	d902      	bls.n	8003c46 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e002      	b.n	8003c4c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c54:	d007      	beq.n	8003c66 <HAL_SPI_Init+0x7a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c5e:	d002      	beq.n	8003c66 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c76:	d903      	bls.n	8003c80 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c7e:	e002      	b.n	8003c86 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	ea42 0103 	orr.w	r1, r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	f003 0204 	and.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	ea42 0103 	orr.w	r1, r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_SPI_Transmit+0x26>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e13e      	b.n	8003fa4 <HAL_SPI_Transmit+0x2a4>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d2e:	f7fd f989 	bl	8001044 <HAL_GetTick>
 8003d32:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d002      	beq.n	8003d46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
 8003d42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d44:	e125      	b.n	8003f92 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_SPI_Transmit+0x52>
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d56:	e11c      	b.n	8003f92 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d107      	bne.n	8003db4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d007      	beq.n	8003dd2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dda:	d947      	bls.n	8003e6c <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <HAL_SPI_Transmit+0xee>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d138      	bne.n	8003e60 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e0c:	e028      	b.n	8003e60 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d10f      	bne.n	8003e3c <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	881a      	ldrh	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e3a:	e011      	b.n	8003e60 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_SPI_Transmit+0x15a>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d00a      	beq.n	8003e60 <HAL_SPI_Transmit+0x160>
 8003e4a:	f7fd f8fb 	bl	8001044 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d802      	bhi.n	8003e60 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e5e:	e098      	b.n	8003f92 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1d1      	bne.n	8003e0e <HAL_SPI_Transmit+0x10e>
 8003e6a:	e070      	b.n	8003f4e <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <HAL_SPI_Transmit+0x17e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d162      	bne.n	8003f44 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d90f      	bls.n	8003ea8 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	881a      	ldrh	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	3302      	adds	r3, #2
 8003e96:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b02      	subs	r3, #2
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ea6:	e04d      	b.n	8003f44 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	60ba      	str	r2, [r7, #8]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	320c      	adds	r2, #12
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ec6:	e03d      	b.n	8003f44 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d124      	bne.n	8003f20 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d90f      	bls.n	8003f00 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	881a      	ldrh	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	3302      	adds	r3, #2
 8003eee:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b02      	subs	r3, #2
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003efe:	e021      	b.n	8003f44 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	60ba      	str	r2, [r7, #8]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	320c      	adds	r2, #12
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f1e:	e011      	b.n	8003f44 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_SPI_Transmit+0x23e>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d00a      	beq.n	8003f44 <HAL_SPI_Transmit+0x244>
 8003f2e:	f7fd f889 	bl	8001044 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d802      	bhi.n	8003f44 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f42:	e026      	b.n	8003f92 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1bc      	bne.n	8003ec8 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	6839      	ldr	r1, [r7, #0]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fb02 	bl	800455c <SPI_EndRxTxTransaction>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e000      	b.n	8003f92 <HAL_SPI_Transmit+0x292>
  }

error:
 8003f90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x32>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e1e2      	b.n	80043a4 <HAL_SPI_TransmitReceive+0x3f8>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fe6:	f7fd f82d 	bl	8001044 <HAL_GetTick>
 8003fea:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d00e      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x74>
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004008:	d106      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x6c>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d003      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8004018:	2302      	movs	r3, #2
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800401e:	e1b7      	b.n	8004390 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_SPI_TransmitReceive+0x86>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_SPI_TransmitReceive+0x86>
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004038:	e1aa      	b.n	8004390 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b04      	cmp	r3, #4
 8004044:	d003      	beq.n	800404e <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2205      	movs	r2, #5
 800404a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	887a      	ldrh	r2, [r7, #2]
 800405e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	887a      	ldrh	r2, [r7, #2]
 8004066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	887a      	ldrh	r2, [r7, #2]
 800407a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004090:	d805      	bhi.n	800409e <HAL_SPI_TransmitReceive+0xf2>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d908      	bls.n	80040b0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	e007      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b40      	cmp	r3, #64	; 0x40
 80040cc:	d007      	beq.n	80040de <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e6:	d975      	bls.n	80041d4 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x14e>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d160      	bne.n	80041bc <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	881a      	ldrh	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	3302      	adds	r3, #2
 8004108:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004118:	e050      	b.n	80041bc <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01c      	beq.n	800415a <HAL_SPI_TransmitReceive+0x1ae>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d017      	beq.n	800415a <HAL_SPI_TransmitReceive+0x1ae>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b02      	cmp	r3, #2
 8004136:	d110      	bne.n	800415a <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	881a      	ldrh	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3302      	adds	r3, #2
 8004146:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01a      	beq.n	800419c <HAL_SPI_TransmitReceive+0x1f0>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d113      	bne.n	800419c <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	b29a      	uxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3302      	adds	r3, #2
 8004184:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004198:	2301      	movs	r3, #1
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d00b      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x210>
 80041a4:	f7fc ff4e 	bl	8001044 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d803      	bhi.n	80041bc <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041ba:	e0e9      	b.n	8004390 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1a9      	bne.n	800411a <HAL_SPI_TransmitReceive+0x16e>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1a3      	bne.n	800411a <HAL_SPI_TransmitReceive+0x16e>
 80041d2:	e0c9      	b.n	8004368 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x23c>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	f040 80b3 	bne.w	800434e <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d90f      	bls.n	8004212 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	881a      	ldrh	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3302      	adds	r3, #2
 8004200:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b02      	subs	r3, #2
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004210:	e09d      	b.n	800434e <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	60ba      	str	r2, [r7, #8]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	320c      	adds	r2, #12
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004230:	e08d      	b.n	800434e <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d031      	beq.n	800429c <HAL_SPI_TransmitReceive+0x2f0>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d02c      	beq.n	800429c <HAL_SPI_TransmitReceive+0x2f0>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b02      	cmp	r3, #2
 800424e:	d125      	bne.n	800429c <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d90f      	bls.n	800427a <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	881a      	ldrh	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3302      	adds	r3, #2
 8004268:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b02      	subs	r3, #2
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004278:	e00e      	b.n	8004298 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	60ba      	str	r2, [r7, #8]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	320c      	adds	r2, #12
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d042      	beq.n	800432e <HAL_SPI_TransmitReceive+0x382>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d13b      	bne.n	800432e <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d920      	bls.n	8004304 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3302      	adds	r3, #2
 80042d2:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b02      	subs	r3, #2
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d81b      	bhi.n	800432a <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	e012      	b.n	800432a <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f103 020c 	add.w	r2, r3, #12
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	6079      	str	r1, [r7, #4]
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800432a:	2301      	movs	r3, #1
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d00b      	beq.n	800434e <HAL_SPI_TransmitReceive+0x3a2>
 8004336:	f7fc fe85 	bl	8001044 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004342:	429a      	cmp	r2, r3
 8004344:	d803      	bhi.n	800434e <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800434c:	e020      	b.n	8004390 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	f47f af6c 	bne.w	8004232 <HAL_SPI_TransmitReceive+0x286>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	f47f af65 	bne.w	8004232 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f8f5 	bl	800455c <SPI_EndRxTxTransaction>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438c:	e000      	b.n	8004390 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 800438e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3728      	adds	r7, #40	; 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ba:	e04c      	b.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d048      	beq.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <SPI_WaitFlagStateUntilTimeout+0x2e>
 80043ca:	f7fc fe3b 	bl	8001044 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d83d      	bhi.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f2:	d111      	bne.n	8004418 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fc:	d004      	beq.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d107      	bne.n	8004418 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004416:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004420:	d10f      	bne.n	8004442 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004440:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00e      	b.n	8004474 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	d101      	bne.n	800446a <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004466:	2201      	movs	r2, #1
 8004468:	e000      	b.n	800446c <SPI_WaitFlagStateUntilTimeout+0xc0>
 800446a:	2200      	movs	r2, #0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d1a4      	bne.n	80043bc <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800448a:	e05a      	b.n	8004542 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004492:	d109      	bne.n	80044a8 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	d048      	beq.n	8004542 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
 80044b6:	f7fc fdc5 	bl	8001044 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d83d      	bhi.n	8004542 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044de:	d111      	bne.n	8004504 <SPI_WaitFifoStateUntilTimeout+0x88>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e8:	d004      	beq.n	80044f4 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f2:	d107      	bne.n	8004504 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004502:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450c:	d10f      	bne.n	800452e <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800452c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e008      	b.n	8004554 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	429a      	cmp	r2, r3
 8004550:	d19c      	bne.n	800448c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff ff81 	bl	800447c <SPI_WaitFifoStateUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e027      	b.n	80045e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	2180      	movs	r1, #128	; 0x80
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff ff06 	bl	80043ac <SPI_WaitFlagStateUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045aa:	f043 0220 	orr.w	r2, r3, #32
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e014      	b.n	80045e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2200      	movs	r2, #0
 80045be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff ff5a 	bl	800447c <SPI_WaitFifoStateUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e000      	b.n	80045e0 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e01d      	b.n	8004636 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f001 fbee 	bl	8005df0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 f80a 	bl	8004640 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a32      	ldr	r2, [pc, #200]	; (8004720 <TIM_Base_SetConfig+0xe0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d007      	beq.n	800466c <TIM_Base_SetConfig+0x2c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d003      	beq.n	800466c <TIM_Base_SetConfig+0x2c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <TIM_Base_SetConfig+0xe4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d108      	bne.n	800467e <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a27      	ldr	r2, [pc, #156]	; (8004720 <TIM_Base_SetConfig+0xe0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <TIM_Base_SetConfig+0x6e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468c:	d00f      	beq.n	80046ae <TIM_Base_SetConfig+0x6e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a24      	ldr	r2, [pc, #144]	; (8004724 <TIM_Base_SetConfig+0xe4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00b      	beq.n	80046ae <TIM_Base_SetConfig+0x6e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a23      	ldr	r2, [pc, #140]	; (8004728 <TIM_Base_SetConfig+0xe8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <TIM_Base_SetConfig+0x6e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a22      	ldr	r2, [pc, #136]	; (800472c <TIM_Base_SetConfig+0xec>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_Base_SetConfig+0x6e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <TIM_Base_SetConfig+0xf0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d108      	bne.n	80046c0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <TIM_Base_SetConfig+0xe0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00b      	beq.n	8004704 <TIM_Base_SetConfig+0xc4>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0e      	ldr	r2, [pc, #56]	; (8004728 <TIM_Base_SetConfig+0xe8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d007      	beq.n	8004704 <TIM_Base_SetConfig+0xc4>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0d      	ldr	r2, [pc, #52]	; (800472c <TIM_Base_SetConfig+0xec>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d003      	beq.n	8004704 <TIM_Base_SetConfig+0xc4>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <TIM_Base_SetConfig+0xf0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d103      	bne.n	800470c <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	615a      	str	r2, [r3, #20]
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40000400 	.word	0x40000400
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800

08004734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004748:	2302      	movs	r3, #2
 800474a:	e038      	b.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d108      	bne.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004774:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004798:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
} 
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40012c00 	.word	0x40012c00

080047d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e043      	b.n	800486a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f001 fb1a 	bl	8005e30 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2224      	movs	r2, #36	; 0x24
 8004800:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f8b9 	bl	800498c <UART_SetConfig>
 800481a:	4603      	mov	r3, r0
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e022      	b.n	800486a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa13 	bl	8004c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004840:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004850:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa9a 	bl	8004d9c <UART_CheckIdleState>
 8004868:	4603      	mov	r3, r0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b088      	sub	sp, #32
 8004876:	af02      	add	r7, sp, #8
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b20      	cmp	r3, #32
 8004890:	d177      	bne.n	8004982 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_UART_Transmit+0x2c>
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e070      	b.n	8004984 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Transmit+0x3e>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e069      	b.n	8004984 <HAL_UART_Transmit+0x112>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2221      	movs	r2, #33	; 0x21
 80048c2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80048c6:	f7fc fbbd 	bl	8001044 <HAL_GetTick>
 80048ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	88fa      	ldrh	r2, [r7, #6]
 80048d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80048dc:	e034      	b.n	8004948 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2180      	movs	r1, #128	; 0x80
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fa97 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e03c      	b.n	8004984 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004912:	d111      	bne.n	8004938 <HAL_UART_Transmit+0xc6>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10d      	bne.n	8004938 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	881a      	ldrh	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492c:	b292      	uxth	r2, r2
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	3302      	adds	r3, #2
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	e007      	b.n	8004948 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	60ba      	str	r2, [r7, #8]
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	b292      	uxth	r2, r2
 8004946:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1c4      	bne.n	80048de <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2200      	movs	r2, #0
 800495c:	2140      	movs	r1, #64	; 0x40
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fa65 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e00a      	b.n	8004984 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004998:	2310      	movs	r3, #16
 800499a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 800499c:	2300      	movs	r3, #0
 800499e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b9f      	ldr	r3, [pc, #636]	; (8004c44 <UART_SetConfig+0x2b8>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a8e      	ldr	r2, [pc, #568]	; (8004c48 <UART_SetConfig+0x2bc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d121      	bne.n	8004a58 <UART_SetConfig+0xcc>
 8004a14:	4b8d      	ldr	r3, [pc, #564]	; (8004c4c <UART_SetConfig+0x2c0>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d817      	bhi.n	8004a50 <UART_SetConfig+0xc4>
 8004a20:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <UART_SetConfig+0x9c>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a45 	.word	0x08004a45
 8004a30:	08004a4b 	.word	0x08004a4b
 8004a34:	08004a3f 	.word	0x08004a3f
 8004a38:	2300      	movs	r3, #0
 8004a3a:	75fb      	strb	r3, [r7, #23]
 8004a3c:	e01e      	b.n	8004a7c <UART_SetConfig+0xf0>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	75fb      	strb	r3, [r7, #23]
 8004a42:	e01b      	b.n	8004a7c <UART_SetConfig+0xf0>
 8004a44:	2304      	movs	r3, #4
 8004a46:	75fb      	strb	r3, [r7, #23]
 8004a48:	e018      	b.n	8004a7c <UART_SetConfig+0xf0>
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	75fb      	strb	r3, [r7, #23]
 8004a4e:	e015      	b.n	8004a7c <UART_SetConfig+0xf0>
 8004a50:	2310      	movs	r3, #16
 8004a52:	75fb      	strb	r3, [r7, #23]
 8004a54:	bf00      	nop
 8004a56:	e011      	b.n	8004a7c <UART_SetConfig+0xf0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a7c      	ldr	r2, [pc, #496]	; (8004c50 <UART_SetConfig+0x2c4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d102      	bne.n	8004a68 <UART_SetConfig+0xdc>
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
 8004a66:	e009      	b.n	8004a7c <UART_SetConfig+0xf0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a79      	ldr	r2, [pc, #484]	; (8004c54 <UART_SetConfig+0x2c8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d102      	bne.n	8004a78 <UART_SetConfig+0xec>
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
 8004a76:	e001      	b.n	8004a7c <UART_SetConfig+0xf0>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a84:	d16f      	bne.n	8004b66 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d857      	bhi.n	8004b3c <UART_SetConfig+0x1b0>
 8004a8c:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <UART_SetConfig+0x108>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004ad5 	.word	0x08004ad5
 8004a9c:	08004af1 	.word	0x08004af1
 8004aa0:	08004b3d 	.word	0x08004b3d
 8004aa4:	08004b0b 	.word	0x08004b0b
 8004aa8:	08004b3d 	.word	0x08004b3d
 8004aac:	08004b3d 	.word	0x08004b3d
 8004ab0:	08004b3d 	.word	0x08004b3d
 8004ab4:	08004b27 	.word	0x08004b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ab8:	f7fe ff2e 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8004abc:	4603      	mov	r3, r0
 8004abe:	005a      	lsls	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	82bb      	strh	r3, [r7, #20]
        break;
 8004ad2:	e036      	b.n	8004b42 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004ad4:	f7fe ff42 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	005a      	lsls	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	441a      	add	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	82bb      	strh	r3, [r7, #20]
        break;
 8004aee:	e028      	b.n	8004b42 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004afa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6852      	ldr	r2, [r2, #4]
 8004b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b06:	82bb      	strh	r3, [r7, #20]
        break;
 8004b08:	e01b      	b.n	8004b42 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b0a:	f7fe fe8f 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	005a      	lsls	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	441a      	add	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	82bb      	strh	r3, [r7, #20]
        break;
 8004b24:	e00d      	b.n	8004b42 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	82bb      	strh	r3, [r7, #20]
        break;
 8004b3a:	e002      	b.n	8004b42 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	74fb      	strb	r3, [r7, #19]
        break;
 8004b40:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8004b42:	8abb      	ldrh	r3, [r7, #20]
 8004b44:	f023 030f 	bic.w	r3, r3, #15
 8004b48:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4a:	8abb      	ldrh	r3, [r7, #20]
 8004b4c:	105b      	asrs	r3, r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	897a      	ldrh	r2, [r7, #10]
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	e069      	b.n	8004c3a <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d863      	bhi.n	8004c34 <UART_SetConfig+0x2a8>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <UART_SetConfig+0x1e8>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004bb9 	.word	0x08004bb9
 8004b7c:	08004bd9 	.word	0x08004bd9
 8004b80:	08004c35 	.word	0x08004c35
 8004b84:	08004bf9 	.word	0x08004bf9
 8004b88:	08004c35 	.word	0x08004c35
 8004b8c:	08004c35 	.word	0x08004c35
 8004b90:	08004c35 	.word	0x08004c35
 8004b94:	08004c19 	.word	0x08004c19
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b98:	f7fe febe 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	441a      	add	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60da      	str	r2, [r3, #12]
        break;
 8004bb6:	e040      	b.n	8004c3a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004bb8:	f7fe fed0 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60da      	str	r2, [r3, #12]
        break;
 8004bd6:	e030      	b.n	8004c3a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004be2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6852      	ldr	r2, [r2, #4]
 8004bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60da      	str	r2, [r3, #12]
        break;
 8004bf6:	e020      	b.n	8004c3a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004bf8:	f7fe fe18 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60da      	str	r2, [r3, #12]
        break;
 8004c16:	e010      	b.n	8004c3a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60da      	str	r2, [r3, #12]
        break;
 8004c32:	e002      	b.n	8004c3a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	74fb      	strb	r3, [r7, #19]
        break;
 8004c38:	bf00      	nop
    }
  }

  return ret;
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]

}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	efff69f3 	.word	0xefff69f3
 8004c48:	40013800 	.word	0x40013800
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40004400 	.word	0x40004400
 8004c54:	40004800 	.word	0x40004800

08004c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d56:	d10a      	bne.n	8004d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004dae:	f7fc f949 	bl	8001044 <HAL_GetTick>
 8004db2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d10e      	bne.n	8004de0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f82c 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e022      	b.n	8004e26 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d10e      	bne.n	8004e0c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f816 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e00c      	b.n	8004e26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3e:	e02c      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d028      	beq.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4e:	f7fc f8f9 	bl	8001044 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d21d      	bcs.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0201 	bic.w	r2, r2, #1
 8004e7c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e00f      	b.n	8004eba <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	bf0c      	ite	eq
 8004eaa:	2301      	moveq	r3, #1
 8004eac:	2300      	movne	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d0c3      	beq.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b08a      	sub	sp, #40	; 0x28
 8004ec6:	af02      	add	r7, sp, #8
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	4611      	mov	r1, r2
 8004ece:	461a      	mov	r2, r3
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	71fb      	strb	r3, [r7, #7]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8004ed8:	2375      	movs	r3, #117	; 0x75
 8004eda:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8004ef2:	7efb      	ldrb	r3, [r7, #27]
 8004ef4:	b299      	uxth	r1, r3
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	2202      	movs	r2, #2
 8004efa:	69f8      	ldr	r0, [r7, #28]
 8004efc:	f7fd f822 	bl	8001f44 <HAL_I2C_IsDeviceReady>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e04c      	b.n	8004fa4 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8004f0a:	7efb      	ldrb	r3, [r7, #27]
 8004f0c:	b299      	uxth	r1, r3
 8004f0e:	f107 021a 	add.w	r2, r7, #26
 8004f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2301      	movs	r3, #1
 8004f1a:	69f8      	ldr	r0, [r7, #28]
 8004f1c:	f7fc fbc4 	bl	80016a8 <HAL_I2C_Master_Transmit>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e03c      	b.n	8004fa4 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8004f2a:	7efb      	ldrb	r3, [r7, #27]
 8004f2c:	b299      	uxth	r1, r3
 8004f2e:	f107 0219 	add.w	r2, r7, #25
 8004f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	69f8      	ldr	r0, [r7, #28]
 8004f3c:	f7fc fcb4 	bl	80018a8 <HAL_I2C_Master_Receive>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e02c      	b.n	8004fa4 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e02a      	b.n	8004fa4 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8004f4e:	bf00      	nop
 8004f50:	7e7b      	ldrb	r3, [r7, #25]
 8004f52:	2b68      	cmp	r3, #104	; 0x68
 8004f54:	d1f9      	bne.n	8004f4a <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8004f56:	236b      	movs	r3, #107	; 0x6b
 8004f58:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8004f5e:	7efb      	ldrb	r3, [r7, #27]
 8004f60:	b299      	uxth	r1, r3
 8004f62:	f107 0214 	add.w	r2, r7, #20
 8004f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	69f8      	ldr	r0, [r7, #28]
 8004f70:	f7fc fb9a 	bl	80016a8 <HAL_I2C_Master_Transmit>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e012      	b.n	8004fa4 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8004f7e:	2207      	movs	r2, #7
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f812 	bl	8004fac <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8004f88:	79bb      	ldrb	r3, [r7, #6]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f830 	bl	8004ff4 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8004f94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f98:	461a      	mov	r2, r3
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f899 	bl	80050d4 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8004fc4:	2319      	movs	r3, #25
 8004fc6:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004fcc:	bf00      	nop
 8004fce:	7cfb      	ldrb	r3, [r7, #19]
 8004fd0:	b299      	uxth	r1, r3
 8004fd2:	f107 0210 	add.w	r2, r7, #16
 8004fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2302      	movs	r3, #2
 8004fde:	6978      	ldr	r0, [r7, #20]
 8004fe0:	f7fc fb62 	bl	80016a8 <HAL_I2C_Master_Transmit>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f1      	bne.n	8004fce <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 800500c:	231c      	movs	r3, #28
 800500e:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8005010:	bf00      	nop
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	b299      	uxth	r1, r3
 8005016:	f107 0211 	add.w	r2, r7, #17
 800501a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2301      	movs	r3, #1
 8005022:	6978      	ldr	r0, [r7, #20]
 8005024:	f7fc fb40 	bl	80016a8 <HAL_I2C_Master_Transmit>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f1      	bne.n	8005012 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800502e:	bf00      	nop
 8005030:	7cfb      	ldrb	r3, [r7, #19]
 8005032:	b299      	uxth	r1, r3
 8005034:	f107 0212 	add.w	r2, r7, #18
 8005038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2301      	movs	r3, #1
 8005040:	6978      	ldr	r0, [r7, #20]
 8005042:	f7fc fc31 	bl	80018a8 <HAL_I2C_Master_Receive>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f1      	bne.n	8005030 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 800504c:	7cbb      	ldrb	r3, [r7, #18]
 800504e:	b25b      	sxtb	r3, r3
 8005050:	f023 0318 	bic.w	r3, r3, #24
 8005054:	b25a      	sxtb	r2, r3
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	b25b      	sxtb	r3, r3
 800505c:	4313      	orrs	r3, r2
 800505e:	b25b      	sxtb	r3, r3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8005064:	bf00      	nop
 8005066:	7cfb      	ldrb	r3, [r7, #19]
 8005068:	b299      	uxth	r1, r3
 800506a:	f107 0212 	add.w	r2, r7, #18
 800506e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2301      	movs	r3, #1
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f7fc fb16 	bl	80016a8 <HAL_I2C_Master_Transmit>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f1      	bne.n	8005066 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d81f      	bhi.n	80050c8 <SD_MPU6050_SetAccelerometer+0xd4>
 8005088:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <SD_MPU6050_SetAccelerometer+0x9c>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050a1 	.word	0x080050a1
 8005094:	080050ab 	.word	0x080050ab
 8005098:	080050b5 	.word	0x080050b5
 800509c:	080050bf 	.word	0x080050bf
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80050a6:	609a      	str	r2, [r3, #8]
			break;
 80050a8:	e00f      	b.n	80050ca <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80050b0:	609a      	str	r2, [r3, #8]
			break;
 80050b2:	e00a      	b.n	80050ca <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80050ba:	609a      	str	r2, [r3, #8]
			break;
 80050bc:	e005      	b.n	80050ca <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80050c4:	609a      	str	r2, [r3, #8]
			break;
 80050c6:	e000      	b.n	80050ca <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 80050c8:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 80050ec:	231b      	movs	r3, #27
 80050ee:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80050f0:	bf00      	nop
 80050f2:	7cfb      	ldrb	r3, [r7, #19]
 80050f4:	b299      	uxth	r1, r3
 80050f6:	f107 0211 	add.w	r2, r7, #17
 80050fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	2301      	movs	r3, #1
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f7fc fad0 	bl	80016a8 <HAL_I2C_Master_Transmit>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f1      	bne.n	80050f2 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800510e:	bf00      	nop
 8005110:	7cfb      	ldrb	r3, [r7, #19]
 8005112:	b299      	uxth	r1, r3
 8005114:	f107 0212 	add.w	r2, r7, #18
 8005118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	2301      	movs	r3, #1
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f7fc fbc1 	bl	80018a8 <HAL_I2C_Master_Receive>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1f1      	bne.n	8005110 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800512c:	7cbb      	ldrb	r3, [r7, #18]
 800512e:	b25b      	sxtb	r3, r3
 8005130:	f023 0318 	bic.w	r3, r3, #24
 8005134:	b25a      	sxtb	r2, r3
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	b25b      	sxtb	r3, r3
 800513c:	4313      	orrs	r3, r2
 800513e:	b25b      	sxtb	r3, r3
 8005140:	b2db      	uxtb	r3, r3
 8005142:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8005144:	bf00      	nop
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	b299      	uxth	r1, r3
 800514a:	f107 0212 	add.w	r2, r7, #18
 800514e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2301      	movs	r3, #1
 8005156:	6978      	ldr	r0, [r7, #20]
 8005158:	f7fc faa6 	bl	80016a8 <HAL_I2C_Master_Transmit>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f1      	bne.n	8005146 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	2b03      	cmp	r3, #3
 8005166:	d81b      	bhi.n	80051a0 <SD_MPU6050_SetGyroscope+0xcc>
 8005168:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <SD_MPU6050_SetGyroscope+0x9c>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	08005181 	.word	0x08005181
 8005174:	08005189 	.word	0x08005189
 8005178:	08005191 	.word	0x08005191
 800517c:	08005199 	.word	0x08005199
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <SD_MPU6050_SetGyroscope+0xd8>)
 8005184:	605a      	str	r2, [r3, #4]
				break;
 8005186:	e00c      	b.n	80051a2 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <SD_MPU6050_SetGyroscope+0xdc>)
 800518c:	605a      	str	r2, [r3, #4]
				break;
 800518e:	e008      	b.n	80051a2 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <SD_MPU6050_SetGyroscope+0xe0>)
 8005194:	605a      	str	r2, [r3, #4]
				break;
 8005196:	e004      	b.n	80051a2 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <SD_MPU6050_SetGyroscope+0xe4>)
 800519c:	605a      	str	r2, [r3, #4]
				break;
 800519e:	e000      	b.n	80051a2 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 80051a0:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	3bfa232d 	.word	0x3bfa232d
 80051b0:	3c7a232d 	.word	0x3c7a232d
 80051b4:	3cf9c190 	.word	0x3cf9c190
 80051b8:	3d79c190 	.word	0x3d79c190

080051bc <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80051c6:	233b      	movs	r3, #59	; 0x3b
 80051c8:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80051d4:	bf00      	nop
 80051d6:	7cfb      	ldrb	r3, [r7, #19]
 80051d8:	b299      	uxth	r1, r3
 80051da:	f107 020b 	add.w	r2, r7, #11
 80051de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2301      	movs	r3, #1
 80051e6:	6978      	ldr	r0, [r7, #20]
 80051e8:	f7fc fa5e 	bl	80016a8 <HAL_I2C_Master_Transmit>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f1      	bne.n	80051d6 <SD_MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80051f2:	bf00      	nop
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	b299      	uxth	r1, r3
 80051f8:	f107 020c 	add.w	r2, r7, #12
 80051fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	2306      	movs	r3, #6
 8005204:	6978      	ldr	r0, [r7, #20]
 8005206:	f7fc fb4f 	bl	80018a8 <HAL_I2C_Master_Receive>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f1      	bne.n	80051f4 <SD_MPU6050_ReadAccelerometer+0x38>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8005210:	7b3b      	ldrb	r3, [r7, #12]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	b21a      	sxth	r2, r3
 8005216:	7b7b      	ldrb	r3, [r7, #13]
 8005218:	b21b      	sxth	r3, r3
 800521a:	4313      	orrs	r3, r2
 800521c:	b21a      	sxth	r2, r3
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8005222:	7bbb      	ldrb	r3, [r7, #14]
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	b21a      	sxth	r2, r3
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	b21b      	sxth	r3, r3
 800522c:	4313      	orrs	r3, r2
 800522e:	b21a      	sxth	r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8005234:	7c3b      	ldrb	r3, [r7, #16]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	b21a      	sxth	r2, r3
 800523a:	7c7b      	ldrb	r3, [r7, #17]
 800523c:	b21b      	sxth	r3, r3
 800523e:	4313      	orrs	r3, r2
 8005240:	b21a      	sxth	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 800525a:	2343      	movs	r3, #67	; 0x43
 800525c:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8005268:	bf00      	nop
 800526a:	7cfb      	ldrb	r3, [r7, #19]
 800526c:	b299      	uxth	r1, r3
 800526e:	f107 020b 	add.w	r2, r7, #11
 8005272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2301      	movs	r3, #1
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f7fc fa14 	bl	80016a8 <HAL_I2C_Master_Transmit>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f1      	bne.n	800526a <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8005286:	bf00      	nop
 8005288:	7cfb      	ldrb	r3, [r7, #19]
 800528a:	b299      	uxth	r1, r3
 800528c:	f107 020c 	add.w	r2, r7, #12
 8005290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2306      	movs	r3, #6
 8005298:	6978      	ldr	r0, [r7, #20]
 800529a:	f7fc fb05 	bl	80018a8 <HAL_I2C_Master_Receive>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f1      	bne.n	8005288 <SD_MPU6050_ReadGyroscope+0x38>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 80052a4:	7b3b      	ldrb	r3, [r7, #12]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	b21a      	sxth	r2, r3
 80052aa:	7b7b      	ldrb	r3, [r7, #13]
 80052ac:	b21b      	sxth	r3, r3
 80052ae:	4313      	orrs	r3, r2
 80052b0:	b21a      	sxth	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 80052b6:	7bbb      	ldrb	r3, [r7, #14]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	b21a      	sxth	r2, r3
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	b21b      	sxth	r3, r3
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b21a      	sxth	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 80052c8:	7c3b      	ldrb	r3, [r7, #16]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	b21a      	sxth	r2, r3
 80052ce:	7c7b      	ldrb	r3, [r7, #17]
 80052d0:	b21b      	sxth	r3, r3
 80052d2:	4313      	orrs	r3, r2
 80052d4:	b21a      	sxth	r2, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <SD_MPU6050_ReadTemperature>:
SD_MPU6050_Result SD_MPU6050_ReadTemperature(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
	uint8_t data[2];
	int16_t temp;
	uint8_t reg = MPU6050_TEMP_OUT_H;
 80052ee:	2341      	movs	r3, #65	; 0x41
 80052f0:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	74fb      	strb	r3, [r7, #19]

	/* Read temperature */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80052fc:	bf00      	nop
 80052fe:	7cfb      	ldrb	r3, [r7, #19]
 8005300:	b299      	uxth	r1, r3
 8005302:	f107 020b 	add.w	r2, r7, #11
 8005306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2301      	movs	r3, #1
 800530e:	6978      	ldr	r0, [r7, #20]
 8005310:	f7fc f9ca 	bl	80016a8 <HAL_I2C_Master_Transmit>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f1      	bne.n	80052fe <SD_MPU6050_ReadTemperature+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 2, 1000) != HAL_OK);
 800531a:	bf00      	nop
 800531c:	7cfb      	ldrb	r3, [r7, #19]
 800531e:	b299      	uxth	r1, r3
 8005320:	f107 020c 	add.w	r2, r7, #12
 8005324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	2302      	movs	r3, #2
 800532c:	6978      	ldr	r0, [r7, #20]
 800532e:	f7fc fabb 	bl	80018a8 <HAL_I2C_Master_Receive>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f1      	bne.n	800531c <SD_MPU6050_ReadTemperature+0x38>

	/* Format temperature */
	temp = (data[0] << 8 | data[1]);
 8005338:	7b3b      	ldrb	r3, [r7, #12]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	b21a      	sxth	r2, r3
 800533e:	7b7b      	ldrb	r3, [r7, #13]
 8005340:	b21b      	sxth	r3, r3
 8005342:	4313      	orrs	r3, r2
 8005344:	823b      	strh	r3, [r7, #16]
	DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8005346:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005352:	eddf 6a08 	vldr	s13, [pc, #32]	; 8005374 <SD_MPU6050_ReadTemperature+0x90>
 8005356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800535a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005378 <SD_MPU6050_ReadTemperature+0x94>
 800535e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	43aa0000 	.word	0x43aa0000
 8005378:	42121eb8 	.word	0x42121eb8

0800537c <NVIC_SetPriority>:
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	6039      	str	r1, [r7, #0]
 8005386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538c:	2b00      	cmp	r3, #0
 800538e:	da0b      	bge.n	80053a8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	b2da      	uxtb	r2, r3
 8005394:	490c      	ldr	r1, [pc, #48]	; (80053c8 <NVIC_SetPriority+0x4c>)
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	3b04      	subs	r3, #4
 800539e:	0112      	lsls	r2, r2, #4
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	440b      	add	r3, r1
 80053a4:	761a      	strb	r2, [r3, #24]
}
 80053a6:	e009      	b.n	80053bc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	4907      	ldr	r1, [pc, #28]	; (80053cc <NVIC_SetPriority+0x50>)
 80053ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b2:	0112      	lsls	r2, r2, #4
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	440b      	add	r3, r1
 80053b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	e000ed00 	.word	0xe000ed00
 80053cc:	e000e100 	.word	0xe000e100

080053d0 <SysTick_Config>:
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3b01      	subs	r3, #1
 80053dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053e0:	d301      	bcc.n	80053e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80053e2:	2301      	movs	r3, #1
 80053e4:	e00f      	b.n	8005406 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053e6:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <SysTick_Config+0x40>)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053ee:	210f      	movs	r1, #15
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	f7ff ffc2 	bl	800537c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <SysTick_Config+0x40>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053fe:	4b04      	ldr	r3, [pc, #16]	; (8005410 <SysTick_Config+0x40>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	e000e010 	.word	0xe000e010

08005414 <UART_Printf>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_Printf(const char* fmt, ...) {
 8005414:	b40f      	push	{r0, r1, r2, r3}
 8005416:	b580      	push	{r7, lr}
 8005418:	b0c2      	sub	sp, #264	; 0x108
 800541a:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 800541c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8005424:	1d3b      	adds	r3, r7, #4
 8005426:	f107 0008 	add.w	r0, r7, #8
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005434:	f001 fab8 	bl	80069a8 <vsniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8005438:	f107 0308 	add.w	r3, r7, #8
 800543c:	4618      	mov	r0, r3
 800543e:	f7fa fec7 	bl	80001d0 <strlen>
 8005442:	4603      	mov	r3, r0
 8005444:	b29a      	uxth	r2, r3
 8005446:	f107 0108 	add.w	r1, r7, #8
 800544a:	f04f 33ff 	mov.w	r3, #4294967295
 800544e:	4805      	ldr	r0, [pc, #20]	; (8005464 <UART_Printf+0x50>)
 8005450:	f7ff fa0f 	bl	8004872 <HAL_UART_Transmit>
    va_end(args);
}
 8005454:	bf00      	nop
 8005456:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800545a:	46bd      	mov	sp, r7
 800545c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005460:	b004      	add	sp, #16
 8005462:	4770      	bx	lr
 8005464:	20000190 	.word	0x20000190

08005468 <millis>:
	}else{	// counter1とcounter2の計測間に割り込みが発生した
		return ( shiftedcounter2 ) + CNT2;
	}
}

uint32_t millis(){
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
	return milliscounter;
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <millis+0x14>)
 800546e:	681b      	ldr	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	2000008c 	.word	0x2000008c

08005480 <init>:

void init() {
 8005480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005484:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8005488:	af08      	add	r7, sp, #32
    int code;
    UART_Printf("Ready!\r\n");
 800548a:	48c5      	ldr	r0, [pc, #788]	; (80057a0 <init+0x320>)
 800548c:	f7ff ffc2 	bl	8005414 <UART_Printf>

    code = SDCARD_Init();
 8005490:	f000 fe72 	bl	8006178 <SDCARD_Init>
 8005494:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 8005498:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800549c:	2b00      	cmp	r3, #0
 800549e:	da05      	bge.n	80054ac <init+0x2c>
        UART_Printf("SDCARD_Init() failed: code = %d\r\n", code);
 80054a0:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80054a4:	48bf      	ldr	r0, [pc, #764]	; (80057a4 <init+0x324>)
 80054a6:	f7ff ffb5 	bl	8005414 <UART_Printf>
        return;
 80054aa:	e173      	b.n	8005794 <init+0x314>
    }

    UART_Printf("SDCARD_Init() done!\r\n");
 80054ac:	48be      	ldr	r0, [pc, #760]	; (80057a8 <init+0x328>)
 80054ae:	f7ff ffb1 	bl	8005414 <UART_Printf>

    uint32_t blocksNum;
    code = SDCARD_GetBlocksNumber(&blocksNum);
 80054b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 ff4a 	bl	8006350 <SDCARD_GetBlocksNumber>
 80054bc:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 80054c0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	da05      	bge.n	80054d4 <init+0x54>
        UART_Printf("SDCARD_GetBlocksNumber() failed: code = %d\r\n", code);
 80054c8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80054cc:	48b7      	ldr	r0, [pc, #732]	; (80057ac <init+0x32c>)
 80054ce:	f7ff ffa1 	bl	8005414 <UART_Printf>
        return;
 80054d2:	e15f      	b.n	8005794 <init+0x314>
    }

    UART_Printf("SDCARD_GetBlocksNumber() done! blocksNum = %u (or %u Mb)\r\n",
 80054d4:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 80054d8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80054dc:	4ab4      	ldr	r2, [pc, #720]	; (80057b0 <init+0x330>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	09db      	lsrs	r3, r3, #7
 80054e4:	461a      	mov	r2, r3
 80054e6:	48b3      	ldr	r0, [pc, #716]	; (80057b4 <init+0x334>)
 80054e8:	f7ff ff94 	bl	8005414 <UART_Printf>
        blocksNum, blocksNum/2000 /* same as * 512 / 1000 / 1000 */);

    uint32_t startBlockAddr = 0x00ABCD;
 80054ec:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80054f0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    uint32_t blockAddr = startBlockAddr;
 80054f4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80054f8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t block[512];

    snprintf((char*)block, sizeof(block), "0x%08X", (int)blockAddr);
 80054fc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005500:	f107 0008 	add.w	r0, r7, #8
 8005504:	4aac      	ldr	r2, [pc, #688]	; (80057b8 <init+0x338>)
 8005506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800550a:	f001 f9ed 	bl	80068e8 <sniprintf>

    code = SDCARD_WriteSingleBlock(blockAddr, block);
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	4619      	mov	r1, r3
 8005514:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8005518:	f000 fff0 	bl	80064fc <SDCARD_WriteSingleBlock>
 800551c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 8005520:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005524:	2b00      	cmp	r3, #0
 8005526:	da05      	bge.n	8005534 <init+0xb4>
        UART_Printf("SDCARD_WriteSingleBlock() failed: code = %d\r\n", code);
 8005528:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800552c:	48a3      	ldr	r0, [pc, #652]	; (80057bc <init+0x33c>)
 800552e:	f7ff ff71 	bl	8005414 <UART_Printf>
        return;
 8005532:	e12f      	b.n	8005794 <init+0x314>
    }
    UART_Printf("SDCARD_WriteSingleBlock(0x%08X, ...) done!\r\n", blockAddr);
 8005534:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8005538:	48a1      	ldr	r0, [pc, #644]	; (80057c0 <init+0x340>)
 800553a:	f7ff ff6b 	bl	8005414 <UART_Printf>

    memset(block, 0, sizeof(block));
 800553e:	f107 0308 	add.w	r3, r7, #8
 8005542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f001 f9c5 	bl	80068d8 <memset>

    code = SDCARD_ReadSingleBlock(blockAddr, block);
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4619      	mov	r1, r3
 8005554:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8005558:	f000 ff6a 	bl	8006430 <SDCARD_ReadSingleBlock>
 800555c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 8005560:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005564:	2b00      	cmp	r3, #0
 8005566:	da05      	bge.n	8005574 <init+0xf4>
        UART_Printf("SDCARD_ReadSingleBlock() failed: code = %d\r\n", code);
 8005568:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800556c:	4895      	ldr	r0, [pc, #596]	; (80057c4 <init+0x344>)
 800556e:	f7ff ff51 	bl	8005414 <UART_Printf>
        return;
 8005572:	e10f      	b.n	8005794 <init+0x314>
    }

    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	781b      	ldrb	r3, [r3, #0]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800557a:	469c      	mov	ip, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800557c:	f107 0308 	add.w	r3, r7, #8
 8005580:	785b      	ldrb	r3, [r3, #1]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8005582:	469e      	mov	lr, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005584:	f107 0308 	add.w	r3, r7, #8
 8005588:	789b      	ldrb	r3, [r3, #2]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800558a:	461a      	mov	r2, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800558c:	f107 0308 	add.w	r3, r7, #8
 8005590:	78db      	ldrb	r3, [r3, #3]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8005592:	4619      	mov	r1, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005594:	f107 0308 	add.w	r3, r7, #8
 8005598:	791b      	ldrb	r3, [r3, #4]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800559a:	4618      	mov	r0, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 800559c:	f107 0308 	add.w	r3, r7, #8
 80055a0:	795b      	ldrb	r3, [r3, #5]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80055a2:	461c      	mov	r4, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80055a4:	f107 0308 	add.w	r3, r7, #8
 80055a8:	799b      	ldrb	r3, [r3, #6]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80055aa:	461d      	mov	r5, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80055ac:	f107 0308 	add.w	r3, r7, #8
 80055b0:	79db      	ldrb	r3, [r3, #7]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80055b2:	461e      	mov	r6, r3
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80055b4:	f107 0308 	add.w	r3, r7, #8
 80055b8:	7a1b      	ldrb	r3, [r3, #8]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80055ba:	607b      	str	r3, [r7, #4]
        blockAddr, block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80055bc:	f107 0308 	add.w	r3, r7, #8
 80055c0:	7a5b      	ldrb	r3, [r3, #9]
    UART_Printf("SDCARD_ReadSingleBlock(0x%08X, ...) done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80055c2:	9307      	str	r3, [sp, #28]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	9306      	str	r3, [sp, #24]
 80055c8:	9605      	str	r6, [sp, #20]
 80055ca:	9504      	str	r5, [sp, #16]
 80055cc:	9403      	str	r4, [sp, #12]
 80055ce:	9002      	str	r0, [sp, #8]
 80055d0:	9101      	str	r1, [sp, #4]
 80055d2:	9200      	str	r2, [sp, #0]
 80055d4:	4673      	mov	r3, lr
 80055d6:	4662      	mov	r2, ip
 80055d8:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80055dc:	487a      	ldr	r0, [pc, #488]	; (80057c8 <init+0x348>)
 80055de:	f7ff ff19 	bl	8005414 <UART_Printf>

    blockAddr = startBlockAddr + 1;
 80055e2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80055e6:	3301      	adds	r3, #1
 80055e8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    code = SDCARD_WriteBegin(blockAddr);
 80055ec:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80055f0:	f001 f89c 	bl	800672c <SDCARD_WriteBegin>
 80055f4:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 80055f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	da05      	bge.n	800560c <init+0x18c>
        UART_Printf("SDCARD_WriteBegin() failed: code = %d\r\n", code);
 8005600:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8005604:	4871      	ldr	r0, [pc, #452]	; (80057cc <init+0x34c>)
 8005606:	f7ff ff05 	bl	8005414 <UART_Printf>
        return;
 800560a:	e0c3      	b.n	8005794 <init+0x314>
    }
    UART_Printf("SDCARD_WriteBegin(0x%08X, ...) done!\r\n", blockAddr);
 800560c:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8005610:	486f      	ldr	r0, [pc, #444]	; (80057d0 <init+0x350>)
 8005612:	f7ff feff 	bl	8005414 <UART_Printf>

    for(int i = 0; i < 3; i++) {
 8005616:	2300      	movs	r3, #0
 8005618:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800561c:	e028      	b.n	8005670 <init+0x1f0>
        snprintf((char*)block, sizeof(block), "0x%08X", (int)blockAddr);
 800561e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005622:	f107 0008 	add.w	r0, r7, #8
 8005626:	4a64      	ldr	r2, [pc, #400]	; (80057b8 <init+0x338>)
 8005628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800562c:	f001 f95c 	bl	80068e8 <sniprintf>

        code = SDCARD_WriteData(block);
 8005630:	f107 0308 	add.w	r3, r7, #8
 8005634:	4618      	mov	r0, r3
 8005636:	f001 f8b7 	bl	80067a8 <SDCARD_WriteData>
 800563a:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        if(code < 0) {
 800563e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005642:	2b00      	cmp	r3, #0
 8005644:	da05      	bge.n	8005652 <init+0x1d2>
            UART_Printf("SDCARD_WriteData() failed: code = %d\r\n", code);
 8005646:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800564a:	4862      	ldr	r0, [pc, #392]	; (80057d4 <init+0x354>)
 800564c:	f7ff fee2 	bl	8005414 <UART_Printf>
            return;
 8005650:	e0a0      	b.n	8005794 <init+0x314>
        }

        UART_Printf("SDCARD_WriteData() done! blockAddr = %08X\r\n", blockAddr);
 8005652:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8005656:	4860      	ldr	r0, [pc, #384]	; (80057d8 <init+0x358>)
 8005658:	f7ff fedc 	bl	8005414 <UART_Printf>
        blockAddr++;
 800565c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005660:	3301      	adds	r3, #1
 8005662:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    for(int i = 0; i < 3; i++) {
 8005666:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800566a:	3301      	adds	r3, #1
 800566c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8005670:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005674:	2b02      	cmp	r3, #2
 8005676:	ddd2      	ble.n	800561e <init+0x19e>
    }

    code = SDCARD_WriteEnd();
 8005678:	f001 f8de 	bl	8006838 <SDCARD_WriteEnd>
 800567c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 8005680:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005684:	2b00      	cmp	r3, #0
 8005686:	da05      	bge.n	8005694 <init+0x214>
        UART_Printf("SDCARD_WriteEnd() failed: code = %d\r\n", code);
 8005688:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800568c:	4853      	ldr	r0, [pc, #332]	; (80057dc <init+0x35c>)
 800568e:	f7ff fec1 	bl	8005414 <UART_Printf>
        return;
 8005692:	e07f      	b.n	8005794 <init+0x314>
    }
    UART_Printf("SDCARD_WriteEnd() done!\r\n");
 8005694:	4852      	ldr	r0, [pc, #328]	; (80057e0 <init+0x360>)
 8005696:	f7ff febd 	bl	8005414 <UART_Printf>

    blockAddr = startBlockAddr + 1;
 800569a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800569e:	3301      	adds	r3, #1
 80056a0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    code = SDCARD_ReadBegin(blockAddr);
 80056a4:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80056a8:	f000 ffa0 	bl	80065ec <SDCARD_ReadBegin>
 80056ac:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 80056b0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	da05      	bge.n	80056c4 <init+0x244>
        UART_Printf("SDCARD_ReadBegin() failed: code = %d\r\n", code);
 80056b8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80056bc:	4849      	ldr	r0, [pc, #292]	; (80057e4 <init+0x364>)
 80056be:	f7ff fea9 	bl	8005414 <UART_Printf>
        return;
 80056c2:	e067      	b.n	8005794 <init+0x314>
    }
    UART_Printf("SDCARD_ReadBegin(0x%08X, ...) done!\r\n", blockAddr);
 80056c4:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80056c8:	4847      	ldr	r0, [pc, #284]	; (80057e8 <init+0x368>)
 80056ca:	f7ff fea3 	bl	8005414 <UART_Printf>

    for(int i = 0; i < 3; i++) {
 80056ce:	2300      	movs	r3, #0
 80056d0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80056d4:	e049      	b.n	800576a <init+0x2ea>
        code = SDCARD_ReadData(block);
 80056d6:	f107 0308 	add.w	r3, r7, #8
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 ffc4 	bl	8006668 <SDCARD_ReadData>
 80056e0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
        if(code < 0) {
 80056e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da05      	bge.n	80056f8 <init+0x278>
            UART_Printf("SDCARD_ReadData() failed: code = %d\r\n", code);
 80056ec:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80056f0:	483e      	ldr	r0, [pc, #248]	; (80057ec <init+0x36c>)
 80056f2:	f7ff fe8f 	bl	8005414 <UART_Printf>
            return;
 80056f6:	e04d      	b.n	8005794 <init+0x314>
        }

        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 80056f8:	f107 0308 	add.w	r3, r7, #8
 80056fc:	781b      	ldrb	r3, [r3, #0]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 80056fe:	469c      	mov	ip, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005700:	f107 0308 	add.w	r3, r7, #8
 8005704:	785b      	ldrb	r3, [r3, #1]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8005706:	469e      	mov	lr, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005708:	f107 0308 	add.w	r3, r7, #8
 800570c:	789b      	ldrb	r3, [r3, #2]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800570e:	4698      	mov	r8, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005710:	f107 0308 	add.w	r3, r7, #8
 8005714:	78db      	ldrb	r3, [r3, #3]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8005716:	461a      	mov	r2, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005718:	f107 0308 	add.w	r3, r7, #8
 800571c:	791b      	ldrb	r3, [r3, #4]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800571e:	4619      	mov	r1, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005720:	f107 0308 	add.w	r3, r7, #8
 8005724:	795b      	ldrb	r3, [r3, #5]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8005726:	4618      	mov	r0, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005728:	f107 0308 	add.w	r3, r7, #8
 800572c:	799b      	ldrb	r3, [r3, #6]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800572e:	461c      	mov	r4, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005730:	f107 0308 	add.w	r3, r7, #8
 8005734:	79db      	ldrb	r3, [r3, #7]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8005736:	461d      	mov	r5, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005738:	f107 0308 	add.w	r3, r7, #8
 800573c:	7a1b      	ldrb	r3, [r3, #8]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 800573e:	461e      	mov	r6, r3
            block[0], block[1], block[2], block[3], block[4], block[5], block[6], block[7], block[8], block[9]);
 8005740:	f107 0308 	add.w	r3, r7, #8
 8005744:	7a5b      	ldrb	r3, [r3, #9]
        UART_Printf("SDCARD_ReadData() done! block = \"%c%c%c%c%c%c%c%c%c%c...\"\r\n",
 8005746:	9306      	str	r3, [sp, #24]
 8005748:	9605      	str	r6, [sp, #20]
 800574a:	9504      	str	r5, [sp, #16]
 800574c:	9403      	str	r4, [sp, #12]
 800574e:	9002      	str	r0, [sp, #8]
 8005750:	9101      	str	r1, [sp, #4]
 8005752:	9200      	str	r2, [sp, #0]
 8005754:	4643      	mov	r3, r8
 8005756:	4672      	mov	r2, lr
 8005758:	4661      	mov	r1, ip
 800575a:	4825      	ldr	r0, [pc, #148]	; (80057f0 <init+0x370>)
 800575c:	f7ff fe5a 	bl	8005414 <UART_Printf>
    for(int i = 0; i < 3; i++) {
 8005760:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005764:	3301      	adds	r3, #1
 8005766:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800576a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800576e:	2b02      	cmp	r3, #2
 8005770:	ddb1      	ble.n	80056d6 <init+0x256>
    }

    code = SDCARD_ReadEnd();
 8005772:	f000 ffad 	bl	80066d0 <SDCARD_ReadEnd>
 8005776:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    if(code < 0) {
 800577a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800577e:	2b00      	cmp	r3, #0
 8005780:	da05      	bge.n	800578e <init+0x30e>
        UART_Printf("SDCARD_ReadEnd() failed: code = %d\r\n", code);
 8005782:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8005786:	481b      	ldr	r0, [pc, #108]	; (80057f4 <init+0x374>)
 8005788:	f7ff fe44 	bl	8005414 <UART_Printf>
        return;
 800578c:	e002      	b.n	8005794 <init+0x314>
    }
    UART_Printf("SDCARD_ReadEnd() done!\r\n");
 800578e:	481a      	ldr	r0, [pc, #104]	; (80057f8 <init+0x378>)
 8005790:	f7ff fe40 	bl	8005414 <UART_Printf>
}
 8005794:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8005798:	46bd      	mov	sp, r7
 800579a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579e:	bf00      	nop
 80057a0:	080071a8 	.word	0x080071a8
 80057a4:	080071b4 	.word	0x080071b4
 80057a8:	080071d8 	.word	0x080071d8
 80057ac:	080071f0 	.word	0x080071f0
 80057b0:	10624dd3 	.word	0x10624dd3
 80057b4:	08007220 	.word	0x08007220
 80057b8:	0800725c 	.word	0x0800725c
 80057bc:	08007264 	.word	0x08007264
 80057c0:	08007294 	.word	0x08007294
 80057c4:	080072c4 	.word	0x080072c4
 80057c8:	080072f4 	.word	0x080072f4
 80057cc:	08007344 	.word	0x08007344
 80057d0:	0800736c 	.word	0x0800736c
 80057d4:	08007394 	.word	0x08007394
 80057d8:	080073bc 	.word	0x080073bc
 80057dc:	080073e8 	.word	0x080073e8
 80057e0:	08007410 	.word	0x08007410
 80057e4:	0800742c 	.word	0x0800742c
 80057e8:	08007454 	.word	0x08007454
 80057ec:	0800747c 	.word	0x0800747c
 80057f0:	080074a4 	.word	0x080074a4
 80057f4:	080074e0 	.word	0x080074e0
 80057f8:	08007508 	.word	0x08007508

080057fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057fc:	b5b0      	push	{r4, r5, r7, lr}
 80057fe:	b090      	sub	sp, #64	; 0x40
 8005800:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t starttime = millis();
 8005802:	f7ff fe31 	bl	8005468 <millis>
 8005806:	6378      	str	r0, [r7, #52]	; 0x34
	UART_Printf("start time: %u\r\n", starttime);
 8005808:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800580a:	4854      	ldr	r0, [pc, #336]	; (800595c <main+0x160>)
 800580c:	f7ff fe02 	bl	8005414 <UART_Printf>

	SD_MPU6050_Result result ;
   	uint8_t mpu_ok[15] = {"MPU WORK FINE\n"};
 8005810:	4b53      	ldr	r3, [pc, #332]	; (8005960 <main+0x164>)
 8005812:	f107 0414 	add.w	r4, r7, #20
 8005816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005818:	c407      	stmia	r4!, {r0, r1, r2}
 800581a:	8023      	strh	r3, [r4, #0]
 800581c:	3402      	adds	r4, #2
 800581e:	0c1b      	lsrs	r3, r3, #16
 8005820:	7023      	strb	r3, [r4, #0]
	uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
 8005822:	4b50      	ldr	r3, [pc, #320]	; (8005964 <main+0x168>)
 8005824:	463c      	mov	r4, r7
 8005826:	461d      	mov	r5, r3
 8005828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800582a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	7023      	strb	r3, [r4, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005830:	f7fb fbae 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005834:	f000 f8b4 	bl	80059a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005838:	f000 f9ea 	bl	8005c10 <MX_GPIO_Init>
  MX_I2C1_Init();
 800583c:	f000 f902 	bl	8005a44 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005840:	f000 f940 	bl	8005ac4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8005844:	f000 f9b4 	bl	8005bb0 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8005848:	f000 f97a 	bl	8005b40 <MX_TIM7_Init>

  SysTick_Config(SystemCoreClock / 1000);
 800584c:	4b46      	ldr	r3, [pc, #280]	; (8005968 <main+0x16c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a46      	ldr	r2, [pc, #280]	; (800596c <main+0x170>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	099b      	lsrs	r3, r3, #6
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fdb9 	bl	80053d0 <SysTick_Config>
  /* USER CODE BEGIN 2 */
  	bmp280_init_default_params(&bmp280.params);
 800585e:	4844      	ldr	r0, [pc, #272]	; (8005970 <main+0x174>)
 8005860:	f7fa fec6 	bl	80005f0 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8005864:	4b43      	ldr	r3, [pc, #268]	; (8005974 <main+0x178>)
 8005866:	2276      	movs	r2, #118	; 0x76
 8005868:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 800586a:	4b42      	ldr	r3, [pc, #264]	; (8005974 <main+0x178>)
 800586c:	4a42      	ldr	r2, [pc, #264]	; (8005978 <main+0x17c>)
 800586e:	629a      	str	r2, [r3, #40]	; 0x28

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8005870:	e006      	b.n	8005880 <main+0x84>
		UART_Printf("BMP280: initialization failed. \r\n");
 8005872:	4842      	ldr	r0, [pc, #264]	; (800597c <main+0x180>)
 8005874:	f7ff fdce 	bl	8005414 <UART_Printf>
		HAL_Delay(2000);
 8005878:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800587c:	f7fb fbee 	bl	800105c <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8005880:	493b      	ldr	r1, [pc, #236]	; (8005970 <main+0x174>)
 8005882:	483c      	ldr	r0, [pc, #240]	; (8005974 <main+0x178>)
 8005884:	f7fb f82f 	bl	80008e6 <bmp280_init>
 8005888:	4603      	mov	r3, r0
 800588a:	f083 0301 	eor.w	r3, r3, #1
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ee      	bne.n	8005872 <main+0x76>
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8005894:	4b37      	ldr	r3, [pc, #220]	; (8005974 <main+0x178>)
 8005896:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800589a:	2b60      	cmp	r3, #96	; 0x60
 800589c:	bf0c      	ite	eq
 800589e:	2301      	moveq	r3, #1
 80058a0:	2300      	movne	r3, #0
 80058a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(bme280p){
 80058a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <main+0xb8>
		UART_Printf("BME280 detected... \r\n");
 80058ae:	4834      	ldr	r0, [pc, #208]	; (8005980 <main+0x184>)
 80058b0:	f7ff fdb0 	bl	8005414 <UART_Printf>
	}

  init();
 80058b4:	f7ff fde4 	bl	8005480 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_250s );
 80058b8:	2300      	movs	r3, #0
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2300      	movs	r3, #0
 80058be:	2200      	movs	r2, #0
 80058c0:	4930      	ldr	r1, [pc, #192]	; (8005984 <main+0x188>)
 80058c2:	482d      	ldr	r0, [pc, #180]	; (8005978 <main+0x17c>)
 80058c4:	f7ff fafd 	bl	8004ec2 <SD_MPU6050_Init>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	  else
	  {
		  HAL_UART_Transmit(&huart2, mpu_not, sizeof(mpu_not), 1000);
	  }
	  */
	  SD_MPU6050_ReadTemperature(&hi2c1,&mpu1);
 80058ce:	492d      	ldr	r1, [pc, #180]	; (8005984 <main+0x188>)
 80058d0:	4829      	ldr	r0, [pc, #164]	; (8005978 <main+0x17c>)
 80058d2:	f7ff fd07 	bl	80052e4 <SD_MPU6050_ReadTemperature>
	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 80058d6:	492b      	ldr	r1, [pc, #172]	; (8005984 <main+0x188>)
 80058d8:	4827      	ldr	r0, [pc, #156]	; (8005978 <main+0x17c>)
 80058da:	f7ff fcb9 	bl	8005250 <SD_MPU6050_ReadGyroscope>
	  int16_t g_x = mpu1.Gyroscope_X;
 80058de:	4b29      	ldr	r3, [pc, #164]	; (8005984 <main+0x188>)
 80058e0:	8a5b      	ldrh	r3, [r3, #18]
 80058e2:	863b      	strh	r3, [r7, #48]	; 0x30
	  int16_t g_y = mpu1.Gyroscope_Y;
 80058e4:	4b27      	ldr	r3, [pc, #156]	; (8005984 <main+0x188>)
 80058e6:	8a9b      	ldrh	r3, [r3, #20]
 80058e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  int16_t g_z = mpu1.Gyroscope_Z;
 80058ea:	4b26      	ldr	r3, [pc, #152]	; (8005984 <main+0x188>)
 80058ec:	8adb      	ldrh	r3, [r3, #22]
 80058ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  // TODO uncomment
	  //UART_Printf("g_x: %d , g_y: %d, g_z: %d \r\n",g_x, g_y, g_z);

	  SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 80058f0:	4924      	ldr	r1, [pc, #144]	; (8005984 <main+0x188>)
 80058f2:	4821      	ldr	r0, [pc, #132]	; (8005978 <main+0x17c>)
 80058f4:	f7ff fc62 	bl	80051bc <SD_MPU6050_ReadAccelerometer>
	  int16_t a_x = mpu1.Accelerometer_X;
 80058f8:	4b22      	ldr	r3, [pc, #136]	; (8005984 <main+0x188>)
 80058fa:	899b      	ldrh	r3, [r3, #12]
 80058fc:	857b      	strh	r3, [r7, #42]	; 0x2a
	  int16_t a_y = mpu1.Accelerometer_Y;
 80058fe:	4b21      	ldr	r3, [pc, #132]	; (8005984 <main+0x188>)
 8005900:	89db      	ldrh	r3, [r3, #14]
 8005902:	853b      	strh	r3, [r7, #40]	; 0x28
	  int16_t a_z = mpu1.Accelerometer_Z;
 8005904:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <main+0x188>)
 8005906:	8a1b      	ldrh	r3, [r3, #16]
 8005908:	84fb      	strh	r3, [r7, #38]	; 0x26
	  // TODO uncomment
	  //UART_Printf("a_x: %d , a_y: %d , a_z: %d \r\n",a_x, a_y, a_z);

	if (!bmp280_read_fixed(&bmp280, &temperature, &pressure, &humidity)) {
 800590a:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <main+0x18c>)
 800590c:	4a1f      	ldr	r2, [pc, #124]	; (800598c <main+0x190>)
 800590e:	4920      	ldr	r1, [pc, #128]	; (8005990 <main+0x194>)
 8005910:	4818      	ldr	r0, [pc, #96]	; (8005974 <main+0x178>)
 8005912:	f7fb fad7 	bl	8000ec4 <bmp280_read_fixed>
 8005916:	4603      	mov	r3, r0
 8005918:	f083 0301 	eor.w	r3, r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <main+0x12c>
		UART_Printf("Temperature/pressure reading failed\r\n");
 8005922:	481c      	ldr	r0, [pc, #112]	; (8005994 <main+0x198>)
 8005924:	f7ff fd76 	bl	8005414 <UART_Printf>
		// TODO uncomment
		//UART_Printf("[Pressure]: %u, [Temperature]: %u, [Humidity]: %u \r\n", pressure, temperature, humidity);
	}

	// Test status
	UART_Printf("TS%u/", millis());
 8005928:	f7ff fd9e 	bl	8005468 <millis>
 800592c:	4603      	mov	r3, r0
 800592e:	4619      	mov	r1, r3
 8005930:	4819      	ldr	r0, [pc, #100]	; (8005998 <main+0x19c>)
 8005932:	f7ff fd6f 	bl	8005414 <UART_Printf>
	UART_Printf("G%u/A%u/P%u/T%u/H%u\r\n",g_x , a_x, pressure, temperature, humidity);
 8005936:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 800593a:	f9b7 002a 	ldrsh.w	r0, [r7, #42]	; 0x2a
 800593e:	4b13      	ldr	r3, [pc, #76]	; (800598c <main+0x190>)
 8005940:	681c      	ldr	r4, [r3, #0]
 8005942:	4b13      	ldr	r3, [pc, #76]	; (8005990 <main+0x194>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <main+0x18c>)
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	9201      	str	r2, [sp, #4]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	4623      	mov	r3, r4
 8005950:	4602      	mov	r2, r0
 8005952:	4812      	ldr	r0, [pc, #72]	; (800599c <main+0x1a0>)
 8005954:	f7ff fd5e 	bl	8005414 <UART_Printf>
  {
 8005958:	e7ae      	b.n	80058b8 <main+0xbc>
 800595a:	bf00      	nop
 800595c:	08007524 	.word	0x08007524
 8005960:	080075bc 	.word	0x080075bc
 8005964:	080075cc 	.word	0x080075cc
 8005968:	20000008 	.word	0x20000008
 800596c:	10624dd3 	.word	0x10624dd3
 8005970:	20000188 	.word	0x20000188
 8005974:	2000015c 	.word	0x2000015c
 8005978:	200000a0 	.word	0x200000a0
 800597c:	08007538 	.word	0x08007538
 8005980:	0800755c 	.word	0x0800755c
 8005984:	20000240 	.word	0x20000240
 8005988:	200000f4 	.word	0x200000f4
 800598c:	200000f0 	.word	0x200000f0
 8005990:	200000ec 	.word	0x200000ec
 8005994:	08007574 	.word	0x08007574
 8005998:	0800759c 	.word	0x0800759c
 800599c:	080075a4 	.word	0x080075a4

080059a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b096      	sub	sp, #88	; 0x58
 80059a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059aa:	2228      	movs	r2, #40	; 0x28
 80059ac:	2100      	movs	r1, #0
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 ff92 	bl	80068d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059b4:	f107 031c 	add.w	r3, r7, #28
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	60da      	str	r2, [r3, #12]
 80059c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	605a      	str	r2, [r3, #4]
 80059cc:	609a      	str	r2, [r3, #8]
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	611a      	str	r2, [r3, #16]
 80059d2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80059d4:	2302      	movs	r3, #2
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059d8:	2301      	movs	r3, #1
 80059da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80059dc:	2310      	movs	r3, #16
 80059de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fc feb5 	bl	8002758 <HAL_RCC_OscConfig>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80059f4:	f000 f94a 	bl	8005c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059f8:	230f      	movs	r3, #15
 80059fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80059fc:	2300      	movs	r3, #0
 80059fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a00:	2300      	movs	r3, #0
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a04:	2300      	movs	r3, #0
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005a0c:	f107 031c 	add.w	r3, r7, #28
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd fd8e 	bl	8003534 <HAL_RCC_ClockConfig>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005a1e:	f000 f935 	bl	8005c8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005a22:	2320      	movs	r3, #32
 8005a24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fd ffb7 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8005a38:	f000 f928 	bl	8005c8c <Error_Handler>
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	3758      	adds	r7, #88	; 0x58
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a4a:	4a1c      	ldr	r2, [pc, #112]	; (8005abc <MX_I2C1_Init+0x78>)
 8005a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8005a4e:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a50:	4a1b      	ldr	r2, [pc, #108]	; (8005ac0 <MX_I2C1_Init+0x7c>)
 8005a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005a54:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a5a:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a60:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005a66:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a6c:	4b12      	ldr	r3, [pc, #72]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a72:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005a7e:	480e      	ldr	r0, [pc, #56]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a80:	f7fb fd82 	bl	8001588 <HAL_I2C_Init>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005a8a:	f000 f8ff 	bl	8005c8c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a8e:	2100      	movs	r1, #0
 8005a90:	4809      	ldr	r0, [pc, #36]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005a92:	f7fc fdc7 	bl	8002624 <HAL_I2CEx_ConfigAnalogFilter>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005a9c:	f000 f8f6 	bl	8005c8c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4805      	ldr	r0, [pc, #20]	; (8005ab8 <MX_I2C1_Init+0x74>)
 8005aa4:	f7fc fe09 	bl	80026ba <HAL_I2CEx_ConfigDigitalFilter>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005aae:	f000 f8ed 	bl	8005c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005ab2:	bf00      	nop
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200000a0 	.word	0x200000a0
 8005abc:	40005400 	.word	0x40005400
 8005ac0:	2000090e 	.word	0x2000090e

08005ac4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005aca:	4a1c      	ldr	r2, [pc, #112]	; (8005b3c <MX_SPI1_Init+0x78>)
 8005acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005ace:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005ad6:	4b18      	ldr	r3, [pc, #96]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005adc:	4b16      	ldr	r3, [pc, #88]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005ade:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005ae2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ae4:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005af0:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005afa:	2210      	movs	r2, #16
 8005afc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005afe:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005b12:	2207      	movs	r2, #7
 8005b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005b22:	4805      	ldr	r0, [pc, #20]	; (8005b38 <MX_SPI1_Init+0x74>)
 8005b24:	f7fe f862 	bl	8003bec <HAL_SPI_Init>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005b2e:	f000 f8ad 	bl	8005c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	200000f8 	.word	0x200000f8
 8005b3c:	40013000 	.word	0x40013000

08005b40 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005b50:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <MX_TIM7_Init+0x68>)
 8005b52:	4a16      	ldr	r2, [pc, #88]	; (8005bac <MX_TIM7_Init+0x6c>)
 8005b54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <MX_TIM7_Init+0x68>)
 8005b58:	f242 720f 	movw	r2, #9999	; 0x270f
 8005b5c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <MX_TIM7_Init+0x68>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 800;
 8005b64:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <MX_TIM7_Init+0x68>)
 8005b66:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b6a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <MX_TIM7_Init+0x68>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005b72:	480d      	ldr	r0, [pc, #52]	; (8005ba8 <MX_TIM7_Init+0x68>)
 8005b74:	f7fe fd38 	bl	80045e8 <HAL_TIM_Base_Init>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005b7e:	f000 f885 	bl	8005c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4806      	ldr	r0, [pc, #24]	; (8005ba8 <MX_TIM7_Init+0x68>)
 8005b90:	f7fe fdd0 	bl	8004734 <HAL_TIMEx_MasterConfigSynchronization>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005b9a:	f000 f877 	bl	8005c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000200 	.word	0x20000200
 8005bac:	40001400 	.word	0x40001400

08005bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005bb6:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <MX_USART2_UART_Init+0x5c>)
 8005bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8005bba:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005bbc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005bd6:	220c      	movs	r2, #12
 8005bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005bf2:	4805      	ldr	r0, [pc, #20]	; (8005c08 <MX_USART2_UART_Init+0x58>)
 8005bf4:	f7fe fdec 	bl	80047d0 <HAL_UART_Init>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005bfe:	f000 f845 	bl	8005c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c02:	bf00      	nop
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000190 	.word	0x20000190
 8005c0c:	40004400 	.word	0x40004400

08005c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c16:	f107 030c 	add.w	r3, r7, #12
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	605a      	str	r2, [r3, #4]
 8005c20:	609a      	str	r2, [r3, #8]
 8005c22:	60da      	str	r2, [r3, #12]
 8005c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c26:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <MX_GPIO_Init+0x78>)
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <MX_GPIO_Init+0x78>)
 8005c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c30:	6153      	str	r3, [r2, #20]
 8005c32:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <MX_GPIO_Init+0x78>)
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <MX_GPIO_Init+0x78>)
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4a11      	ldr	r2, [pc, #68]	; (8005c88 <MX_GPIO_Init+0x78>)
 8005c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c48:	6153      	str	r3, [r2, #20]
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <MX_GPIO_Init+0x78>)
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c52:	607b      	str	r3, [r7, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_RESET);
 8005c56:	2200      	movs	r2, #0
 8005c58:	2110      	movs	r1, #16
 8005c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c5e:	f7fb fc7b 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_SPI_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI_CS_Pin;
 8005c62:	2310      	movs	r3, #16
 8005c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c66:	2301      	movs	r3, #1
 8005c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8005c72:	f107 030c 	add.w	r3, r7, #12
 8005c76:	4619      	mov	r1, r3
 8005c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c7c:	f7fb faf6 	bl	800126c <HAL_GPIO_Init>

}
 8005c80:	bf00      	nop
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40021000 	.word	0x40021000

08005c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c90:	bf00      	nop
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <HAL_MspInit+0x44>)
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	4a0e      	ldr	r2, [pc, #56]	; (8005ce0 <HAL_MspInit+0x44>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6193      	str	r3, [r2, #24]
 8005cae:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <HAL_MspInit+0x44>)
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	607b      	str	r3, [r7, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_MspInit+0x44>)
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <HAL_MspInit+0x44>)
 8005cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	61d3      	str	r3, [r2, #28]
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_MspInit+0x44>)
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40021000 	.word	0x40021000

08005ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	; 0x28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cec:	f107 0314 	add.w	r3, r7, #20
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	609a      	str	r2, [r3, #8]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a17      	ldr	r2, [pc, #92]	; (8005d60 <HAL_I2C_MspInit+0x7c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d127      	bne.n	8005d56 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d06:	4b17      	ldr	r3, [pc, #92]	; (8005d64 <HAL_I2C_MspInit+0x80>)
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <HAL_I2C_MspInit+0x80>)
 8005d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d10:	6153      	str	r3, [r2, #20]
 8005d12:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <HAL_I2C_MspInit+0x80>)
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d1e:	23c0      	movs	r3, #192	; 0xc0
 8005d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d22:	2312      	movs	r3, #18
 8005d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d26:	2301      	movs	r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005d2e:	2304      	movs	r3, #4
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d32:	f107 0314 	add.w	r3, r7, #20
 8005d36:	4619      	mov	r1, r3
 8005d38:	480b      	ldr	r0, [pc, #44]	; (8005d68 <HAL_I2C_MspInit+0x84>)
 8005d3a:	f7fb fa97 	bl	800126c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d3e:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_I2C_MspInit+0x80>)
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	4a08      	ldr	r2, [pc, #32]	; (8005d64 <HAL_I2C_MspInit+0x80>)
 8005d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d48:	61d3      	str	r3, [r2, #28]
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_I2C_MspInit+0x80>)
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005d56:	bf00      	nop
 8005d58:	3728      	adds	r7, #40	; 0x28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40005400 	.word	0x40005400
 8005d64:	40021000 	.word	0x40021000
 8005d68:	48000400 	.word	0x48000400

08005d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d74:	f107 0314 	add.w	r3, r7, #20
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <HAL_SPI_MspInit+0x7c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d128      	bne.n	8005de0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005d8e:	4b17      	ldr	r3, [pc, #92]	; (8005dec <HAL_SPI_MspInit+0x80>)
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	4a16      	ldr	r2, [pc, #88]	; (8005dec <HAL_SPI_MspInit+0x80>)
 8005d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d98:	6193      	str	r3, [r2, #24]
 8005d9a:	4b14      	ldr	r3, [pc, #80]	; (8005dec <HAL_SPI_MspInit+0x80>)
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <HAL_SPI_MspInit+0x80>)
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	4a10      	ldr	r2, [pc, #64]	; (8005dec <HAL_SPI_MspInit+0x80>)
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db0:	6153      	str	r3, [r2, #20]
 8005db2:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <HAL_SPI_MspInit+0x80>)
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005dbe:	23e0      	movs	r3, #224	; 0xe0
 8005dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005dce:	2305      	movs	r3, #5
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd2:	f107 0314 	add.w	r3, r7, #20
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ddc:	f7fb fa46 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005de0:	bf00      	nop
 8005de2:	3728      	adds	r7, #40	; 0x28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40013000 	.word	0x40013000
 8005dec:	40021000 	.word	0x40021000

08005df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <HAL_TIM_Base_MspInit+0x38>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d10b      	bne.n	8005e1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e02:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <HAL_TIM_Base_MspInit+0x3c>)
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <HAL_TIM_Base_MspInit+0x3c>)
 8005e08:	f043 0320 	orr.w	r3, r3, #32
 8005e0c:	61d3      	str	r3, [r2, #28]
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <HAL_TIM_Base_MspInit+0x3c>)
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40001400 	.word	0x40001400
 8005e2c:	40021000 	.word	0x40021000

08005e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e38:	f107 0314 	add.w	r3, r7, #20
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a17      	ldr	r2, [pc, #92]	; (8005eac <HAL_UART_MspInit+0x7c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d128      	bne.n	8005ea4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e52:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <HAL_UART_MspInit+0x80>)
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <HAL_UART_MspInit+0x80>)
 8005e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e5c:	61d3      	str	r3, [r2, #28]
 8005e5e:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <HAL_UART_MspInit+0x80>)
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_UART_MspInit+0x80>)
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	4a10      	ldr	r2, [pc, #64]	; (8005eb0 <HAL_UART_MspInit+0x80>)
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e74:	6153      	str	r3, [r2, #20]
 8005e76:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <HAL_UART_MspInit+0x80>)
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e82:	230c      	movs	r3, #12
 8005e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e86:	2302      	movs	r3, #2
 8005e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e92:	2307      	movs	r3, #7
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e96:	f107 0314 	add.w	r3, r7, #20
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ea0:	f7fb f9e4 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005ea4:	bf00      	nop
 8005ea6:	3728      	adds	r7, #40	; 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40004400 	.word	0x40004400
 8005eb0:	40021000 	.word	0x40021000

08005eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005eb8:	bf00      	nop
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ec6:	e7fe      	b.n	8005ec6 <HardFault_Handler+0x4>

08005ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ecc:	e7fe      	b.n	8005ecc <MemManage_Handler+0x4>

08005ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ed2:	e7fe      	b.n	8005ed2 <BusFault_Handler+0x4>

08005ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ed8:	e7fe      	b.n	8005ed8 <UsageFault_Handler+0x4>

08005eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005eda:	b480      	push	{r7}
 8005edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ede:	bf00      	nop
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005efa:	bf00      	nop
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  milliscounter++;
 8005f08:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <SysTick_Handler+0x18>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	4a03      	ldr	r2, [pc, #12]	; (8005f1c <SysTick_Handler+0x18>)
 8005f10:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f12:	f7fb f883 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f16:	bf00      	nop
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2000008c 	.word	0x2000008c

08005f20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <_sbrk+0x50>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <_sbrk+0x16>
		heap_end = &end;
 8005f30:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <_sbrk+0x50>)
 8005f32:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <_sbrk+0x54>)
 8005f34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005f36:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <_sbrk+0x50>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <_sbrk+0x50>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	466a      	mov	r2, sp
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d907      	bls.n	8005f5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005f4a:	f000 fc9b 	bl	8006884 <__errno>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	230c      	movs	r3, #12
 8005f52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005f54:	f04f 33ff 	mov.w	r3, #4294967295
 8005f58:	e006      	b.n	8005f68 <_sbrk+0x48>
	}

	heap_end += incr;
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <_sbrk+0x50>)
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4413      	add	r3, r2
 8005f62:	4a03      	ldr	r2, [pc, #12]	; (8005f70 <_sbrk+0x50>)
 8005f64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005f66:	68fb      	ldr	r3, [r7, #12]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000090 	.word	0x20000090
 8005f74:	20000260 	.word	0x20000260

08005f78 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f7c:	4b1f      	ldr	r3, [pc, #124]	; (8005ffc <SystemInit+0x84>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f82:	4a1e      	ldr	r2, [pc, #120]	; (8005ffc <SystemInit+0x84>)
 8005f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005f8c:	4b1c      	ldr	r3, [pc, #112]	; (8006000 <SystemInit+0x88>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1b      	ldr	r2, [pc, #108]	; (8006000 <SystemInit+0x88>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <SystemInit+0x88>)
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	4918      	ldr	r1, [pc, #96]	; (8006000 <SystemInit+0x88>)
 8005f9e:	4b19      	ldr	r3, [pc, #100]	; (8006004 <SystemInit+0x8c>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005fa4:	4b16      	ldr	r3, [pc, #88]	; (8006000 <SystemInit+0x88>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a15      	ldr	r2, [pc, #84]	; (8006000 <SystemInit+0x88>)
 8005faa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005fb4:	4b12      	ldr	r3, [pc, #72]	; (8006000 <SystemInit+0x88>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a11      	ldr	r2, [pc, #68]	; (8006000 <SystemInit+0x88>)
 8005fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fbe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <SystemInit+0x88>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a0e      	ldr	r2, [pc, #56]	; (8006000 <SystemInit+0x88>)
 8005fc6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005fca:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <SystemInit+0x88>)
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a0b      	ldr	r2, [pc, #44]	; (8006000 <SystemInit+0x88>)
 8005fd2:	f023 030f 	bic.w	r3, r3, #15
 8005fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005fd8:	4b09      	ldr	r3, [pc, #36]	; (8006000 <SystemInit+0x88>)
 8005fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fdc:	4908      	ldr	r1, [pc, #32]	; (8006000 <SystemInit+0x88>)
 8005fde:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <SystemInit+0x90>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <SystemInit+0x88>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005fea:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <SystemInit+0x84>)
 8005fec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ff0:	609a      	str	r2, [r3, #8]
#endif
}
 8005ff2:	bf00      	nop
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	e000ed00 	.word	0xe000ed00
 8006000:	40021000 	.word	0x40021000
 8006004:	f87fc00c 	.word	0xf87fc00c
 8006008:	ff00fccc 	.word	0xff00fccc

0800600c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800600c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006044 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006010:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006012:	e003      	b.n	800601c <LoopCopyDataInit>

08006014 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006016:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006018:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800601a:	3104      	adds	r1, #4

0800601c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800601c:	480b      	ldr	r0, [pc, #44]	; (800604c <LoopForever+0xa>)
	ldr	r3, =_edata
 800601e:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006020:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006022:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006024:	d3f6      	bcc.n	8006014 <CopyDataInit>
	ldr	r2, =_sbss
 8006026:	4a0b      	ldr	r2, [pc, #44]	; (8006054 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006028:	e002      	b.n	8006030 <LoopFillZerobss>

0800602a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800602a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800602c:	f842 3b04 	str.w	r3, [r2], #4

08006030 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006030:	4b09      	ldr	r3, [pc, #36]	; (8006058 <LoopForever+0x16>)
	cmp	r2, r3
 8006032:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006034:	d3f9      	bcc.n	800602a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006036:	f7ff ff9f 	bl	8005f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800603a:	f000 fc29 	bl	8006890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800603e:	f7ff fbdd 	bl	80057fc <main>

08006042 <LoopForever>:

LoopForever:
    b LoopForever
 8006042:	e7fe      	b.n	8006042 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006044:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8006048:	08007698 	.word	0x08007698
	ldr	r0, =_sdata
 800604c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006050:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8006054:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8006058:	20000260 	.word	0x20000260

0800605c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800605c:	e7fe      	b.n	800605c <ADC1_2_IRQHandler>

0800605e <SDCARD_Select>:
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
 800605e:	b580      	push	{r7, lr}
 8006060:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 8006062:	2200      	movs	r2, #0
 8006064:	2110      	movs	r1, #16
 8006066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800606a:	f7fb fa75 	bl	8001558 <HAL_GPIO_WritePin>
}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}

08006072 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 8006072:	b580      	push	{r7, lr}
 8006074:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 8006076:	2201      	movs	r2, #1
 8006078:	2110      	movs	r1, #16
 800607a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800607e:	f7fb fa6b 	bl	8001558 <HAL_GPIO_WritePin>
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <SDCARD_ReadR1>:
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 800608e:	23ff      	movs	r3, #255	; 0xff
 8006090:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8006092:	1dfa      	adds	r2, r7, #7
 8006094:	1db9      	adds	r1, r7, #6
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2301      	movs	r3, #1
 800609e:	4807      	ldr	r0, [pc, #28]	; (80060bc <SDCARD_ReadR1+0x34>)
 80060a0:	f7fd ff84 	bl	8003fac <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	b25b      	sxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da00      	bge.n	80060ae <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 80060ac:	e7f1      	b.n	8006092 <SDCARD_ReadR1+0xa>
            break;
 80060ae:	bf00      	nop
    }
    return r1;
 80060b0:	79fb      	ldrb	r3, [r7, #7]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200000f8 	.word	0x200000f8

080060c0 <SDCARD_WaitDataToken>:
#define DATA_TOKEN_CMD17 0xFE
#define DATA_TOKEN_CMD18 0xFE
#define DATA_TOKEN_CMD24 0xFE
#define DATA_TOKEN_CMD25 0xFC

static int SDCARD_WaitDataToken(uint8_t token) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	4603      	mov	r3, r0
 80060c8:	71fb      	strb	r3, [r7, #7]
    uint8_t fb;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 80060ca:	23ff      	movs	r3, #255	; 0xff
 80060cc:	73bb      	strb	r3, [r7, #14]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &fb, sizeof(fb), HAL_MAX_DELAY);
 80060ce:	f107 020f 	add.w	r2, r7, #15
 80060d2:	f107 010e 	add.w	r1, r7, #14
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	2301      	movs	r3, #1
 80060de:	4809      	ldr	r0, [pc, #36]	; (8006104 <SDCARD_WaitDataToken+0x44>)
 80060e0:	f7fd ff64 	bl	8003fac <HAL_SPI_TransmitReceive>
        if(fb == token)
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	79fa      	ldrb	r2, [r7, #7]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d005      	beq.n	80060f8 <SDCARD_WaitDataToken+0x38>
            break;

        if(fb != 0xFF)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2bff      	cmp	r3, #255	; 0xff
 80060f0:	d0ed      	beq.n	80060ce <SDCARD_WaitDataToken+0xe>
            return -1;
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295
 80060f6:	e001      	b.n	80060fc <SDCARD_WaitDataToken+0x3c>
            break;
 80060f8:	bf00      	nop
    }
    return 0;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	200000f8 	.word	0x200000f8

08006108 <SDCARD_ReadBytes>:

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8006112:	23ff      	movs	r3, #255	; 0xff
 8006114:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 8006116:	e00f      	b.n	8006138 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8006118:	f107 010f 	add.w	r1, r7, #15
 800611c:	f04f 33ff 	mov.w	r3, #4294967295
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	2301      	movs	r3, #1
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4808      	ldr	r0, [pc, #32]	; (8006148 <SDCARD_ReadBytes+0x40>)
 8006128:	f7fd ff40 	bl	8003fac <HAL_SPI_TransmitReceive>
        buff++;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3301      	adds	r3, #1
 8006130:	607b      	str	r3, [r7, #4]
        buff_size--;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	3b01      	subs	r3, #1
 8006136:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1ec      	bne.n	8006118 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	200000f8 	.word	0x200000f8

0800614c <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 8006152:	1dfb      	adds	r3, r7, #7
 8006154:	2101      	movs	r1, #1
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff ffd6 	bl	8006108 <SDCARD_ReadBytes>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	da02      	bge.n	8006168 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 8006162:	f04f 33ff 	mov.w	r3, #4294967295
 8006166:	e003      	b.n	8006170 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	2bff      	cmp	r3, #255	; 0xff
 800616c:	d1f1      	bne.n	8006152 <SDCARD_WaitNotBusy+0x6>

    return 0;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <SDCARD_Init>:
 
int SDCARD_Init() {
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0

    Set DI and CS high and apply 74 or more clock pulses to SCLK. Without this
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();
 800617e:	f7ff ff78 	bl	8006072 <SDCARD_Unselect>

    uint8_t high = 0xFF;
 8006182:	23ff      	movs	r3, #255	; 0xff
 8006184:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	e00a      	b.n	80061a2 <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 800618c:	f107 010a 	add.w	r1, r7, #10
 8006190:	f04f 33ff 	mov.w	r3, #4294967295
 8006194:	2201      	movs	r2, #1
 8006196:	4868      	ldr	r0, [pc, #416]	; (8006338 <SDCARD_Init+0x1c0>)
 8006198:	f7fd fdb2 	bl	8003d00 <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b09      	cmp	r3, #9
 80061a6:	ddf1      	ble.n	800618c <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 80061a8:	f7ff ff59 	bl	800605e <SDCARD_Select>
    /*
    Step 2.
    
    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80061ac:	f7ff ffce 	bl	800614c <SDCARD_WaitNotBusy>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da04      	bge.n	80061c0 <SDCARD_Init+0x48>
        SDCARD_Unselect();
 80061b6:	f7ff ff5c 	bl	8006072 <SDCARD_Unselect>
        return -1;
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295
 80061be:	e0b6      	b.n	800632e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00, 0x00 /* ARG = 0 */, (0x4A << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80061c0:	f04f 33ff 	mov.w	r3, #4294967295
 80061c4:	2206      	movs	r2, #6
 80061c6:	495d      	ldr	r1, [pc, #372]	; (800633c <SDCARD_Init+0x1c4>)
 80061c8:	485b      	ldr	r0, [pc, #364]	; (8006338 <SDCARD_Init+0x1c0>)
 80061ca:	f7fd fd99 	bl	8003d00 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 80061ce:	f7ff ff5b 	bl	8006088 <SDCARD_ReadR1>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d004      	beq.n	80061e2 <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 80061d8:	f7ff ff4b 	bl	8006072 <SDCARD_Unselect>
        return -1;
 80061dc:	f04f 33ff 	mov.w	r3, #4294967295
 80061e0:	e0a5      	b.n	800632e <SDCARD_Init+0x1b6>
    MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value)
    will be returned. The lower 12 bits in the return value 0x1AA means that
    the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6
    volts. If not the case, the card should be rejected.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80061e2:	f7ff ffb3 	bl	800614c <SDCARD_WaitNotBusy>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	da04      	bge.n	80061f6 <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 80061ec:	f7ff ff41 	bl	8006072 <SDCARD_Unselect>
        return -1;
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295
 80061f4:	e09b      	b.n	800632e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x08 /* CMD8 */, 0x00, 0x00, 0x01, 0xAA /* ARG */, (0x43 << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	2206      	movs	r2, #6
 80061fc:	4950      	ldr	r1, [pc, #320]	; (8006340 <SDCARD_Init+0x1c8>)
 80061fe:	484e      	ldr	r0, [pc, #312]	; (8006338 <SDCARD_Init+0x1c0>)
 8006200:	f7fd fd7e 	bl	8003d00 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8006204:	f7ff ff40 	bl	8006088 <SDCARD_ReadR1>
 8006208:	4603      	mov	r3, r0
 800620a:	2b01      	cmp	r3, #1
 800620c:	d004      	beq.n	8006218 <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 800620e:	f7ff ff30 	bl	8006072 <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 8006212:	f06f 0301 	mvn.w	r3, #1
 8006216:	e08a      	b.n	800632e <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 8006218:	1d3b      	adds	r3, r7, #4
 800621a:	2104      	movs	r1, #4
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff ff73 	bl	8006108 <SDCARD_ReadBytes>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	da04      	bge.n	8006232 <SDCARD_Init+0xba>
            SDCARD_Unselect();
 8006228:	f7ff ff23 	bl	8006072 <SDCARD_Unselect>
            return -3;
 800622c:	f06f 0302 	mvn.w	r3, #2
 8006230:	e07d      	b.n	800632e <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 8006232:	79bb      	ldrb	r3, [r7, #6]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <SDCARD_Init+0xca>
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	2baa      	cmp	r3, #170	; 0xaa
 8006240:	d004      	beq.n	800624c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8006242:	f7ff ff16 	bl	8006072 <SDCARD_Unselect>
            return -4;
 8006246:	f06f 0303 	mvn.w	r3, #3
 800624a:	e070      	b.n	800632e <SDCARD_Init+0x1b6>
    Step 4.

    And then initiate initialization with ACMD41 with HCS flag (bit 30).
    */
    for(;;) {
        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800624c:	f7ff ff7e 	bl	800614c <SDCARD_WaitNotBusy>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	da04      	bge.n	8006260 <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 8006256:	f7ff ff0c 	bl	8006072 <SDCARD_Unselect>
            return -1;
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
 800625e:	e066      	b.n	800632e <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	2206      	movs	r2, #6
 8006266:	4937      	ldr	r1, [pc, #220]	; (8006344 <SDCARD_Init+0x1cc>)
 8006268:	4833      	ldr	r0, [pc, #204]	; (8006338 <SDCARD_Init+0x1c0>)
 800626a:	f7fd fd49 	bl	8003d00 <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 800626e:	f7ff ff0b 	bl	8006088 <SDCARD_ReadR1>
 8006272:	4603      	mov	r3, r0
 8006274:	2b01      	cmp	r3, #1
 8006276:	d004      	beq.n	8006282 <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 8006278:	f7ff fefb 	bl	8006072 <SDCARD_Unselect>
            return -5;
 800627c:	f06f 0304 	mvn.w	r3, #4
 8006280:	e055      	b.n	800632e <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8006282:	f7ff ff63 	bl	800614c <SDCARD_WaitNotBusy>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	da04      	bge.n	8006296 <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 800628c:	f7ff fef1 	bl	8006072 <SDCARD_Unselect>
            return -1;
 8006290:	f04f 33ff 	mov.w	r3, #4294967295
 8006294:	e04b      	b.n	800632e <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006296:	f04f 33ff 	mov.w	r3, #4294967295
 800629a:	2206      	movs	r2, #6
 800629c:	492a      	ldr	r1, [pc, #168]	; (8006348 <SDCARD_Init+0x1d0>)
 800629e:	4826      	ldr	r0, [pc, #152]	; (8006338 <SDCARD_Init+0x1c0>)
 80062a0:	f7fd fd2e 	bl	8003d00 <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 80062a4:	f7ff fef0 	bl	8006088 <SDCARD_ReadR1>
 80062a8:	4603      	mov	r3, r0
 80062aa:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 80062ac:	7afb      	ldrb	r3, [r7, #11]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <SDCARD_Init+0x14a>
            break;
        }

        if(r1 != 0x01) {
 80062b2:	7afb      	ldrb	r3, [r7, #11]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d0c9      	beq.n	800624c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 80062b8:	f7ff fedb 	bl	8006072 <SDCARD_Unselect>
            return -6;
 80062bc:	f06f 0305 	mvn.w	r3, #5
 80062c0:	e035      	b.n	800632e <SDCARD_Init+0x1b6>
            break;
 80062c2:	bf00      	nop

    After the initialization completed, read OCR register with CMD58 and check
    CCS flag (bit 30). When it is set, the card is a high-capacity card known
    as SDHC/SDXC.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80062c4:	f7ff ff42 	bl	800614c <SDCARD_WaitNotBusy>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da04      	bge.n	80062d8 <SDCARD_Init+0x160>
        SDCARD_Unselect();
 80062ce:	f7ff fed0 	bl	8006072 <SDCARD_Unselect>
        return -1;
 80062d2:	f04f 33ff 	mov.w	r3, #4294967295
 80062d6:	e02a      	b.n	800632e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80062d8:	f04f 33ff 	mov.w	r3, #4294967295
 80062dc:	2206      	movs	r2, #6
 80062de:	491b      	ldr	r1, [pc, #108]	; (800634c <SDCARD_Init+0x1d4>)
 80062e0:	4815      	ldr	r0, [pc, #84]	; (8006338 <SDCARD_Init+0x1c0>)
 80062e2:	f7fd fd0d 	bl	8003d00 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 80062e6:	f7ff fecf 	bl	8006088 <SDCARD_ReadR1>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <SDCARD_Init+0x182>
        SDCARD_Unselect();
 80062f0:	f7ff febf 	bl	8006072 <SDCARD_Unselect>
        return -7;
 80062f4:	f06f 0306 	mvn.w	r3, #6
 80062f8:	e019      	b.n	800632e <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 80062fa:	463b      	mov	r3, r7
 80062fc:	2104      	movs	r1, #4
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff ff02 	bl	8006108 <SDCARD_ReadBytes>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	da04      	bge.n	8006314 <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 800630a:	f7ff feb2 	bl	8006072 <SDCARD_Unselect>
            return -8;
 800630e:	f06f 0307 	mvn.w	r3, #7
 8006312:	e00c      	b.n	800632e <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 8006314:	783b      	ldrb	r3, [r7, #0]
 8006316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800631a:	2bc0      	cmp	r3, #192	; 0xc0
 800631c:	d004      	beq.n	8006328 <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 800631e:	f7ff fea8 	bl	8006072 <SDCARD_Unselect>
            return -9;
 8006322:	f06f 0308 	mvn.w	r3, #8
 8006326:	e002      	b.n	800632e <SDCARD_Init+0x1b6>
        }
    }

    SDCARD_Unselect();
 8006328:	f7ff fea3 	bl	8006072 <SDCARD_Unselect>
    return 0;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	200000f8 	.word	0x200000f8
 800633c:	0800761c 	.word	0x0800761c
 8006340:	08007624 	.word	0x08007624
 8006344:	0800762c 	.word	0x0800762c
 8006348:	08007634 	.word	0x08007634
 800634c:	0800763c 	.word	0x0800763c

08006350 <SDCARD_GetBlocksNumber>:


int SDCARD_GetBlocksNumber(uint32_t* num) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
    uint8_t csd[16];
    uint8_t crc[2];

    SDCARD_Select();
 8006358:	f7ff fe81 	bl	800605e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800635c:	f7ff fef6 	bl	800614c <SDCARD_WaitNotBusy>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	da04      	bge.n	8006370 <SDCARD_GetBlocksNumber+0x20>
        SDCARD_Unselect();
 8006366:	f7ff fe84 	bl	8006072 <SDCARD_Unselect>
        return -1;
 800636a:	f04f 33ff 	mov.w	r3, #4294967295
 800636e:	e057      	b.n	8006420 <SDCARD_GetBlocksNumber+0xd0>

    /* CMD9 (SEND_CSD) command */
    {
        static const uint8_t cmd[] =
            { 0x40 | 0x09 /* CMD9 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006370:	f04f 33ff 	mov.w	r3, #4294967295
 8006374:	2206      	movs	r2, #6
 8006376:	492c      	ldr	r1, [pc, #176]	; (8006428 <SDCARD_GetBlocksNumber+0xd8>)
 8006378:	482c      	ldr	r0, [pc, #176]	; (800642c <SDCARD_GetBlocksNumber+0xdc>)
 800637a:	f7fd fcc1 	bl	8003d00 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 800637e:	f7ff fe83 	bl	8006088 <SDCARD_ReadR1>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <SDCARD_GetBlocksNumber+0x42>
        SDCARD_Unselect();
 8006388:	f7ff fe73 	bl	8006072 <SDCARD_Unselect>
        return -2;
 800638c:	f06f 0301 	mvn.w	r3, #1
 8006390:	e046      	b.n	8006420 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD9) < 0) {
 8006392:	20fe      	movs	r0, #254	; 0xfe
 8006394:	f7ff fe94 	bl	80060c0 <SDCARD_WaitDataToken>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	da04      	bge.n	80063a8 <SDCARD_GetBlocksNumber+0x58>
        SDCARD_Unselect();
 800639e:	f7ff fe68 	bl	8006072 <SDCARD_Unselect>
        return -3;
 80063a2:	f06f 0302 	mvn.w	r3, #2
 80063a6:	e03b      	b.n	8006420 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(csd, sizeof(csd)) < 0) {
 80063a8:	f107 030c 	add.w	r3, r7, #12
 80063ac:	2110      	movs	r1, #16
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff feaa 	bl	8006108 <SDCARD_ReadBytes>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da04      	bge.n	80063c4 <SDCARD_GetBlocksNumber+0x74>
        SDCARD_Unselect();
 80063ba:	f7ff fe5a 	bl	8006072 <SDCARD_Unselect>
        return -4;
 80063be:	f06f 0303 	mvn.w	r3, #3
 80063c2:	e02d      	b.n	8006420 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(crc, sizeof(crc)) < 0) {
 80063c4:	f107 0308 	add.w	r3, r7, #8
 80063c8:	2102      	movs	r1, #2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff fe9c 	bl	8006108 <SDCARD_ReadBytes>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da04      	bge.n	80063e0 <SDCARD_GetBlocksNumber+0x90>
        SDCARD_Unselect();
 80063d6:	f7ff fe4c 	bl	8006072 <SDCARD_Unselect>
        return -5;
 80063da:	f06f 0304 	mvn.w	r3, #4
 80063de:	e01f      	b.n	8006420 <SDCARD_GetBlocksNumber+0xd0>
    }

    SDCARD_Unselect();
 80063e0:	f7ff fe47 	bl	8006072 <SDCARD_Unselect>

    // first byte is VVxxxxxxxx where VV is csd.version
    if((csd[0] & 0xC0) != 0x40) // csd.version != 1
 80063e4:	7b3b      	ldrb	r3, [r7, #12]
 80063e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d002      	beq.n	80063f4 <SDCARD_GetBlocksNumber+0xa4>
        return -6;
 80063ee:	f06f 0305 	mvn.w	r3, #5
 80063f2:	e015      	b.n	8006420 <SDCARD_GetBlocksNumber+0xd0>

    uint32_t tmp = csd[7] & 0x3F; // two bits are reserved
 80063f4:	7cfb      	ldrb	r3, [r7, #19]
 80063f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063fa:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[8];
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	7d3a      	ldrb	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[9];
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	7d7a      	ldrb	r2, [r7, #21]
 800640c:	4313      	orrs	r3, r2
 800640e:	61fb      	str	r3, [r7, #28]
    tmp = (tmp + 1) << 9;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	3301      	adds	r3, #1
 8006414:	025b      	lsls	r3, r3, #9
 8006416:	61fb      	str	r3, [r7, #28]
    *num = tmp;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	601a      	str	r2, [r3, #0]

    return 0;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3720      	adds	r7, #32
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	08007644 	.word	0x08007644
 800642c:	200000f8 	.word	0x200000f8

08006430 <SDCARD_ReadSingleBlock>:

int SDCARD_ReadSingleBlock(uint32_t blockNum, uint8_t* buff) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
    uint8_t crc[2];

    SDCARD_Select();
 800643a:	f7ff fe10 	bl	800605e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800643e:	f7ff fe85 	bl	800614c <SDCARD_WaitNotBusy>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	da04      	bge.n	8006452 <SDCARD_ReadSingleBlock+0x22>
        SDCARD_Unselect();
 8006448:	f7ff fe13 	bl	8006072 <SDCARD_Unselect>
        return -1;
 800644c:	f04f 33ff 	mov.w	r3, #4294967295
 8006450:	e04d      	b.n	80064ee <SDCARD_ReadSingleBlock+0xbe>
    }

    /* CMD17 (SEND_SINGLE_BLOCK) command */
    uint8_t cmd[] = {
 8006452:	2351      	movs	r3, #81	; 0x51
 8006454:	733b      	strb	r3, [r7, #12]
        0x40 | 0x11 /* CMD17 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 800645a:	b2db      	uxtb	r3, r3
 800645c:	737b      	strb	r3, [r7, #13]
        (blockNum >> 16) & 0xFF,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 8006462:	b2db      	uxtb	r3, r3
 8006464:	73bb      	strb	r3, [r7, #14]
        (blockNum >> 8) & 0xFF,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 800646a:	b2db      	uxtb	r3, r3
 800646c:	73fb      	strb	r3, [r7, #15]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	743b      	strb	r3, [r7, #16]
 8006474:	23ff      	movs	r3, #255	; 0xff
 8006476:	747b      	strb	r3, [r7, #17]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006478:	f107 010c 	add.w	r1, r7, #12
 800647c:	f04f 33ff 	mov.w	r3, #4294967295
 8006480:	2206      	movs	r2, #6
 8006482:	481d      	ldr	r0, [pc, #116]	; (80064f8 <SDCARD_ReadSingleBlock+0xc8>)
 8006484:	f7fd fc3c 	bl	8003d00 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8006488:	f7ff fdfe 	bl	8006088 <SDCARD_ReadR1>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <SDCARD_ReadSingleBlock+0x6c>
        SDCARD_Unselect();
 8006492:	f7ff fdee 	bl	8006072 <SDCARD_Unselect>
        return -2;
 8006496:	f06f 0301 	mvn.w	r3, #1
 800649a:	e028      	b.n	80064ee <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD17) < 0) {
 800649c:	20fe      	movs	r0, #254	; 0xfe
 800649e:	f7ff fe0f 	bl	80060c0 <SDCARD_WaitDataToken>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	da04      	bge.n	80064b2 <SDCARD_ReadSingleBlock+0x82>
        SDCARD_Unselect();
 80064a8:	f7ff fde3 	bl	8006072 <SDCARD_Unselect>
        return -3;
 80064ac:	f06f 0302 	mvn.w	r3, #2
 80064b0:	e01d      	b.n	80064ee <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(buff, 512) < 0) {
 80064b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064b6:	6838      	ldr	r0, [r7, #0]
 80064b8:	f7ff fe26 	bl	8006108 <SDCARD_ReadBytes>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da04      	bge.n	80064cc <SDCARD_ReadSingleBlock+0x9c>
        SDCARD_Unselect();
 80064c2:	f7ff fdd6 	bl	8006072 <SDCARD_Unselect>
        return -4;
 80064c6:	f06f 0303 	mvn.w	r3, #3
 80064ca:	e010      	b.n	80064ee <SDCARD_ReadSingleBlock+0xbe>
    }

    if(SDCARD_ReadBytes(crc, 2) < 0) {
 80064cc:	f107 0314 	add.w	r3, r7, #20
 80064d0:	2102      	movs	r1, #2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fe18 	bl	8006108 <SDCARD_ReadBytes>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	da04      	bge.n	80064e8 <SDCARD_ReadSingleBlock+0xb8>
        SDCARD_Unselect();
 80064de:	f7ff fdc8 	bl	8006072 <SDCARD_Unselect>
        return -5;
 80064e2:	f06f 0304 	mvn.w	r3, #4
 80064e6:	e002      	b.n	80064ee <SDCARD_ReadSingleBlock+0xbe>
    }

    SDCARD_Unselect();
 80064e8:	f7ff fdc3 	bl	8006072 <SDCARD_Unselect>
    return 0;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	200000f8 	.word	0x200000f8

080064fc <SDCARD_WriteSingleBlock>:


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 8006506:	f7ff fdaa 	bl	800605e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800650a:	f7ff fe1f 	bl	800614c <SDCARD_WaitNotBusy>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	da04      	bge.n	800651e <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 8006514:	f7ff fdad 	bl	8006072 <SDCARD_Unselect>
        return -1;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	e05e      	b.n	80065dc <SDCARD_WriteSingleBlock+0xe0>
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
 800651e:	2358      	movs	r3, #88	; 0x58
 8006520:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8006526:	b2db      	uxtb	r3, r3
 8006528:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 800652e:	b2db      	uxtb	r3, r3
 8006530:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8006536:	b2db      	uxtb	r3, r3
 8006538:	74fb      	strb	r3, [r7, #19]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	753b      	strb	r3, [r7, #20]
 8006540:	23ff      	movs	r3, #255	; 0xff
 8006542:	757b      	strb	r3, [r7, #21]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006544:	f107 0110 	add.w	r1, r7, #16
 8006548:	f04f 33ff 	mov.w	r3, #4294967295
 800654c:	2206      	movs	r2, #6
 800654e:	4825      	ldr	r0, [pc, #148]	; (80065e4 <SDCARD_WriteSingleBlock+0xe8>)
 8006550:	f7fd fbd6 	bl	8003d00 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8006554:	f7ff fd98 	bl	8006088 <SDCARD_ReadR1>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 800655e:	f7ff fd88 	bl	8006072 <SDCARD_Unselect>
        return -2;
 8006562:	f06f 0301 	mvn.w	r3, #1
 8006566:	e039      	b.n	80065dc <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 8006568:	23fe      	movs	r3, #254	; 0xfe
 800656a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 800656c:	4b1e      	ldr	r3, [pc, #120]	; (80065e8 <SDCARD_WriteSingleBlock+0xec>)
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 8006572:	f107 010f 	add.w	r1, r7, #15
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	2201      	movs	r2, #1
 800657c:	4819      	ldr	r0, [pc, #100]	; (80065e4 <SDCARD_WriteSingleBlock+0xe8>)
 800657e:	f7fd fbbf 	bl	8003d00 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 8006582:	f04f 33ff 	mov.w	r3, #4294967295
 8006586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	4815      	ldr	r0, [pc, #84]	; (80065e4 <SDCARD_WriteSingleBlock+0xe8>)
 800658e:	f7fd fbb7 	bl	8003d00 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 8006592:	f107 010c 	add.w	r1, r7, #12
 8006596:	f04f 33ff 	mov.w	r3, #4294967295
 800659a:	2202      	movs	r2, #2
 800659c:	4811      	ldr	r0, [pc, #68]	; (80065e4 <SDCARD_WriteSingleBlock+0xe8>)
 800659e:	f7fd fbaf 	bl	8003d00 <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 80065a2:	f107 030b 	add.w	r3, r7, #11
 80065a6:	2101      	movs	r1, #1
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff fdad 	bl	8006108 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2b05      	cmp	r3, #5
 80065b6:	d004      	beq.n	80065c2 <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 80065b8:	f7ff fd5b 	bl	8006072 <SDCARD_Unselect>
        return -3;
 80065bc:	f06f 0302 	mvn.w	r3, #2
 80065c0:	e00c      	b.n	80065dc <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 80065c2:	f7ff fdc3 	bl	800614c <SDCARD_WaitNotBusy>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	da04      	bge.n	80065d6 <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 80065cc:	f7ff fd51 	bl	8006072 <SDCARD_Unselect>
        return -4;
 80065d0:	f06f 0303 	mvn.w	r3, #3
 80065d4:	e002      	b.n	80065dc <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 80065d6:	f7ff fd4c 	bl	8006072 <SDCARD_Unselect>
    return 0;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200000f8 	.word	0x200000f8
 80065e8:	080075e0 	.word	0x080075e0

080065ec <SDCARD_ReadBegin>:

int SDCARD_ReadBegin(uint32_t blockNum) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
    SDCARD_Select();
 80065f4:	f7ff fd33 	bl	800605e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80065f8:	f7ff fda8 	bl	800614c <SDCARD_WaitNotBusy>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da04      	bge.n	800660c <SDCARD_ReadBegin+0x20>
        SDCARD_Unselect();
 8006602:	f7ff fd36 	bl	8006072 <SDCARD_Unselect>
        return -1;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295
 800660a:	e027      	b.n	800665c <SDCARD_ReadBegin+0x70>
    }

    /* CMD18 (READ_MULTIPLE_BLOCK) command */
    uint8_t cmd[] = {
 800660c:	2352      	movs	r3, #82	; 0x52
 800660e:	723b      	strb	r3, [r7, #8]
        0x40 | 0x12 /* CMD18 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8006614:	b2db      	uxtb	r3, r3
 8006616:	727b      	strb	r3, [r7, #9]
        (blockNum >> 16) & 0xFF,
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 800661c:	b2db      	uxtb	r3, r3
 800661e:	72bb      	strb	r3, [r7, #10]
        (blockNum >> 8) & 0xFF,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8006624:	b2db      	uxtb	r3, r3
 8006626:	72fb      	strb	r3, [r7, #11]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	733b      	strb	r3, [r7, #12]
 800662e:	23ff      	movs	r3, #255	; 0xff
 8006630:	737b      	strb	r3, [r7, #13]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006632:	f107 0108 	add.w	r1, r7, #8
 8006636:	f04f 33ff 	mov.w	r3, #4294967295
 800663a:	2206      	movs	r2, #6
 800663c:	4809      	ldr	r0, [pc, #36]	; (8006664 <SDCARD_ReadBegin+0x78>)
 800663e:	f7fd fb5f 	bl	8003d00 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8006642:	f7ff fd21 	bl	8006088 <SDCARD_ReadR1>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d004      	beq.n	8006656 <SDCARD_ReadBegin+0x6a>
        SDCARD_Unselect();
 800664c:	f7ff fd11 	bl	8006072 <SDCARD_Unselect>
        return -2;
 8006650:	f06f 0301 	mvn.w	r3, #1
 8006654:	e002      	b.n	800665c <SDCARD_ReadBegin+0x70>
    }

    SDCARD_Unselect();
 8006656:	f7ff fd0c 	bl	8006072 <SDCARD_Unselect>
    return 0;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	200000f8 	.word	0x200000f8

08006668 <SDCARD_ReadData>:

int SDCARD_ReadData(uint8_t* buff) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
    uint8_t crc[2];
    SDCARD_Select();
 8006670:	f7ff fcf5 	bl	800605e <SDCARD_Select>

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD18) < 0) {
 8006674:	20fe      	movs	r0, #254	; 0xfe
 8006676:	f7ff fd23 	bl	80060c0 <SDCARD_WaitDataToken>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	da04      	bge.n	800668a <SDCARD_ReadData+0x22>
        SDCARD_Unselect();
 8006680:	f7ff fcf7 	bl	8006072 <SDCARD_Unselect>
        return -1;
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
 8006688:	e01d      	b.n	80066c6 <SDCARD_ReadData+0x5e>
    }

    if(SDCARD_ReadBytes(buff, 512) < 0) {
 800668a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fd3a 	bl	8006108 <SDCARD_ReadBytes>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	da04      	bge.n	80066a4 <SDCARD_ReadData+0x3c>
        SDCARD_Unselect();
 800669a:	f7ff fcea 	bl	8006072 <SDCARD_Unselect>
        return -2;
 800669e:	f06f 0301 	mvn.w	r3, #1
 80066a2:	e010      	b.n	80066c6 <SDCARD_ReadData+0x5e>
    }

    if(SDCARD_ReadBytes(crc, 2) < 0) {
 80066a4:	f107 030c 	add.w	r3, r7, #12
 80066a8:	2102      	movs	r1, #2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fd2c 	bl	8006108 <SDCARD_ReadBytes>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	da04      	bge.n	80066c0 <SDCARD_ReadData+0x58>
        SDCARD_Unselect();
 80066b6:	f7ff fcdc 	bl	8006072 <SDCARD_Unselect>
        return -3;
 80066ba:	f06f 0302 	mvn.w	r3, #2
 80066be:	e002      	b.n	80066c6 <SDCARD_ReadData+0x5e>
    }

    SDCARD_Unselect();
 80066c0:	f7ff fcd7 	bl	8006072 <SDCARD_Unselect>
    return 0;
 80066c4:	2300      	movs	r3, #0

}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <SDCARD_ReadEnd>:

int SDCARD_ReadEnd() {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
    SDCARD_Select();
 80066d6:	f7ff fcc2 	bl	800605e <SDCARD_Select>

    /* CMD12 (STOP_TRANSMISSION) */
    {
        static const uint8_t cmd[] = { 0x40 | 0x0C /* CMD12 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80066da:	f04f 33ff 	mov.w	r3, #4294967295
 80066de:	2206      	movs	r2, #6
 80066e0:	4910      	ldr	r1, [pc, #64]	; (8006724 <SDCARD_ReadEnd+0x54>)
 80066e2:	4811      	ldr	r0, [pc, #68]	; (8006728 <SDCARD_ReadEnd+0x58>)
 80066e4:	f7fd fb0c 	bl	8003d00 <HAL_SPI_Transmit>
    /*
    The received byte immediataly following CMD12 is a stuff byte, it should be
    discarded before receive the response of the CMD12
    */
    uint8_t stuffByte;
    if(SDCARD_ReadBytes(&stuffByte, sizeof(stuffByte)) < 0) {
 80066e8:	1dfb      	adds	r3, r7, #7
 80066ea:	2101      	movs	r1, #1
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fd0b 	bl	8006108 <SDCARD_ReadBytes>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da04      	bge.n	8006702 <SDCARD_ReadEnd+0x32>
        SDCARD_Unselect();
 80066f8:	f7ff fcbb 	bl	8006072 <SDCARD_Unselect>
        return -1;
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006700:	e00c      	b.n	800671c <SDCARD_ReadEnd+0x4c>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8006702:	f7ff fcc1 	bl	8006088 <SDCARD_ReadR1>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <SDCARD_ReadEnd+0x46>
        SDCARD_Unselect();
 800670c:	f7ff fcb1 	bl	8006072 <SDCARD_Unselect>
        return -2;
 8006710:	f06f 0301 	mvn.w	r3, #1
 8006714:	e002      	b.n	800671c <SDCARD_ReadEnd+0x4c>
    }
    
    SDCARD_Unselect();
 8006716:	f7ff fcac 	bl	8006072 <SDCARD_Unselect>
    return 0;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	0800764c 	.word	0x0800764c
 8006728:	200000f8 	.word	0x200000f8

0800672c <SDCARD_WriteBegin>:


int SDCARD_WriteBegin(uint32_t blockNum) {
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
    SDCARD_Select();
 8006734:	f7ff fc93 	bl	800605e <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8006738:	f7ff fd08 	bl	800614c <SDCARD_WaitNotBusy>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	da04      	bge.n	800674c <SDCARD_WriteBegin+0x20>
        SDCARD_Unselect();
 8006742:	f7ff fc96 	bl	8006072 <SDCARD_Unselect>
        return -1;
 8006746:	f04f 33ff 	mov.w	r3, #4294967295
 800674a:	e027      	b.n	800679c <SDCARD_WriteBegin+0x70>
    }

    /* CMD25 (WRITE_MULTIPLE_BLOCK) command */
    uint8_t cmd[] = {
 800674c:	2359      	movs	r3, #89	; 0x59
 800674e:	723b      	strb	r3, [r7, #8]
        0x40 | 0x19 /* CMD25 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8006754:	b2db      	uxtb	r3, r3
 8006756:	727b      	strb	r3, [r7, #9]
        (blockNum >> 16) & 0xFF,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 800675c:	b2db      	uxtb	r3, r3
 800675e:	72bb      	strb	r3, [r7, #10]
        (blockNum >> 8) & 0xFF,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8006764:	b2db      	uxtb	r3, r3
 8006766:	72fb      	strb	r3, [r7, #11]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	733b      	strb	r3, [r7, #12]
 800676e:	23ff      	movs	r3, #255	; 0xff
 8006770:	737b      	strb	r3, [r7, #13]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006772:	f107 0108 	add.w	r1, r7, #8
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	2206      	movs	r2, #6
 800677c:	4809      	ldr	r0, [pc, #36]	; (80067a4 <SDCARD_WriteBegin+0x78>)
 800677e:	f7fd fabf 	bl	8003d00 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8006782:	f7ff fc81 	bl	8006088 <SDCARD_ReadR1>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <SDCARD_WriteBegin+0x6a>
        SDCARD_Unselect();
 800678c:	f7ff fc71 	bl	8006072 <SDCARD_Unselect>
        return -2;
 8006790:	f06f 0301 	mvn.w	r3, #1
 8006794:	e002      	b.n	800679c <SDCARD_WriteBegin+0x70>
    }

    SDCARD_Unselect();
 8006796:	f7ff fc6c 	bl	8006072 <SDCARD_Unselect>
    return 0;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	200000f8 	.word	0x200000f8

080067a8 <SDCARD_WriteData>:

int SDCARD_WriteData(const uint8_t* buff) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
    SDCARD_Select();
 80067b0:	f7ff fc55 	bl	800605e <SDCARD_Select>

    uint8_t dataToken = DATA_TOKEN_CMD25;
 80067b4:	23fc      	movs	r3, #252	; 0xfc
 80067b6:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 80067b8:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <SDCARD_WriteData+0x88>)
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 80067be:	f107 010f 	add.w	r1, r7, #15
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295
 80067c6:	2201      	movs	r2, #1
 80067c8:	481a      	ldr	r0, [pc, #104]	; (8006834 <SDCARD_WriteData+0x8c>)
 80067ca:	f7fd fa99 	bl	8003d00 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 80067ce:	f04f 33ff 	mov.w	r3, #4294967295
 80067d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4816      	ldr	r0, [pc, #88]	; (8006834 <SDCARD_WriteData+0x8c>)
 80067da:	f7fd fa91 	bl	8003d00 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 80067de:	f107 010c 	add.w	r1, r7, #12
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	2202      	movs	r2, #2
 80067e8:	4812      	ldr	r0, [pc, #72]	; (8006834 <SDCARD_WriteData+0x8c>)
 80067ea:	f7fd fa89 	bl	8003d00 <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 80067ee:	f107 030b 	add.w	r3, r7, #11
 80067f2:	2101      	movs	r1, #1
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff fc87 	bl	8006108 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 80067fa:	7afb      	ldrb	r3, [r7, #11]
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	2b05      	cmp	r3, #5
 8006802:	d004      	beq.n	800680e <SDCARD_WriteData+0x66>
        SDCARD_Unselect();
 8006804:	f7ff fc35 	bl	8006072 <SDCARD_Unselect>
        return -1;
 8006808:	f04f 33ff 	mov.w	r3, #4294967295
 800680c:	e00c      	b.n	8006828 <SDCARD_WriteData+0x80>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 800680e:	f7ff fc9d 	bl	800614c <SDCARD_WaitNotBusy>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	da04      	bge.n	8006822 <SDCARD_WriteData+0x7a>
        SDCARD_Unselect();
 8006818:	f7ff fc2b 	bl	8006072 <SDCARD_Unselect>
        return -2;
 800681c:	f06f 0301 	mvn.w	r3, #1
 8006820:	e002      	b.n	8006828 <SDCARD_WriteData+0x80>
    }

    SDCARD_Unselect();
 8006822:	f7ff fc26 	bl	8006072 <SDCARD_Unselect>
    return 0;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	080075e0 	.word	0x080075e0
 8006834:	200000f8 	.word	0x200000f8

08006838 <SDCARD_WriteEnd>:

int SDCARD_WriteEnd() {
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
    SDCARD_Select();
 800683e:	f7ff fc0e 	bl	800605e <SDCARD_Select>

    uint8_t stopTran = 0xFD; // stop transaction token for CMD25
 8006842:	23fd      	movs	r3, #253	; 0xfd
 8006844:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &stopTran, sizeof(stopTran), HAL_MAX_DELAY);
 8006846:	1df9      	adds	r1, r7, #7
 8006848:	f04f 33ff 	mov.w	r3, #4294967295
 800684c:	2201      	movs	r2, #1
 800684e:	480c      	ldr	r0, [pc, #48]	; (8006880 <SDCARD_WriteEnd+0x48>)
 8006850:	f7fd fa56 	bl	8003d00 <HAL_SPI_Transmit>

    // skip one byte before readyng "busy"
    // this is required by the spec and is necessary for some real SD-cards!
    uint8_t skipByte;
    SDCARD_ReadBytes(&skipByte, sizeof(skipByte));
 8006854:	1dbb      	adds	r3, r7, #6
 8006856:	2101      	movs	r1, #1
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff fc55 	bl	8006108 <SDCARD_ReadBytes>

    if(SDCARD_WaitNotBusy() < 0) {
 800685e:	f7ff fc75 	bl	800614c <SDCARD_WaitNotBusy>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	da04      	bge.n	8006872 <SDCARD_WriteEnd+0x3a>
        SDCARD_Unselect();
 8006868:	f7ff fc03 	bl	8006072 <SDCARD_Unselect>
        return -1;
 800686c:	f04f 33ff 	mov.w	r3, #4294967295
 8006870:	e002      	b.n	8006878 <SDCARD_WriteEnd+0x40>
    }

    SDCARD_Unselect();
 8006872:	f7ff fbfe 	bl	8006072 <SDCARD_Unselect>
    return 0;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	200000f8 	.word	0x200000f8

08006884 <__errno>:
 8006884:	4b01      	ldr	r3, [pc, #4]	; (800688c <__errno+0x8>)
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	2000000c 	.word	0x2000000c

08006890 <__libc_init_array>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4e0d      	ldr	r6, [pc, #52]	; (80068c8 <__libc_init_array+0x38>)
 8006894:	4c0d      	ldr	r4, [pc, #52]	; (80068cc <__libc_init_array+0x3c>)
 8006896:	1ba4      	subs	r4, r4, r6
 8006898:	10a4      	asrs	r4, r4, #2
 800689a:	2500      	movs	r5, #0
 800689c:	42a5      	cmp	r5, r4
 800689e:	d109      	bne.n	80068b4 <__libc_init_array+0x24>
 80068a0:	4e0b      	ldr	r6, [pc, #44]	; (80068d0 <__libc_init_array+0x40>)
 80068a2:	4c0c      	ldr	r4, [pc, #48]	; (80068d4 <__libc_init_array+0x44>)
 80068a4:	f000 fc74 	bl	8007190 <_init>
 80068a8:	1ba4      	subs	r4, r4, r6
 80068aa:	10a4      	asrs	r4, r4, #2
 80068ac:	2500      	movs	r5, #0
 80068ae:	42a5      	cmp	r5, r4
 80068b0:	d105      	bne.n	80068be <__libc_init_array+0x2e>
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068b8:	4798      	blx	r3
 80068ba:	3501      	adds	r5, #1
 80068bc:	e7ee      	b.n	800689c <__libc_init_array+0xc>
 80068be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068c2:	4798      	blx	r3
 80068c4:	3501      	adds	r5, #1
 80068c6:	e7f2      	b.n	80068ae <__libc_init_array+0x1e>
 80068c8:	08007690 	.word	0x08007690
 80068cc:	08007690 	.word	0x08007690
 80068d0:	08007690 	.word	0x08007690
 80068d4:	08007694 	.word	0x08007694

080068d8 <memset>:
 80068d8:	4402      	add	r2, r0
 80068da:	4603      	mov	r3, r0
 80068dc:	4293      	cmp	r3, r2
 80068de:	d100      	bne.n	80068e2 <memset+0xa>
 80068e0:	4770      	bx	lr
 80068e2:	f803 1b01 	strb.w	r1, [r3], #1
 80068e6:	e7f9      	b.n	80068dc <memset+0x4>

080068e8 <sniprintf>:
 80068e8:	b40c      	push	{r2, r3}
 80068ea:	b530      	push	{r4, r5, lr}
 80068ec:	4b17      	ldr	r3, [pc, #92]	; (800694c <sniprintf+0x64>)
 80068ee:	1e0c      	subs	r4, r1, #0
 80068f0:	b09d      	sub	sp, #116	; 0x74
 80068f2:	681d      	ldr	r5, [r3, #0]
 80068f4:	da08      	bge.n	8006908 <sniprintf+0x20>
 80068f6:	238b      	movs	r3, #139	; 0x8b
 80068f8:	602b      	str	r3, [r5, #0]
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295
 80068fe:	b01d      	add	sp, #116	; 0x74
 8006900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006904:	b002      	add	sp, #8
 8006906:	4770      	bx	lr
 8006908:	f44f 7302 	mov.w	r3, #520	; 0x208
 800690c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006910:	bf14      	ite	ne
 8006912:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006916:	4623      	moveq	r3, r4
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	9307      	str	r3, [sp, #28]
 800691c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006920:	9002      	str	r0, [sp, #8]
 8006922:	9006      	str	r0, [sp, #24]
 8006924:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006928:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800692a:	ab21      	add	r3, sp, #132	; 0x84
 800692c:	a902      	add	r1, sp, #8
 800692e:	4628      	mov	r0, r5
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	f000 f8a1 	bl	8006a78 <_svfiprintf_r>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	bfbc      	itt	lt
 800693a:	238b      	movlt	r3, #139	; 0x8b
 800693c:	602b      	strlt	r3, [r5, #0]
 800693e:	2c00      	cmp	r4, #0
 8006940:	d0dd      	beq.n	80068fe <sniprintf+0x16>
 8006942:	9b02      	ldr	r3, [sp, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	e7d9      	b.n	80068fe <sniprintf+0x16>
 800694a:	bf00      	nop
 800694c:	2000000c 	.word	0x2000000c

08006950 <_vsniprintf_r>:
 8006950:	b530      	push	{r4, r5, lr}
 8006952:	1e14      	subs	r4, r2, #0
 8006954:	4605      	mov	r5, r0
 8006956:	b09b      	sub	sp, #108	; 0x6c
 8006958:	4618      	mov	r0, r3
 800695a:	da05      	bge.n	8006968 <_vsniprintf_r+0x18>
 800695c:	238b      	movs	r3, #139	; 0x8b
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	b01b      	add	sp, #108	; 0x6c
 8006966:	bd30      	pop	{r4, r5, pc}
 8006968:	f44f 7302 	mov.w	r3, #520	; 0x208
 800696c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006970:	bf14      	ite	ne
 8006972:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006976:	4623      	moveq	r3, r4
 8006978:	9302      	str	r3, [sp, #8]
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006980:	9100      	str	r1, [sp, #0]
 8006982:	9104      	str	r1, [sp, #16]
 8006984:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006988:	4602      	mov	r2, r0
 800698a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800698c:	4669      	mov	r1, sp
 800698e:	4628      	mov	r0, r5
 8006990:	f000 f872 	bl	8006a78 <_svfiprintf_r>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	bfbc      	itt	lt
 8006998:	238b      	movlt	r3, #139	; 0x8b
 800699a:	602b      	strlt	r3, [r5, #0]
 800699c:	2c00      	cmp	r4, #0
 800699e:	d0e1      	beq.n	8006964 <_vsniprintf_r+0x14>
 80069a0:	9b00      	ldr	r3, [sp, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	e7dd      	b.n	8006964 <_vsniprintf_r+0x14>

080069a8 <vsniprintf>:
 80069a8:	b507      	push	{r0, r1, r2, lr}
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	460a      	mov	r2, r1
 80069b0:	4601      	mov	r1, r0
 80069b2:	4803      	ldr	r0, [pc, #12]	; (80069c0 <vsniprintf+0x18>)
 80069b4:	6800      	ldr	r0, [r0, #0]
 80069b6:	f7ff ffcb 	bl	8006950 <_vsniprintf_r>
 80069ba:	b003      	add	sp, #12
 80069bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80069c0:	2000000c 	.word	0x2000000c

080069c4 <__ssputs_r>:
 80069c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	688e      	ldr	r6, [r1, #8]
 80069ca:	429e      	cmp	r6, r3
 80069cc:	4682      	mov	sl, r0
 80069ce:	460c      	mov	r4, r1
 80069d0:	4690      	mov	r8, r2
 80069d2:	4699      	mov	r9, r3
 80069d4:	d837      	bhi.n	8006a46 <__ssputs_r+0x82>
 80069d6:	898a      	ldrh	r2, [r1, #12]
 80069d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069dc:	d031      	beq.n	8006a42 <__ssputs_r+0x7e>
 80069de:	6825      	ldr	r5, [r4, #0]
 80069e0:	6909      	ldr	r1, [r1, #16]
 80069e2:	1a6f      	subs	r7, r5, r1
 80069e4:	6965      	ldr	r5, [r4, #20]
 80069e6:	2302      	movs	r3, #2
 80069e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80069f0:	f109 0301 	add.w	r3, r9, #1
 80069f4:	443b      	add	r3, r7
 80069f6:	429d      	cmp	r5, r3
 80069f8:	bf38      	it	cc
 80069fa:	461d      	movcc	r5, r3
 80069fc:	0553      	lsls	r3, r2, #21
 80069fe:	d530      	bpl.n	8006a62 <__ssputs_r+0x9e>
 8006a00:	4629      	mov	r1, r5
 8006a02:	f000 fb2b 	bl	800705c <_malloc_r>
 8006a06:	4606      	mov	r6, r0
 8006a08:	b950      	cbnz	r0, 8006a20 <__ssputs_r+0x5c>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	f8ca 3000 	str.w	r3, [sl]
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	463a      	mov	r2, r7
 8006a22:	6921      	ldr	r1, [r4, #16]
 8006a24:	f000 faa8 	bl	8006f78 <memcpy>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	6126      	str	r6, [r4, #16]
 8006a36:	6165      	str	r5, [r4, #20]
 8006a38:	443e      	add	r6, r7
 8006a3a:	1bed      	subs	r5, r5, r7
 8006a3c:	6026      	str	r6, [r4, #0]
 8006a3e:	60a5      	str	r5, [r4, #8]
 8006a40:	464e      	mov	r6, r9
 8006a42:	454e      	cmp	r6, r9
 8006a44:	d900      	bls.n	8006a48 <__ssputs_r+0x84>
 8006a46:	464e      	mov	r6, r9
 8006a48:	4632      	mov	r2, r6
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	f000 fa9e 	bl	8006f8e <memmove>
 8006a52:	68a3      	ldr	r3, [r4, #8]
 8006a54:	1b9b      	subs	r3, r3, r6
 8006a56:	60a3      	str	r3, [r4, #8]
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	441e      	add	r6, r3
 8006a5c:	6026      	str	r6, [r4, #0]
 8006a5e:	2000      	movs	r0, #0
 8006a60:	e7dc      	b.n	8006a1c <__ssputs_r+0x58>
 8006a62:	462a      	mov	r2, r5
 8006a64:	f000 fb54 	bl	8007110 <_realloc_r>
 8006a68:	4606      	mov	r6, r0
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d1e2      	bne.n	8006a34 <__ssputs_r+0x70>
 8006a6e:	6921      	ldr	r1, [r4, #16]
 8006a70:	4650      	mov	r0, sl
 8006a72:	f000 faa5 	bl	8006fc0 <_free_r>
 8006a76:	e7c8      	b.n	8006a0a <__ssputs_r+0x46>

08006a78 <_svfiprintf_r>:
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	461d      	mov	r5, r3
 8006a7e:	898b      	ldrh	r3, [r1, #12]
 8006a80:	061f      	lsls	r7, r3, #24
 8006a82:	b09d      	sub	sp, #116	; 0x74
 8006a84:	4680      	mov	r8, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	4616      	mov	r6, r2
 8006a8a:	d50f      	bpl.n	8006aac <_svfiprintf_r+0x34>
 8006a8c:	690b      	ldr	r3, [r1, #16]
 8006a8e:	b96b      	cbnz	r3, 8006aac <_svfiprintf_r+0x34>
 8006a90:	2140      	movs	r1, #64	; 0x40
 8006a92:	f000 fae3 	bl	800705c <_malloc_r>
 8006a96:	6020      	str	r0, [r4, #0]
 8006a98:	6120      	str	r0, [r4, #16]
 8006a9a:	b928      	cbnz	r0, 8006aa8 <_svfiprintf_r+0x30>
 8006a9c:	230c      	movs	r3, #12
 8006a9e:	f8c8 3000 	str.w	r3, [r8]
 8006aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa6:	e0c8      	b.n	8006c3a <_svfiprintf_r+0x1c2>
 8006aa8:	2340      	movs	r3, #64	; 0x40
 8006aaa:	6163      	str	r3, [r4, #20]
 8006aac:	2300      	movs	r3, #0
 8006aae:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ab6:	2330      	movs	r3, #48	; 0x30
 8006ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006abc:	9503      	str	r5, [sp, #12]
 8006abe:	f04f 0b01 	mov.w	fp, #1
 8006ac2:	4637      	mov	r7, r6
 8006ac4:	463d      	mov	r5, r7
 8006ac6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006aca:	b10b      	cbz	r3, 8006ad0 <_svfiprintf_r+0x58>
 8006acc:	2b25      	cmp	r3, #37	; 0x25
 8006ace:	d13e      	bne.n	8006b4e <_svfiprintf_r+0xd6>
 8006ad0:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ad4:	d00b      	beq.n	8006aee <_svfiprintf_r+0x76>
 8006ad6:	4653      	mov	r3, sl
 8006ad8:	4632      	mov	r2, r6
 8006ada:	4621      	mov	r1, r4
 8006adc:	4640      	mov	r0, r8
 8006ade:	f7ff ff71 	bl	80069c4 <__ssputs_r>
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f000 80a4 	beq.w	8006c30 <_svfiprintf_r+0x1b8>
 8006ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aea:	4453      	add	r3, sl
 8006aec:	9309      	str	r3, [sp, #36]	; 0x24
 8006aee:	783b      	ldrb	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 809d 	beq.w	8006c30 <_svfiprintf_r+0x1b8>
 8006af6:	2300      	movs	r3, #0
 8006af8:	f04f 32ff 	mov.w	r2, #4294967295
 8006afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b00:	9304      	str	r3, [sp, #16]
 8006b02:	9307      	str	r3, [sp, #28]
 8006b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b08:	931a      	str	r3, [sp, #104]	; 0x68
 8006b0a:	462f      	mov	r7, r5
 8006b0c:	2205      	movs	r2, #5
 8006b0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b12:	4850      	ldr	r0, [pc, #320]	; (8006c54 <_svfiprintf_r+0x1dc>)
 8006b14:	f7f9 fb64 	bl	80001e0 <memchr>
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	b9d0      	cbnz	r0, 8006b52 <_svfiprintf_r+0xda>
 8006b1c:	06d9      	lsls	r1, r3, #27
 8006b1e:	bf44      	itt	mi
 8006b20:	2220      	movmi	r2, #32
 8006b22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b26:	071a      	lsls	r2, r3, #28
 8006b28:	bf44      	itt	mi
 8006b2a:	222b      	movmi	r2, #43	; 0x2b
 8006b2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b30:	782a      	ldrb	r2, [r5, #0]
 8006b32:	2a2a      	cmp	r2, #42	; 0x2a
 8006b34:	d015      	beq.n	8006b62 <_svfiprintf_r+0xea>
 8006b36:	9a07      	ldr	r2, [sp, #28]
 8006b38:	462f      	mov	r7, r5
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	250a      	movs	r5, #10
 8006b3e:	4639      	mov	r1, r7
 8006b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b44:	3b30      	subs	r3, #48	; 0x30
 8006b46:	2b09      	cmp	r3, #9
 8006b48:	d94d      	bls.n	8006be6 <_svfiprintf_r+0x16e>
 8006b4a:	b1b8      	cbz	r0, 8006b7c <_svfiprintf_r+0x104>
 8006b4c:	e00f      	b.n	8006b6e <_svfiprintf_r+0xf6>
 8006b4e:	462f      	mov	r7, r5
 8006b50:	e7b8      	b.n	8006ac4 <_svfiprintf_r+0x4c>
 8006b52:	4a40      	ldr	r2, [pc, #256]	; (8006c54 <_svfiprintf_r+0x1dc>)
 8006b54:	1a80      	subs	r0, r0, r2
 8006b56:	fa0b f000 	lsl.w	r0, fp, r0
 8006b5a:	4318      	orrs	r0, r3
 8006b5c:	9004      	str	r0, [sp, #16]
 8006b5e:	463d      	mov	r5, r7
 8006b60:	e7d3      	b.n	8006b0a <_svfiprintf_r+0x92>
 8006b62:	9a03      	ldr	r2, [sp, #12]
 8006b64:	1d11      	adds	r1, r2, #4
 8006b66:	6812      	ldr	r2, [r2, #0]
 8006b68:	9103      	str	r1, [sp, #12]
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	db01      	blt.n	8006b72 <_svfiprintf_r+0xfa>
 8006b6e:	9207      	str	r2, [sp, #28]
 8006b70:	e004      	b.n	8006b7c <_svfiprintf_r+0x104>
 8006b72:	4252      	negs	r2, r2
 8006b74:	f043 0302 	orr.w	r3, r3, #2
 8006b78:	9207      	str	r2, [sp, #28]
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	783b      	ldrb	r3, [r7, #0]
 8006b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b80:	d10c      	bne.n	8006b9c <_svfiprintf_r+0x124>
 8006b82:	787b      	ldrb	r3, [r7, #1]
 8006b84:	2b2a      	cmp	r3, #42	; 0x2a
 8006b86:	d133      	bne.n	8006bf0 <_svfiprintf_r+0x178>
 8006b88:	9b03      	ldr	r3, [sp, #12]
 8006b8a:	1d1a      	adds	r2, r3, #4
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	9203      	str	r2, [sp, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bfb8      	it	lt
 8006b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b98:	3702      	adds	r7, #2
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	4d2e      	ldr	r5, [pc, #184]	; (8006c58 <_svfiprintf_r+0x1e0>)
 8006b9e:	7839      	ldrb	r1, [r7, #0]
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f7f9 fb1c 	bl	80001e0 <memchr>
 8006ba8:	b138      	cbz	r0, 8006bba <_svfiprintf_r+0x142>
 8006baa:	2340      	movs	r3, #64	; 0x40
 8006bac:	1b40      	subs	r0, r0, r5
 8006bae:	fa03 f000 	lsl.w	r0, r3, r0
 8006bb2:	9b04      	ldr	r3, [sp, #16]
 8006bb4:	4303      	orrs	r3, r0
 8006bb6:	3701      	adds	r7, #1
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	7839      	ldrb	r1, [r7, #0]
 8006bbc:	4827      	ldr	r0, [pc, #156]	; (8006c5c <_svfiprintf_r+0x1e4>)
 8006bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bc2:	2206      	movs	r2, #6
 8006bc4:	1c7e      	adds	r6, r7, #1
 8006bc6:	f7f9 fb0b 	bl	80001e0 <memchr>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d038      	beq.n	8006c40 <_svfiprintf_r+0x1c8>
 8006bce:	4b24      	ldr	r3, [pc, #144]	; (8006c60 <_svfiprintf_r+0x1e8>)
 8006bd0:	bb13      	cbnz	r3, 8006c18 <_svfiprintf_r+0x1a0>
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	3307      	adds	r3, #7
 8006bd6:	f023 0307 	bic.w	r3, r3, #7
 8006bda:	3308      	adds	r3, #8
 8006bdc:	9303      	str	r3, [sp, #12]
 8006bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be0:	444b      	add	r3, r9
 8006be2:	9309      	str	r3, [sp, #36]	; 0x24
 8006be4:	e76d      	b.n	8006ac2 <_svfiprintf_r+0x4a>
 8006be6:	fb05 3202 	mla	r2, r5, r2, r3
 8006bea:	2001      	movs	r0, #1
 8006bec:	460f      	mov	r7, r1
 8006bee:	e7a6      	b.n	8006b3e <_svfiprintf_r+0xc6>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	3701      	adds	r7, #1
 8006bf4:	9305      	str	r3, [sp, #20]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	250a      	movs	r5, #10
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c00:	3a30      	subs	r2, #48	; 0x30
 8006c02:	2a09      	cmp	r2, #9
 8006c04:	d903      	bls.n	8006c0e <_svfiprintf_r+0x196>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0c8      	beq.n	8006b9c <_svfiprintf_r+0x124>
 8006c0a:	9105      	str	r1, [sp, #20]
 8006c0c:	e7c6      	b.n	8006b9c <_svfiprintf_r+0x124>
 8006c0e:	fb05 2101 	mla	r1, r5, r1, r2
 8006c12:	2301      	movs	r3, #1
 8006c14:	4607      	mov	r7, r0
 8006c16:	e7f0      	b.n	8006bfa <_svfiprintf_r+0x182>
 8006c18:	ab03      	add	r3, sp, #12
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <_svfiprintf_r+0x1ec>)
 8006c20:	a904      	add	r1, sp, #16
 8006c22:	4640      	mov	r0, r8
 8006c24:	f3af 8000 	nop.w
 8006c28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c2c:	4681      	mov	r9, r0
 8006c2e:	d1d6      	bne.n	8006bde <_svfiprintf_r+0x166>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	065b      	lsls	r3, r3, #25
 8006c34:	f53f af35 	bmi.w	8006aa2 <_svfiprintf_r+0x2a>
 8006c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c3a:	b01d      	add	sp, #116	; 0x74
 8006c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c40:	ab03      	add	r3, sp, #12
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4622      	mov	r2, r4
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <_svfiprintf_r+0x1ec>)
 8006c48:	a904      	add	r1, sp, #16
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	f000 f882 	bl	8006d54 <_printf_i>
 8006c50:	e7ea      	b.n	8006c28 <_svfiprintf_r+0x1b0>
 8006c52:	bf00      	nop
 8006c54:	08007652 	.word	0x08007652
 8006c58:	08007658 	.word	0x08007658
 8006c5c:	0800765c 	.word	0x0800765c
 8006c60:	00000000 	.word	0x00000000
 8006c64:	080069c5 	.word	0x080069c5

08006c68 <_printf_common>:
 8006c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	4691      	mov	r9, r2
 8006c6e:	461f      	mov	r7, r3
 8006c70:	688a      	ldr	r2, [r1, #8]
 8006c72:	690b      	ldr	r3, [r1, #16]
 8006c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	bfb8      	it	lt
 8006c7c:	4613      	movlt	r3, r2
 8006c7e:	f8c9 3000 	str.w	r3, [r9]
 8006c82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c86:	4606      	mov	r6, r0
 8006c88:	460c      	mov	r4, r1
 8006c8a:	b112      	cbz	r2, 8006c92 <_printf_common+0x2a>
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	f8c9 3000 	str.w	r3, [r9]
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	0699      	lsls	r1, r3, #26
 8006c96:	bf42      	ittt	mi
 8006c98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c9c:	3302      	addmi	r3, #2
 8006c9e:	f8c9 3000 	strmi.w	r3, [r9]
 8006ca2:	6825      	ldr	r5, [r4, #0]
 8006ca4:	f015 0506 	ands.w	r5, r5, #6
 8006ca8:	d107      	bne.n	8006cba <_printf_common+0x52>
 8006caa:	f104 0a19 	add.w	sl, r4, #25
 8006cae:	68e3      	ldr	r3, [r4, #12]
 8006cb0:	f8d9 2000 	ldr.w	r2, [r9]
 8006cb4:	1a9b      	subs	r3, r3, r2
 8006cb6:	42ab      	cmp	r3, r5
 8006cb8:	dc28      	bgt.n	8006d0c <_printf_common+0xa4>
 8006cba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	3300      	adds	r3, #0
 8006cc2:	bf18      	it	ne
 8006cc4:	2301      	movne	r3, #1
 8006cc6:	0692      	lsls	r2, r2, #26
 8006cc8:	d42d      	bmi.n	8006d26 <_printf_common+0xbe>
 8006cca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cce:	4639      	mov	r1, r7
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	47c0      	blx	r8
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d020      	beq.n	8006d1a <_printf_common+0xb2>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	68e5      	ldr	r5, [r4, #12]
 8006cdc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ce0:	f003 0306 	and.w	r3, r3, #6
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	bf08      	it	eq
 8006ce8:	1aad      	subeq	r5, r5, r2
 8006cea:	68a3      	ldr	r3, [r4, #8]
 8006cec:	6922      	ldr	r2, [r4, #16]
 8006cee:	bf0c      	ite	eq
 8006cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cf4:	2500      	movne	r5, #0
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	bfc4      	itt	gt
 8006cfa:	1a9b      	subgt	r3, r3, r2
 8006cfc:	18ed      	addgt	r5, r5, r3
 8006cfe:	f04f 0900 	mov.w	r9, #0
 8006d02:	341a      	adds	r4, #26
 8006d04:	454d      	cmp	r5, r9
 8006d06:	d11a      	bne.n	8006d3e <_printf_common+0xd6>
 8006d08:	2000      	movs	r0, #0
 8006d0a:	e008      	b.n	8006d1e <_printf_common+0xb6>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4652      	mov	r2, sl
 8006d10:	4639      	mov	r1, r7
 8006d12:	4630      	mov	r0, r6
 8006d14:	47c0      	blx	r8
 8006d16:	3001      	adds	r0, #1
 8006d18:	d103      	bne.n	8006d22 <_printf_common+0xba>
 8006d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d22:	3501      	adds	r5, #1
 8006d24:	e7c3      	b.n	8006cae <_printf_common+0x46>
 8006d26:	18e1      	adds	r1, r4, r3
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	2030      	movs	r0, #48	; 0x30
 8006d2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d30:	4422      	add	r2, r4
 8006d32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d3a:	3302      	adds	r3, #2
 8006d3c:	e7c5      	b.n	8006cca <_printf_common+0x62>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4622      	mov	r2, r4
 8006d42:	4639      	mov	r1, r7
 8006d44:	4630      	mov	r0, r6
 8006d46:	47c0      	blx	r8
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d0e6      	beq.n	8006d1a <_printf_common+0xb2>
 8006d4c:	f109 0901 	add.w	r9, r9, #1
 8006d50:	e7d8      	b.n	8006d04 <_printf_common+0x9c>
	...

08006d54 <_printf_i>:
 8006d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	7e09      	ldrb	r1, [r1, #24]
 8006d60:	b085      	sub	sp, #20
 8006d62:	296e      	cmp	r1, #110	; 0x6e
 8006d64:	4617      	mov	r7, r2
 8006d66:	4606      	mov	r6, r0
 8006d68:	4698      	mov	r8, r3
 8006d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d6c:	f000 80b3 	beq.w	8006ed6 <_printf_i+0x182>
 8006d70:	d822      	bhi.n	8006db8 <_printf_i+0x64>
 8006d72:	2963      	cmp	r1, #99	; 0x63
 8006d74:	d036      	beq.n	8006de4 <_printf_i+0x90>
 8006d76:	d80a      	bhi.n	8006d8e <_printf_i+0x3a>
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	f000 80b9 	beq.w	8006ef0 <_printf_i+0x19c>
 8006d7e:	2958      	cmp	r1, #88	; 0x58
 8006d80:	f000 8083 	beq.w	8006e8a <_printf_i+0x136>
 8006d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d8c:	e032      	b.n	8006df4 <_printf_i+0xa0>
 8006d8e:	2964      	cmp	r1, #100	; 0x64
 8006d90:	d001      	beq.n	8006d96 <_printf_i+0x42>
 8006d92:	2969      	cmp	r1, #105	; 0x69
 8006d94:	d1f6      	bne.n	8006d84 <_printf_i+0x30>
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	6813      	ldr	r3, [r2, #0]
 8006d9a:	0605      	lsls	r5, r0, #24
 8006d9c:	f103 0104 	add.w	r1, r3, #4
 8006da0:	d52a      	bpl.n	8006df8 <_printf_i+0xa4>
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6011      	str	r1, [r2, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da03      	bge.n	8006db2 <_printf_i+0x5e>
 8006daa:	222d      	movs	r2, #45	; 0x2d
 8006dac:	425b      	negs	r3, r3
 8006dae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006db2:	486f      	ldr	r0, [pc, #444]	; (8006f70 <_printf_i+0x21c>)
 8006db4:	220a      	movs	r2, #10
 8006db6:	e039      	b.n	8006e2c <_printf_i+0xd8>
 8006db8:	2973      	cmp	r1, #115	; 0x73
 8006dba:	f000 809d 	beq.w	8006ef8 <_printf_i+0x1a4>
 8006dbe:	d808      	bhi.n	8006dd2 <_printf_i+0x7e>
 8006dc0:	296f      	cmp	r1, #111	; 0x6f
 8006dc2:	d020      	beq.n	8006e06 <_printf_i+0xb2>
 8006dc4:	2970      	cmp	r1, #112	; 0x70
 8006dc6:	d1dd      	bne.n	8006d84 <_printf_i+0x30>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	f043 0320 	orr.w	r3, r3, #32
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	e003      	b.n	8006dda <_printf_i+0x86>
 8006dd2:	2975      	cmp	r1, #117	; 0x75
 8006dd4:	d017      	beq.n	8006e06 <_printf_i+0xb2>
 8006dd6:	2978      	cmp	r1, #120	; 0x78
 8006dd8:	d1d4      	bne.n	8006d84 <_printf_i+0x30>
 8006dda:	2378      	movs	r3, #120	; 0x78
 8006ddc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006de0:	4864      	ldr	r0, [pc, #400]	; (8006f74 <_printf_i+0x220>)
 8006de2:	e055      	b.n	8006e90 <_printf_i+0x13c>
 8006de4:	6813      	ldr	r3, [r2, #0]
 8006de6:	1d19      	adds	r1, r3, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6011      	str	r1, [r2, #0]
 8006dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006df4:	2301      	movs	r3, #1
 8006df6:	e08c      	b.n	8006f12 <_printf_i+0x1be>
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6011      	str	r1, [r2, #0]
 8006dfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e00:	bf18      	it	ne
 8006e02:	b21b      	sxthne	r3, r3
 8006e04:	e7cf      	b.n	8006da6 <_printf_i+0x52>
 8006e06:	6813      	ldr	r3, [r2, #0]
 8006e08:	6825      	ldr	r5, [r4, #0]
 8006e0a:	1d18      	adds	r0, r3, #4
 8006e0c:	6010      	str	r0, [r2, #0]
 8006e0e:	0628      	lsls	r0, r5, #24
 8006e10:	d501      	bpl.n	8006e16 <_printf_i+0xc2>
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	e002      	b.n	8006e1c <_printf_i+0xc8>
 8006e16:	0668      	lsls	r0, r5, #25
 8006e18:	d5fb      	bpl.n	8006e12 <_printf_i+0xbe>
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	4854      	ldr	r0, [pc, #336]	; (8006f70 <_printf_i+0x21c>)
 8006e1e:	296f      	cmp	r1, #111	; 0x6f
 8006e20:	bf14      	ite	ne
 8006e22:	220a      	movne	r2, #10
 8006e24:	2208      	moveq	r2, #8
 8006e26:	2100      	movs	r1, #0
 8006e28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e2c:	6865      	ldr	r5, [r4, #4]
 8006e2e:	60a5      	str	r5, [r4, #8]
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	f2c0 8095 	blt.w	8006f60 <_printf_i+0x20c>
 8006e36:	6821      	ldr	r1, [r4, #0]
 8006e38:	f021 0104 	bic.w	r1, r1, #4
 8006e3c:	6021      	str	r1, [r4, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d13d      	bne.n	8006ebe <_printf_i+0x16a>
 8006e42:	2d00      	cmp	r5, #0
 8006e44:	f040 808e 	bne.w	8006f64 <_printf_i+0x210>
 8006e48:	4665      	mov	r5, ip
 8006e4a:	2a08      	cmp	r2, #8
 8006e4c:	d10b      	bne.n	8006e66 <_printf_i+0x112>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	07db      	lsls	r3, r3, #31
 8006e52:	d508      	bpl.n	8006e66 <_printf_i+0x112>
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	6862      	ldr	r2, [r4, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	bfde      	ittt	le
 8006e5c:	2330      	movle	r3, #48	; 0x30
 8006e5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e66:	ebac 0305 	sub.w	r3, ip, r5
 8006e6a:	6123      	str	r3, [r4, #16]
 8006e6c:	f8cd 8000 	str.w	r8, [sp]
 8006e70:	463b      	mov	r3, r7
 8006e72:	aa03      	add	r2, sp, #12
 8006e74:	4621      	mov	r1, r4
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff fef6 	bl	8006c68 <_printf_common>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d14d      	bne.n	8006f1c <_printf_i+0x1c8>
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295
 8006e84:	b005      	add	sp, #20
 8006e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e8a:	4839      	ldr	r0, [pc, #228]	; (8006f70 <_printf_i+0x21c>)
 8006e8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e90:	6813      	ldr	r3, [r2, #0]
 8006e92:	6821      	ldr	r1, [r4, #0]
 8006e94:	1d1d      	adds	r5, r3, #4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6015      	str	r5, [r2, #0]
 8006e9a:	060a      	lsls	r2, r1, #24
 8006e9c:	d50b      	bpl.n	8006eb6 <_printf_i+0x162>
 8006e9e:	07ca      	lsls	r2, r1, #31
 8006ea0:	bf44      	itt	mi
 8006ea2:	f041 0120 	orrmi.w	r1, r1, #32
 8006ea6:	6021      	strmi	r1, [r4, #0]
 8006ea8:	b91b      	cbnz	r3, 8006eb2 <_printf_i+0x15e>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	f022 0220 	bic.w	r2, r2, #32
 8006eb0:	6022      	str	r2, [r4, #0]
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	e7b7      	b.n	8006e26 <_printf_i+0xd2>
 8006eb6:	064d      	lsls	r5, r1, #25
 8006eb8:	bf48      	it	mi
 8006eba:	b29b      	uxthmi	r3, r3
 8006ebc:	e7ef      	b.n	8006e9e <_printf_i+0x14a>
 8006ebe:	4665      	mov	r5, ip
 8006ec0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ec4:	fb02 3311 	mls	r3, r2, r1, r3
 8006ec8:	5cc3      	ldrb	r3, [r0, r3]
 8006eca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ece:	460b      	mov	r3, r1
 8006ed0:	2900      	cmp	r1, #0
 8006ed2:	d1f5      	bne.n	8006ec0 <_printf_i+0x16c>
 8006ed4:	e7b9      	b.n	8006e4a <_printf_i+0xf6>
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	6825      	ldr	r5, [r4, #0]
 8006eda:	6961      	ldr	r1, [r4, #20]
 8006edc:	1d18      	adds	r0, r3, #4
 8006ede:	6010      	str	r0, [r2, #0]
 8006ee0:	0628      	lsls	r0, r5, #24
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	d501      	bpl.n	8006eea <_printf_i+0x196>
 8006ee6:	6019      	str	r1, [r3, #0]
 8006ee8:	e002      	b.n	8006ef0 <_printf_i+0x19c>
 8006eea:	066a      	lsls	r2, r5, #25
 8006eec:	d5fb      	bpl.n	8006ee6 <_printf_i+0x192>
 8006eee:	8019      	strh	r1, [r3, #0]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	4665      	mov	r5, ip
 8006ef6:	e7b9      	b.n	8006e6c <_printf_i+0x118>
 8006ef8:	6813      	ldr	r3, [r2, #0]
 8006efa:	1d19      	adds	r1, r3, #4
 8006efc:	6011      	str	r1, [r2, #0]
 8006efe:	681d      	ldr	r5, [r3, #0]
 8006f00:	6862      	ldr	r2, [r4, #4]
 8006f02:	2100      	movs	r1, #0
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7f9 f96b 	bl	80001e0 <memchr>
 8006f0a:	b108      	cbz	r0, 8006f10 <_printf_i+0x1bc>
 8006f0c:	1b40      	subs	r0, r0, r5
 8006f0e:	6060      	str	r0, [r4, #4]
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	2300      	movs	r3, #0
 8006f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f1a:	e7a7      	b.n	8006e6c <_printf_i+0x118>
 8006f1c:	6923      	ldr	r3, [r4, #16]
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4639      	mov	r1, r7
 8006f22:	4630      	mov	r0, r6
 8006f24:	47c0      	blx	r8
 8006f26:	3001      	adds	r0, #1
 8006f28:	d0aa      	beq.n	8006e80 <_printf_i+0x12c>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	079b      	lsls	r3, r3, #30
 8006f2e:	d413      	bmi.n	8006f58 <_printf_i+0x204>
 8006f30:	68e0      	ldr	r0, [r4, #12]
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	4298      	cmp	r0, r3
 8006f36:	bfb8      	it	lt
 8006f38:	4618      	movlt	r0, r3
 8006f3a:	e7a3      	b.n	8006e84 <_printf_i+0x130>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	464a      	mov	r2, r9
 8006f40:	4639      	mov	r1, r7
 8006f42:	4630      	mov	r0, r6
 8006f44:	47c0      	blx	r8
 8006f46:	3001      	adds	r0, #1
 8006f48:	d09a      	beq.n	8006e80 <_printf_i+0x12c>
 8006f4a:	3501      	adds	r5, #1
 8006f4c:	68e3      	ldr	r3, [r4, #12]
 8006f4e:	9a03      	ldr	r2, [sp, #12]
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	42ab      	cmp	r3, r5
 8006f54:	dcf2      	bgt.n	8006f3c <_printf_i+0x1e8>
 8006f56:	e7eb      	b.n	8006f30 <_printf_i+0x1dc>
 8006f58:	2500      	movs	r5, #0
 8006f5a:	f104 0919 	add.w	r9, r4, #25
 8006f5e:	e7f5      	b.n	8006f4c <_printf_i+0x1f8>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1ac      	bne.n	8006ebe <_printf_i+0x16a>
 8006f64:	7803      	ldrb	r3, [r0, #0]
 8006f66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f6e:	e76c      	b.n	8006e4a <_printf_i+0xf6>
 8006f70:	08007663 	.word	0x08007663
 8006f74:	08007674 	.word	0x08007674

08006f78 <memcpy>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	1e43      	subs	r3, r0, #1
 8006f7c:	440a      	add	r2, r1
 8006f7e:	4291      	cmp	r1, r2
 8006f80:	d100      	bne.n	8006f84 <memcpy+0xc>
 8006f82:	bd10      	pop	{r4, pc}
 8006f84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f8c:	e7f7      	b.n	8006f7e <memcpy+0x6>

08006f8e <memmove>:
 8006f8e:	4288      	cmp	r0, r1
 8006f90:	b510      	push	{r4, lr}
 8006f92:	eb01 0302 	add.w	r3, r1, r2
 8006f96:	d807      	bhi.n	8006fa8 <memmove+0x1a>
 8006f98:	1e42      	subs	r2, r0, #1
 8006f9a:	4299      	cmp	r1, r3
 8006f9c:	d00a      	beq.n	8006fb4 <memmove+0x26>
 8006f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006fa6:	e7f8      	b.n	8006f9a <memmove+0xc>
 8006fa8:	4283      	cmp	r3, r0
 8006faa:	d9f5      	bls.n	8006f98 <memmove+0xa>
 8006fac:	1881      	adds	r1, r0, r2
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	42d3      	cmn	r3, r2
 8006fb2:	d100      	bne.n	8006fb6 <memmove+0x28>
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006fbe:	e7f7      	b.n	8006fb0 <memmove+0x22>

08006fc0 <_free_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	d045      	beq.n	8007054 <_free_r+0x94>
 8006fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fcc:	1f0c      	subs	r4, r1, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bfb8      	it	lt
 8006fd2:	18e4      	addlt	r4, r4, r3
 8006fd4:	f000 f8d2 	bl	800717c <__malloc_lock>
 8006fd8:	4a1f      	ldr	r2, [pc, #124]	; (8007058 <_free_r+0x98>)
 8006fda:	6813      	ldr	r3, [r2, #0]
 8006fdc:	4610      	mov	r0, r2
 8006fde:	b933      	cbnz	r3, 8006fee <_free_r+0x2e>
 8006fe0:	6063      	str	r3, [r4, #4]
 8006fe2:	6014      	str	r4, [r2, #0]
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fea:	f000 b8c8 	b.w	800717e <__malloc_unlock>
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	d90c      	bls.n	800700c <_free_r+0x4c>
 8006ff2:	6821      	ldr	r1, [r4, #0]
 8006ff4:	1862      	adds	r2, r4, r1
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	bf04      	itt	eq
 8006ffa:	681a      	ldreq	r2, [r3, #0]
 8006ffc:	685b      	ldreq	r3, [r3, #4]
 8006ffe:	6063      	str	r3, [r4, #4]
 8007000:	bf04      	itt	eq
 8007002:	1852      	addeq	r2, r2, r1
 8007004:	6022      	streq	r2, [r4, #0]
 8007006:	6004      	str	r4, [r0, #0]
 8007008:	e7ec      	b.n	8006fe4 <_free_r+0x24>
 800700a:	4613      	mov	r3, r2
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	b10a      	cbz	r2, 8007014 <_free_r+0x54>
 8007010:	42a2      	cmp	r2, r4
 8007012:	d9fa      	bls.n	800700a <_free_r+0x4a>
 8007014:	6819      	ldr	r1, [r3, #0]
 8007016:	1858      	adds	r0, r3, r1
 8007018:	42a0      	cmp	r0, r4
 800701a:	d10b      	bne.n	8007034 <_free_r+0x74>
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	4401      	add	r1, r0
 8007020:	1858      	adds	r0, r3, r1
 8007022:	4282      	cmp	r2, r0
 8007024:	6019      	str	r1, [r3, #0]
 8007026:	d1dd      	bne.n	8006fe4 <_free_r+0x24>
 8007028:	6810      	ldr	r0, [r2, #0]
 800702a:	6852      	ldr	r2, [r2, #4]
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	4401      	add	r1, r0
 8007030:	6019      	str	r1, [r3, #0]
 8007032:	e7d7      	b.n	8006fe4 <_free_r+0x24>
 8007034:	d902      	bls.n	800703c <_free_r+0x7c>
 8007036:	230c      	movs	r3, #12
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	e7d3      	b.n	8006fe4 <_free_r+0x24>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	1821      	adds	r1, r4, r0
 8007040:	428a      	cmp	r2, r1
 8007042:	bf04      	itt	eq
 8007044:	6811      	ldreq	r1, [r2, #0]
 8007046:	6852      	ldreq	r2, [r2, #4]
 8007048:	6062      	str	r2, [r4, #4]
 800704a:	bf04      	itt	eq
 800704c:	1809      	addeq	r1, r1, r0
 800704e:	6021      	streq	r1, [r4, #0]
 8007050:	605c      	str	r4, [r3, #4]
 8007052:	e7c7      	b.n	8006fe4 <_free_r+0x24>
 8007054:	bd38      	pop	{r3, r4, r5, pc}
 8007056:	bf00      	nop
 8007058:	20000094 	.word	0x20000094

0800705c <_malloc_r>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	1ccd      	adds	r5, r1, #3
 8007060:	f025 0503 	bic.w	r5, r5, #3
 8007064:	3508      	adds	r5, #8
 8007066:	2d0c      	cmp	r5, #12
 8007068:	bf38      	it	cc
 800706a:	250c      	movcc	r5, #12
 800706c:	2d00      	cmp	r5, #0
 800706e:	4606      	mov	r6, r0
 8007070:	db01      	blt.n	8007076 <_malloc_r+0x1a>
 8007072:	42a9      	cmp	r1, r5
 8007074:	d903      	bls.n	800707e <_malloc_r+0x22>
 8007076:	230c      	movs	r3, #12
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	2000      	movs	r0, #0
 800707c:	bd70      	pop	{r4, r5, r6, pc}
 800707e:	f000 f87d 	bl	800717c <__malloc_lock>
 8007082:	4a21      	ldr	r2, [pc, #132]	; (8007108 <_malloc_r+0xac>)
 8007084:	6814      	ldr	r4, [r2, #0]
 8007086:	4621      	mov	r1, r4
 8007088:	b991      	cbnz	r1, 80070b0 <_malloc_r+0x54>
 800708a:	4c20      	ldr	r4, [pc, #128]	; (800710c <_malloc_r+0xb0>)
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	b91b      	cbnz	r3, 8007098 <_malloc_r+0x3c>
 8007090:	4630      	mov	r0, r6
 8007092:	f000 f863 	bl	800715c <_sbrk_r>
 8007096:	6020      	str	r0, [r4, #0]
 8007098:	4629      	mov	r1, r5
 800709a:	4630      	mov	r0, r6
 800709c:	f000 f85e 	bl	800715c <_sbrk_r>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d124      	bne.n	80070ee <_malloc_r+0x92>
 80070a4:	230c      	movs	r3, #12
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	4630      	mov	r0, r6
 80070aa:	f000 f868 	bl	800717e <__malloc_unlock>
 80070ae:	e7e4      	b.n	800707a <_malloc_r+0x1e>
 80070b0:	680b      	ldr	r3, [r1, #0]
 80070b2:	1b5b      	subs	r3, r3, r5
 80070b4:	d418      	bmi.n	80070e8 <_malloc_r+0x8c>
 80070b6:	2b0b      	cmp	r3, #11
 80070b8:	d90f      	bls.n	80070da <_malloc_r+0x7e>
 80070ba:	600b      	str	r3, [r1, #0]
 80070bc:	50cd      	str	r5, [r1, r3]
 80070be:	18cc      	adds	r4, r1, r3
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 f85c 	bl	800717e <__malloc_unlock>
 80070c6:	f104 000b 	add.w	r0, r4, #11
 80070ca:	1d23      	adds	r3, r4, #4
 80070cc:	f020 0007 	bic.w	r0, r0, #7
 80070d0:	1ac3      	subs	r3, r0, r3
 80070d2:	d0d3      	beq.n	800707c <_malloc_r+0x20>
 80070d4:	425a      	negs	r2, r3
 80070d6:	50e2      	str	r2, [r4, r3]
 80070d8:	e7d0      	b.n	800707c <_malloc_r+0x20>
 80070da:	428c      	cmp	r4, r1
 80070dc:	684b      	ldr	r3, [r1, #4]
 80070de:	bf16      	itet	ne
 80070e0:	6063      	strne	r3, [r4, #4]
 80070e2:	6013      	streq	r3, [r2, #0]
 80070e4:	460c      	movne	r4, r1
 80070e6:	e7eb      	b.n	80070c0 <_malloc_r+0x64>
 80070e8:	460c      	mov	r4, r1
 80070ea:	6849      	ldr	r1, [r1, #4]
 80070ec:	e7cc      	b.n	8007088 <_malloc_r+0x2c>
 80070ee:	1cc4      	adds	r4, r0, #3
 80070f0:	f024 0403 	bic.w	r4, r4, #3
 80070f4:	42a0      	cmp	r0, r4
 80070f6:	d005      	beq.n	8007104 <_malloc_r+0xa8>
 80070f8:	1a21      	subs	r1, r4, r0
 80070fa:	4630      	mov	r0, r6
 80070fc:	f000 f82e 	bl	800715c <_sbrk_r>
 8007100:	3001      	adds	r0, #1
 8007102:	d0cf      	beq.n	80070a4 <_malloc_r+0x48>
 8007104:	6025      	str	r5, [r4, #0]
 8007106:	e7db      	b.n	80070c0 <_malloc_r+0x64>
 8007108:	20000094 	.word	0x20000094
 800710c:	20000098 	.word	0x20000098

08007110 <_realloc_r>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	4607      	mov	r7, r0
 8007114:	4614      	mov	r4, r2
 8007116:	460e      	mov	r6, r1
 8007118:	b921      	cbnz	r1, 8007124 <_realloc_r+0x14>
 800711a:	4611      	mov	r1, r2
 800711c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007120:	f7ff bf9c 	b.w	800705c <_malloc_r>
 8007124:	b922      	cbnz	r2, 8007130 <_realloc_r+0x20>
 8007126:	f7ff ff4b 	bl	8006fc0 <_free_r>
 800712a:	4625      	mov	r5, r4
 800712c:	4628      	mov	r0, r5
 800712e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007130:	f000 f826 	bl	8007180 <_malloc_usable_size_r>
 8007134:	42a0      	cmp	r0, r4
 8007136:	d20f      	bcs.n	8007158 <_realloc_r+0x48>
 8007138:	4621      	mov	r1, r4
 800713a:	4638      	mov	r0, r7
 800713c:	f7ff ff8e 	bl	800705c <_malloc_r>
 8007140:	4605      	mov	r5, r0
 8007142:	2800      	cmp	r0, #0
 8007144:	d0f2      	beq.n	800712c <_realloc_r+0x1c>
 8007146:	4631      	mov	r1, r6
 8007148:	4622      	mov	r2, r4
 800714a:	f7ff ff15 	bl	8006f78 <memcpy>
 800714e:	4631      	mov	r1, r6
 8007150:	4638      	mov	r0, r7
 8007152:	f7ff ff35 	bl	8006fc0 <_free_r>
 8007156:	e7e9      	b.n	800712c <_realloc_r+0x1c>
 8007158:	4635      	mov	r5, r6
 800715a:	e7e7      	b.n	800712c <_realloc_r+0x1c>

0800715c <_sbrk_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4c06      	ldr	r4, [pc, #24]	; (8007178 <_sbrk_r+0x1c>)
 8007160:	2300      	movs	r3, #0
 8007162:	4605      	mov	r5, r0
 8007164:	4608      	mov	r0, r1
 8007166:	6023      	str	r3, [r4, #0]
 8007168:	f7fe feda 	bl	8005f20 <_sbrk>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_sbrk_r+0x1a>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	b103      	cbz	r3, 8007176 <_sbrk_r+0x1a>
 8007174:	602b      	str	r3, [r5, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	2000025c 	.word	0x2000025c

0800717c <__malloc_lock>:
 800717c:	4770      	bx	lr

0800717e <__malloc_unlock>:
 800717e:	4770      	bx	lr

08007180 <_malloc_usable_size_r>:
 8007180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007184:	1f18      	subs	r0, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	bfbc      	itt	lt
 800718a:	580b      	ldrlt	r3, [r1, r0]
 800718c:	18c0      	addlt	r0, r0, r3
 800718e:	4770      	bx	lr

08007190 <_init>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr

0800719c <_fini>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr
